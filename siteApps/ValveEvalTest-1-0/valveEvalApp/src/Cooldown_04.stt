program CDOM04Logic
option +r;

%% #include <math.h>


// Thermal Shield Line Mass Flow Rate Regulation
// OM041 valve list
int stopindex = 2;
char om041_valveName[2][60] = {
"SCL31-CDL01:EBx01-CV7501",	"SCL31-CDL01:EBx01-CV7402"
};

// EBx Cold Helium Line Opening Increase
// OM043_1 valve list
 // 266=44 + 66 + 22 + 33 + 55 + 44 + 2;
int stopindex_1_2 = 266;	
char om043_1_valveName[266][60] = {
"P2DT-CDL04:VBx01-CV7401",	"SCL32-CDL03:VBx19-CV7401",	"SCL32-CDL03:VBx18-CV7401",	"SCL32-CDL03:VBx17-CV7401",	"SCL32-CDL03:VBx16-CV7401",	
"SCL32-CDL03:VBx15-CV7401",	"SCL32-CDL03:VBx14-CV7401",	"SCL32-CDL03:VBx13-CV7401",	"SCL32-CDL03:VBx12-CV7401",	"SCL32-CDL03:VBx11-CV7401",	
"SCL32-CDL03:VBx10-CV7401",	"SCL32-CDL03:VBx09-CV7401",	"SCL32-CDL03:VBx08-CV7401",	"SCL32-CDL03:VBx07-CV7401",	"SCL32-CDL03:VBx06-CV7401",	
"SCL32-CDL03:VBx05-CV7401",	"SCL32-CDL03:VBx04-CV7401",	"SCL32-CDL03:VBx03-CV7401",	"SCL32-CDL03:VBx02-CV7401",	"SCL32-CDL03:VBx01-CV7401",	
"SCL32-CDL02:VBx13-CV7401",	"SCL32-CDL02:VBx12-CV7401",	"SCL32-CDL02:VBx11-CV7401",	"SCL32-CDL02:VBx10-CV7401",	"SCL32-CDL02:VBx09-CV7401",	
"SCL32-CDL02:VBx08-CV7401",	"SCL32-CDL02:VBx07-CV7401",	"SCL32-CDL02:VBx06-CV7401",	"SCL32-CDL02:VBx05-CV7401",	"SCL32-CDL02:VBx04-CV7401",	
"SCL32-CDL02:VBx03-CV7401",	"SCL32-CDL02:VBx02-CV7401",	"SCL32-CDL02:VBx01-CV7401",	"SCL31-CDL01:VBx22-CV7401",	"SCL31-CDL01:VBx20-CV7401",	
"SCL31-CDL01:VBx18-CV7401",	"SCL31-CDL01:VBx16-CV7401",	"SCL31-CDL01:VBx14-CV7401",	"SCL31-CDL01:VBx12-CV7401",	"SCL31-CDL01:VBx10-CV7401",	
"SCL31-CDL01:VBx08-CV7401",	"SCL31-CDL01:VBx06-CV7401",	"SCL31-CDL01:VBx04-CV7401",	"SCL31-CDL01:VBx02-CV7401",

// EBx Cold Helium Line Opening Increase
// OM043_2 valve list(66)
"P2DT-BL04:CM01-CV8403",	"SCL32-BL03:CM19-CV8403",	"SCL32-BL03:CM18-CV8403",	"SCL32-BL03:CM17-CV8403",	"SCL32-BL03:CM16-CV8403",
"SCL32-BL03:CM15-CV8403",	"SCL32-BL03:CM14-CV8403",	"SCL32-BL03:CM13-CV8403",	"SCL32-BL03:CM12-CV8403",	"SCL32-BL03:CM11-CV8403",
"SCL32-BL03:CM10-CV8403",	"SCL32-BL03:CM09-CV8403",	"SCL32-BL03:CM08-CV8403",	"SCL32-BL03:CM07-CV8403",	"SCL32-BL03:CM06-CV8403",
"SCL32-BL03:CM05-CV8403",	"SCL32-BL03:CM04-CV8403",	"SCL32-BL03:CM03-CV8403",	"SCL32-BL03:CM02-CV8403",	"SCL32-BL03:CM01-CV8403",
"SCL32-BL02:CM13-CV8403",	"SCL32-BL02:CM12-CV8403",	"SCL32-BL02:CM11-CV8403",	"SCL32-BL02:CM10-CV8403",	"SCL32-BL02:CM09-CV8403",
"SCL32-BL02:CM08-CV8403",	"SCL32-BL02:CM07-CV8403",	"SCL32-BL02:CM06-CV8403",	"SCL32-BL02:CM05-CV8403",	"SCL32-BL02:CM04-CV8403",
"SCL32-BL02:CM03-CV8403",	"SCL32-BL02:CM02-CV8403",	"SCL32-BL02:CM01-CV8403",	
"P2DT-BL04:CM01-CV8402", 	"SCL32-BL03:CM19-CV8402",	"SCL32-BL03:CM18-CV8402",	"SCL32-BL03:CM17-CV8402",	"SCL32-BL03:CM16-CV8402",
"SCL32-BL03:CM15-CV8402",	"SCL32-BL03:CM14-CV8402",	"SCL32-BL03:CM13-CV8402",	"SCL32-BL03:CM12-CV8402",	"SCL32-BL03:CM11-CV8402",
"SCL32-BL03:CM10-CV8402",	"SCL32-BL03:CM09-CV8402",	"SCL32-BL03:CM08-CV8402",	"SCL32-BL03:CM07-CV8402",	"SCL32-BL03:CM06-CV8402",
"SCL32-BL03:CM05-CV8402",	"SCL32-BL03:CM04-CV8402",	"SCL32-BL03:CM03-CV8402",	"SCL32-BL03:CM02-CV8402",	"SCL32-BL03:CM01-CV8402",
"SCL32-BL02:CM13-CV8402",	"SCL32-BL02:CM12-CV8402",	"SCL32-BL02:CM11-CV8402",	"SCL32-BL02:CM10-CV8402",	"SCL32-BL02:CM09-CV8402",
"SCL32-BL02:CM08-CV8402",	"SCL32-BL02:CM07-CV8402",	"SCL32-BL02:CM06-CV8402",	"SCL32-BL02:CM05-CV8402",	"SCL32-BL02:CM04-CV8402",
"SCL32-BL02:CM03-CV8402",	"SCL32-BL02:CM02-CV8402",	"SCL32-BL02:CM01-CV8402",

// OM043_3 valve list(22)
"SCL31-BL01:CM22-CV8402",	"SCL31-BL01:CM21-CV8402",	"SCL31-BL01:CM20-CV8402",	"SCL31-BL01:CM19-CV8402",	"SCL31-BL01:CM18-CV8402", 
"SCL31-BL01:CM17-CV8402",	"SCL31-BL01:CM16-CV8402",	"SCL31-BL01:CM15-CV8402",	"SCL31-BL01:CM14-CV8402",	"SCL31-BL01:CM13-CV8402", 
"SCL31-BL01:CM12-CV8402",	"SCL31-BL01:CM11-CV8402",	"SCL31-BL01:CM10-CV8402",	"SCL31-BL01:CM09-CV8402",	"SCL31-BL01:CM08-CV8402", 
"SCL31-BL01:CM07-CV8402",	"SCL31-BL01:CM06-CV8402",	"SCL31-BL01:CM05-CV8402",	"SCL31-BL01:CM04-CV8402",	"SCL31-BL01:CM03-CV8402", 
"SCL31-BL01:CM02-CV8402",	"SCL31-BL01:CM01-CV8402",


// OM043_4 valve list(33)
"P2DT-CDL04:VBx01-CV7201",  "SCL32-CDL03:VBx19-CV7201", "SCL32-CDL03:VBx18-CV7201", "SCL32-CDL03:VBx17-CV7201", "SCL32-CDL03:VBx16-CV7201",
"SCL32-CDL03:VBx15-CV7201", "SCL32-CDL03:VBx14-CV7201", "SCL32-CDL03:VBx13-CV7201", "SCL32-CDL03:VBx12-CV7201", "SCL32-CDL03:VBx11-CV7201",
"SCL32-CDL03:VBx10-CV7201", "SCL32-CDL03:VBx09-CV7201", "SCL32-CDL03:VBx08-CV7201", "SCL32-CDL03:VBx07-CV7201", "SCL32-CDL03:VBx06-CV7201",
"SCL32-CDL03:VBx05-CV7201", "SCL32-CDL03:VBx04-CV7201", "SCL32-CDL03:VBx03-CV7201", "SCL32-CDL03:VBx02-CV7201", "SCL32-CDL03:VBx01-CV7201",
"SCL32-CDL02:VBx13-CV7201", "SCL32-CDL02:VBx12-CV7201", "SCL32-CDL02:VBx11-CV7201", "SCL32-CDL02:VBx10-CV7201", "SCL32-CDL02:VBx09-CV7201",
"SCL32-CDL02:VBx08-CV7201", "SCL32-CDL02:VBx07-CV7201", "SCL32-CDL02:VBx06-CV7201", "SCL32-CDL02:VBx05-CV7201", "SCL32-CDL02:VBx04-CV7201",
"SCL32-CDL02:VBx03-CV7201", "SCL32-CDL02:VBx02-CV7201", "SCL32-CDL02:VBx01-CV7201",

// OM043_5 valve list(55)
"P2DT-BL04:CM01-CV8401",	"SCL32-BL03:CM19-CV8401",	"SCL32-BL03:CM18-CV8401",	"SCL32-BL03:CM17-CV8401",	"SCL32-BL03:CM16-CV8401",
"SCL32-BL03:CM15-CV8401",	"SCL32-BL03:CM14-CV8401",	"SCL32-BL03:CM13-CV8401",	"SCL32-BL03:CM12-CV8401",	"SCL32-BL03:CM11-CV8401",
"SCL32-BL03:CM10-CV8401",	"SCL32-BL03:CM09-CV8401",	"SCL32-BL03:CM08-CV8401",	"SCL32-BL03:CM07-CV8401",	"SCL32-BL03:CM06-CV8401",
"SCL32-BL03:CM05-CV8401",	"SCL32-BL03:CM04-CV8401",	"SCL32-BL03:CM03-CV8401",	"SCL32-BL03:CM02-CV8401",	"SCL32-BL03:CM01-CV8401",
"SCL32-BL02:CM13-CV8401",	"SCL32-BL02:CM12-CV8401",	"SCL32-BL02:CM11-CV8401",	"SCL32-BL02:CM10-CV8401",	"SCL32-BL02:CM09-CV8401",
"SCL32-BL02:CM08-CV8401",	"SCL32-BL02:CM07-CV8401",	"SCL32-BL02:CM06-CV8401",	"SCL32-BL02:CM05-CV8401",	"SCL32-BL02:CM04-CV8401",
"SCL32-BL02:CM03-CV8401",	"SCL32-BL02:CM02-CV8401",	"SCL32-BL02:CM01-CV8401",	"SCL31-BL01:CM22-CV8401",	"SCL31-BL01:CM21-CV8401",
"SCL31-BL01:CM20-CV8401",	"SCL31-BL01:CM19-CV8401",	"SCL31-BL01:CM18-CV8401",	"SCL31-BL01:CM17-CV8401",	"SCL31-BL01:CM16-CV8401",
"SCL31-BL01:CM15-CV8401",	"SCL31-BL01:CM14-CV8401",	"SCL31-BL01:CM13-CV8401",	"SCL31-BL01:CM12-CV8401",	"SCL31-BL01:CM11-CV8401",
"SCL31-BL01:CM10-CV8401",	"SCL31-BL01:CM09-CV8401",	"SCL31-BL01:CM08-CV8401",	"SCL31-BL01:CM07-CV8401",	"SCL31-BL01:CM06-CV8401",
"SCL31-BL01:CM05-CV8401",	"SCL31-BL01:CM04-CV8401",	"SCL31-BL01:CM03-CV8401",	"SCL31-BL01:CM02-CV8401",	"SCL31-BL01:CM01-CV8401",

// OM043_6 valve list(44)
"P2DT-CDL04:VBx01-CV7301",	"SCL32-CDL03:VBx19-CV7301",	"SCL32-CDL03:VBx18-CV7301",	"SCL32-CDL03:VBx17-CV7301",	"SCL32-CDL03:VBx16-CV7301",
"SCL32-CDL03:VBx15-CV7301",	"SCL32-CDL03:VBx14-CV7301",	"SCL32-CDL03:VBx13-CV7301",	"SCL32-CDL03:VBx12-CV7301",	"SCL32-CDL03:VBx11-CV7301",
"SCL32-CDL03:VBx10-CV7301",	"SCL32-CDL03:VBx09-CV7301",	"SCL32-CDL03:VBx08-CV7301",	"SCL32-CDL03:VBx07-CV7301",	"SCL32-CDL03:VBx06-CV7301",
"SCL32-CDL03:VBx05-CV7301",	"SCL32-CDL03:VBx04-CV7301",	"SCL32-CDL03:VBx03-CV7301",	"SCL32-CDL03:VBx02-CV7301",	"SCL32-CDL03:VBx01-CV7301",
"SCL32-CDL02:VBx13-CV7301",	"SCL32-CDL02:VBx12-CV7301",	"SCL32-CDL02:VBx11-CV7301",	"SCL32-CDL02:VBx10-CV7301",	"SCL32-CDL02:VBx09-CV7301",
"SCL32-CDL02:VBx08-CV7301",	"SCL32-CDL02:VBx07-CV7301",	"SCL32-CDL02:VBx06-CV7301",	"SCL32-CDL02:VBx05-CV7301",	"SCL32-CDL02:VBx04-CV7301",
"SCL32-CDL02:VBx03-CV7301",	"SCL32-CDL02:VBx02-CV7301",	"SCL32-CDL02:VBx01-CV7301",	"SCL31-CDL01:VBx22-CV7301",	"SCL31-CDL01:VBx20-CV7301",
"SCL31-CDL01:VBx18-CV7301",	"SCL31-CDL01:VBx16-CV7301",	"SCL31-CDL01:VBx14-CV7301",	"SCL31-CDL01:VBx12-CV7301",	"SCL31-CDL01:VBx10-CV7301",
"SCL31-CDL01:VBx08-CV7301",	"SCL31-CDL01:VBx06-CV7301",	"SCL31-CDL01:VBx04-CV7301",	"SCL31-CDL01:VBx02-CV7301",

// OM043_7 valve list(2)
"Cryo-CDL00:TBx01-CV7201", "Cryo-CDL00:TBx01-XV7201"
};

// EBx Cold Helium Line Opening Increase
// OM043_2 valve list
int stopindex_3 = 66;
char om043_2_valveName[66][60] = {
"P2DT-BL04:CM01-CV8403",	"SCL32-BL03:CM19-CV8403",	"SCL32-BL03:CM18-CV8403",	"SCL32-BL03:CM17-CV8403",	"SCL32-BL03:CM16-CV8403",
"SCL32-BL03:CM15-CV8403",	"SCL32-BL03:CM14-CV8403",	"SCL32-BL03:CM13-CV8403",	"SCL32-BL03:CM12-CV8403",	"SCL32-BL03:CM11-CV8403",
"SCL32-BL03:CM10-CV8403",	"SCL32-BL03:CM09-CV8403",	"SCL32-BL03:CM08-CV8403",	"SCL32-BL03:CM07-CV8403",	"SCL32-BL03:CM06-CV8403",
"SCL32-BL03:CM05-CV8403",	"SCL32-BL03:CM04-CV8403",	"SCL32-BL03:CM03-CV8403",	"SCL32-BL03:CM02-CV8403",	"SCL32-BL03:CM01-CV8403",
"SCL32-BL02:CM13-CV8403",	"SCL32-BL02:CM12-CV8403",	"SCL32-BL02:CM11-CV8403",	"SCL32-BL02:CM10-CV8403",	"SCL32-BL02:CM09-CV8403",
"SCL32-BL02:CM08-CV8403",	"SCL32-BL02:CM07-CV8403",	"SCL32-BL02:CM06-CV8403",	"SCL32-BL02:CM05-CV8403",	"SCL32-BL02:CM04-CV8403",
"SCL32-BL02:CM03-CV8403",	"SCL32-BL02:CM02-CV8403",	"SCL32-BL02:CM01-CV8403",	
"P2DT-BL04:CM01-CV8402", 	"SCL32-BL03:CM19-CV8402",	"SCL32-BL03:CM18-CV8402",	"SCL32-BL03:CM17-CV8402",	"SCL32-BL03:CM16-CV8402",
"SCL32-BL03:CM15-CV8402",	"SCL32-BL03:CM14-CV8402",	"SCL32-BL03:CM13-CV8402",	"SCL32-BL03:CM12-CV8402",	"SCL32-BL03:CM11-CV8402",
"SCL32-BL03:CM10-CV8402",	"SCL32-BL03:CM09-CV8402",	"SCL32-BL03:CM08-CV8402",	"SCL32-BL03:CM07-CV8402",	"SCL32-BL03:CM06-CV8402",
"SCL32-BL03:CM05-CV8402",	"SCL32-BL03:CM04-CV8402",	"SCL32-BL03:CM03-CV8402",	"SCL32-BL03:CM02-CV8402",	"SCL32-BL03:CM01-CV8402",
"SCL32-BL02:CM13-CV8402",	"SCL32-BL02:CM12-CV8402",	"SCL32-BL02:CM11-CV8402",	"SCL32-BL02:CM10-CV8402",	"SCL32-BL02:CM09-CV8402",
"SCL32-BL02:CM08-CV8402",	"SCL32-BL02:CM07-CV8402",	"SCL32-BL02:CM06-CV8402",	"SCL32-BL02:CM05-CV8402",	"SCL32-BL02:CM04-CV8402",
"SCL32-BL02:CM03-CV8402",	"SCL32-BL02:CM02-CV8402",	"SCL32-BL02:CM01-CV8402"
};

// OM043_3 valve list
int stopindex_4 = 22;
char om043_3_valveName[22][60] = {
"SCL31-BL01:CM22-CV8402",	"SCL31-BL01:CM21-CV8402",	"SCL31-BL01:CM20-CV8402",	"SCL31-BL01:CM19-CV8402",	"SCL31-BL01:CM18-CV8402", 
"SCL31-BL01:CM17-CV8402",	"SCL31-BL01:CM16-CV8402",	"SCL31-BL01:CM15-CV8402",	"SCL31-BL01:CM14-CV8402",	"SCL31-BL01:CM13-CV8402", 
"SCL31-BL01:CM12-CV8402",	"SCL31-BL01:CM11-CV8402",	"SCL31-BL01:CM10-CV8402",	"SCL31-BL01:CM09-CV8402",	"SCL31-BL01:CM08-CV8402", 
"SCL31-BL01:CM07-CV8402",	"SCL31-BL01:CM06-CV8402",	"SCL31-BL01:CM05-CV8402",	"SCL31-BL01:CM04-CV8402",	"SCL31-BL01:CM03-CV8402", 
"SCL31-BL01:CM02-CV8402",	"SCL31-BL01:CM01-CV8402"
};

// OM043_4 valve list
int stopindex_5 = 33;
char om043_4_valveName[33][60] = {
"P2DT-CDL04:VBx01-CV7201",  "SCL32-CDL03:VBx19-CV7201", "SCL32-CDL03:VBx18-CV7201", "SCL32-CDL03:VBx17-CV7201", "SCL32-CDL03:VBx16-CV7201",
"SCL32-CDL03:VBx15-CV7201", "SCL32-CDL03:VBx14-CV7201", "SCL32-CDL03:VBx13-CV7201", "SCL32-CDL03:VBx12-CV7201", "SCL32-CDL03:VBx11-CV7201",
"SCL32-CDL03:VBx10-CV7201", "SCL32-CDL03:VBx09-CV7201", "SCL32-CDL03:VBx08-CV7201", "SCL32-CDL03:VBx07-CV7201", "SCL32-CDL03:VBx06-CV7201",
"SCL32-CDL03:VBx05-CV7201", "SCL32-CDL03:VBx04-CV7201", "SCL32-CDL03:VBx03-CV7201", "SCL32-CDL03:VBx02-CV7201", "SCL32-CDL03:VBx01-CV7201",
"SCL32-CDL02:VBx13-CV7201", "SCL32-CDL02:VBx12-CV7201", "SCL32-CDL02:VBx11-CV7201", "SCL32-CDL02:VBx10-CV7201", "SCL32-CDL02:VBx09-CV7201",
"SCL32-CDL02:VBx08-CV7201", "SCL32-CDL02:VBx07-CV7201", "SCL32-CDL02:VBx06-CV7201", "SCL32-CDL02:VBx05-CV7201", "SCL32-CDL02:VBx04-CV7201",
"SCL32-CDL02:VBx03-CV7201", "SCL32-CDL02:VBx02-CV7201", "SCL32-CDL02:VBx01-CV7201"
};

// OM043_5 valve list
int stopindex_6 = 55;
char om043_5_valveName[55][60] = {
"P2DT-BL04:CM01-CV8401",	"SCL32-BL03:CM19-CV8401",	"SCL32-BL03:CM18-CV8401",	"SCL32-BL03:CM17-CV8401",	"SCL32-BL03:CM16-CV8401",
"SCL32-BL03:CM15-CV8401",	"SCL32-BL03:CM14-CV8401",	"SCL32-BL03:CM13-CV8401",	"SCL32-BL03:CM12-CV8401",	"SCL32-BL03:CM11-CV8401",
"SCL32-BL03:CM10-CV8401",	"SCL32-BL03:CM09-CV8401",	"SCL32-BL03:CM08-CV8401",	"SCL32-BL03:CM07-CV8401",	"SCL32-BL03:CM06-CV8401",
"SCL32-BL03:CM05-CV8401",	"SCL32-BL03:CM04-CV8401",	"SCL32-BL03:CM03-CV8401",	"SCL32-BL03:CM02-CV8401",	"SCL32-BL03:CM01-CV8401",
"SCL32-BL02:CM13-CV8401",	"SCL32-BL02:CM12-CV8401",	"SCL32-BL02:CM11-CV8401",	"SCL32-BL02:CM10-CV8401",	"SCL32-BL02:CM09-CV8401",
"SCL32-BL02:CM08-CV8401",	"SCL32-BL02:CM07-CV8401",	"SCL32-BL02:CM06-CV8401",	"SCL32-BL02:CM05-CV8401",	"SCL32-BL02:CM04-CV8401",
"SCL32-BL02:CM03-CV8401",	"SCL32-BL02:CM02-CV8401",	"SCL32-BL02:CM01-CV8401",	"SCL31-BL01:CM22-CV8401",	"SCL31-BL01:CM21-CV8401",
"SCL31-BL01:CM20-CV8401",	"SCL31-BL01:CM19-CV8401",	"SCL31-BL01:CM18-CV8401",	"SCL31-BL01:CM17-CV8401",	"SCL31-BL01:CM16-CV8401",
"SCL31-BL01:CM15-CV8401",	"SCL31-BL01:CM14-CV8401",	"SCL31-BL01:CM13-CV8401",	"SCL31-BL01:CM12-CV8401",	"SCL31-BL01:CM11-CV8401",
"SCL31-BL01:CM10-CV8401",	"SCL31-BL01:CM09-CV8401",	"SCL31-BL01:CM08-CV8401",	"SCL31-BL01:CM07-CV8401",	"SCL31-BL01:CM06-CV8401",
"SCL31-BL01:CM05-CV8401",	"SCL31-BL01:CM04-CV8401",	"SCL31-BL01:CM03-CV8401",	"SCL31-BL01:CM02-CV8401",	"SCL31-BL01:CM01-CV8401"
};

// OM043_6 valve list
int stopindex_7 = 44;
char om043_6_valveName[44][60] = {
"P2DT-CDL04:VBx01-CV7301",	"SCL32-CDL03:VBx19-CV7301",	"SCL32-CDL03:VBx18-CV7301",	"SCL32-CDL03:VBx17-CV7301",	"SCL32-CDL03:VBx16-CV7301",
"SCL32-CDL03:VBx15-CV7301",	"SCL32-CDL03:VBx14-CV7301",	"SCL32-CDL03:VBx13-CV7301",	"SCL32-CDL03:VBx12-CV7301",	"SCL32-CDL03:VBx11-CV7301",
"SCL32-CDL03:VBx10-CV7301",	"SCL32-CDL03:VBx09-CV7301",	"SCL32-CDL03:VBx08-CV7301",	"SCL32-CDL03:VBx07-CV7301",	"SCL32-CDL03:VBx06-CV7301",
"SCL32-CDL03:VBx05-CV7301",	"SCL32-CDL03:VBx04-CV7301",	"SCL32-CDL03:VBx03-CV7301",	"SCL32-CDL03:VBx02-CV7301",	"SCL32-CDL03:VBx01-CV7301",
"SCL32-CDL02:VBx13-CV7301",	"SCL32-CDL02:VBx12-CV7301",	"SCL32-CDL02:VBx11-CV7301",	"SCL32-CDL02:VBx10-CV7301",	"SCL32-CDL02:VBx09-CV7301",
"SCL32-CDL02:VBx08-CV7301",	"SCL32-CDL02:VBx07-CV7301",	"SCL32-CDL02:VBx06-CV7301",	"SCL32-CDL02:VBx05-CV7301",	"SCL32-CDL02:VBx04-CV7301",
"SCL32-CDL02:VBx03-CV7301",	"SCL32-CDL02:VBx02-CV7301",	"SCL32-CDL02:VBx01-CV7301",	"SCL31-CDL01:VBx22-CV7301",	"SCL31-CDL01:VBx20-CV7301",
"SCL31-CDL01:VBx18-CV7301",	"SCL31-CDL01:VBx16-CV7301",	"SCL31-CDL01:VBx14-CV7301",	"SCL31-CDL01:VBx12-CV7301",	"SCL31-CDL01:VBx10-CV7301",
"SCL31-CDL01:VBx08-CV7301",	"SCL31-CDL01:VBx06-CV7301",	"SCL31-CDL01:VBx04-CV7301",	"SCL31-CDL01:VBx02-CV7301"
};

// OM043_7 valve list
int stopindex_8 = 2;
char om043_7_valveName[2][60] = {
"Cryo-CDL00:TBx01-CV7201", "Cryo-CDL00:TBx01-XV7201"
};

string steppv;
assign steppv to "SCL3:CoolDown:StepPV";
monitor steppv;

int ss_start = 0;
assign ss_start to "SCL3:CoolDown:Start";
monitor ss_start;
evflag	efStop;
sync ss_start efStop;

int index = 0;
assign index to "SCL3:CoolDown:IndexPV";
monitor index;

float cdDelay;
assign cdDelay to "SCL3:CoolDown:ScanTime";
monitor cdDelay;

int presz_start = 0;
assign presz_start to "SCL3:CoolDown:PrezStart";
monitor presz_start;

float	valvewave[107];
assign	valvewave to "SCL3:CoolDown:ValveWave";
monitor valvewave;

char	logicname[60];
int		proc = 1;
assign	proc to "";

char	valvename[60];
float	valveval;
assign  valveval to "";

char	valve_evalname[60];
int		valve_eval;
assign	valve_eval to "";

evflag	efCDOM041_0;
evflag	efCDOM041_20;
evflag	efCDOM041_100;

ss ssCDOM041
{
	state stopCDOM041
	{
		when(efTestAndClear(efStop) && ss_start == 1)
		{
			index = 0;
			stopindex = 2;
			stopindex_1_2 = 266;
			pvPut(index, SYNC);
			efSet(efCDOM041_20);
		}state CDOM041_Init
	}

	state CDOM041_Init
	{
		when(delay(cdDelay) && efTestAndClear(efCDOM041_20))
		{
			sprintf(logicname, "%s:CDLogic.PROC", om041_valveName[index]);
			sprintf(valvename, "%s:Valve", om041_valveName[index]);

			printf("%s, %s\n", logicname, valvename);

			if(index < stopindex)
			{
				strcpy(steppv, valvename);
				pvPut(steppv, SYNC);

				pvAssign(valveval, valvename);
				pvMonitor(valveval);

				pvAssign(proc, logicname);
				pvMonitor(proc);
			};

		}state CDOM041_Proc_20

		when(delay(cdDelay) && efTestAndClear(efCDOM041_100))
		{
			sprintf(logicname, "%s:CDLogic.PROC", om041_valveName[index]);
			sprintf(valvename, "%s:Valve", om041_valveName[index]);

			sprintf(logicname, "%s:CDLogic.PROC", om043_1_valveName[index]);
			sprintf(valvename, "%s:Valve", om043_1_valveName[index]);
			printf("%s, %s\n", logicname, valvename);

			if(index < stopindex)
			{
				strcpy(steppv, valvename);
				pvPut(steppv, SYNC);

				pvAssign(valveval, valvename);
				pvMonitor(valveval);

				pvAssign(proc, logicname);
				pvMonitor(proc);
			};

		}state CDOM041_Proc_100

		when(delay(cdDelay) && efTestAndClear(efCDOM041_0))
		{
			sprintf(logicname, "%s:CDLogic.PROC", om043_1_valveName[index]);
			sprintf(valvename, "%s:Valve", om043_1_valveName[index]);
			printf("%s, %s\n", logicname, valvename);

			if(index < stopindex)
			{
				strcpy(steppv, valvename);
				pvPut(steppv, SYNC);

				pvAssign(valveval, valvename);
				pvMonitor(valveval);

				pvAssign(proc, logicname);
				pvMonitor(proc);
			};
		}state CDOM04_Proc_0
	}

	state CDOM041_Proc_20
	{
		when(delay(cdDelay) && valveval < 20 && index < stopindex)
		{
			printf("CDOM041_Proc_100\n");
			proc = 1;
			pvPut(proc, SYNC);
		}state CDOM041_Proc_100

		when(delay(cdDelay) && valveval >= 20 && index < stopindex)
		{
			pvStopMonitor(valveval);
			pvStopMonitor(proc);
			pvAssign(valveval, "");
			pvAssign(proc, "");

			index++;
			pvPut(index, SYNC);

			efSet(efCDOM041_100);
		}state CDOM041_Init

		when(delay(cdDelay) && index >= stopindex)
		{
			strcpy(steppv, "OM041 Done & OM032 Start");
			pvPut(steppv, SYNC);

			efSet(efCDOM041_100);

		}state CDOM041_Init
	}
	state CDOM041_Proc_100
	{
		when(delay(cdDelay) && valveval < 100 && index < stopindex)
		{
			printf("CDOM041_Proc_100\n");
			proc = 1;
			pvPut(proc, SYNC);
		}state CDOM041_Proc_100

		when(delay(cdDelay) && valveval >= 100 && index < stopindex)
		{
			pvStopMonitor(valveval);
			pvStopMonitor(proc);
			pvAssign(valveval, "");
			pvAssign(proc, "");

			index++;
			pvPut(index, SYNC);

			efSet(efCDOM041_0);
		}state CDOM041_Init

		when(delay(cdDelay) && index >= stopindex)
		{
			strcpy(steppv, "OM041 Done & OM032 Start");
			pvPut(steppv, SYNC);

			efSet(efCDOM041_0);

			ss_start = 2;
			pvPut(ss_start, SYNC);

		}state stopCDOM041
	}

	state CDOM04_Proc_0
	{
		when(delay(cdDelay) && valveval > 0 && index < stopindex_1_2)
		{
			printf("CDOM04_Proc_100\n");
			proc = 1;
			pvPut(proc, SYNC);
		}state CDOM04_Proc_0

		when(delay(cdDelay) && valveval <= 0 && index < stopindex_1_2)
		{
			pvStopMonitor(valveval);
			pvStopMonitor(proc);
			pvAssign(valveval, "");
			pvAssign(proc, "");

			index++;
			pvPut(index, SYNC);

			efSet(efCDOM041_0);
		}state CDOM041_Init

		when(delay(cdDelay) && index >= stopindex_1_2)
		{
			strcpy(steppv, "OM04 Done");
			pvPut(steppv, SYNC);

			efSet(efStop);
			ss_start = 2;

			pvPut(ss_start, SYNC);
		}state stopCDOM041
	}
}

