program sncCooldown04
option +r; 

%%#include <math.h> 

char OM041[268][60] = {
"SCL31-CDL01:EBx01-CV7501","SCL31-CDL01:EBx01-CV7402",
"P2DT-CDL04:VBx01-CV7401","SCL32-CDL03:VBx19-CV7401","SCL32-CDL03:VBx18-CV7401","SCL32-CDL03:VBx17-CV7401","SCL32-CDL03:VBx16-CV7401",
"SCL32-CDL03:VBx15-CV7401","SCL32-CDL03:VBx14-CV7401","SCL32-CDL03:VBx13-CV7401","SCL32-CDL03:VBx12-CV7401","SCL32-CDL03:VBx11-CV7401",
"SCL32-CDL03:VBx10-CV7401","SCL32-CDL03:VBx09-CV7401","SCL32-CDL03:VBx08-CV7401","SCL32-CDL03:VBx07-CV7401","SCL32-CDL03:VBx06-CV7401",
"SCL32-CDL03:VBx05-CV7401","SCL32-CDL03:VBx04-CV7401","SCL32-CDL03:VBx03-CV7401","SCL32-CDL03:VBx02-CV7401","SCL32-CDL03:VBx01-CV7401",
"SCL32-CDL02:VBx13-CV7401","SCL32-CDL02:VBx12-CV7401","SCL32-CDL02:VBx11-CV7401","SCL32-CDL02:VBx10-CV7401","SCL32-CDL02:VBx09-CV7401",
"SCL32-CDL02:VBx08-CV7401","SCL32-CDL02:VBx07-CV7401","SCL32-CDL02:VBx06-CV7401","SCL32-CDL02:VBx05-CV7401","SCL32-CDL02:VBx04-CV7401",
"SCL32-CDL02:VBx03-CV7401","SCL32-CDL02:VBx02-CV7401","SCL32-CDL02:VBx01-CV7401","SCL31-CDL01:VBx22-CV7401","SCL31-CDL01:VBx20-CV7401",
"SCL31-CDL01:VBx18-CV7401","SCL31-CDL01:VBx16-CV7401","SCL31-CDL01:VBx14-CV7401","SCL31-CDL01:VBx12-CV7401","SCL31-CDL01:VBx10-CV7401",
"SCL31-CDL01:VBx08-CV7401","SCL31-CDL01:VBx06-CV7401","SCL31-CDL01:VBx04-CV7401","SCL31-CDL01:VBx02-CV7401","P2DT-BL04:CM01-CV8403",
"SCL32-BL03:CM19-CV8403","SCL32-BL03:CM18-CV8403","SCL32-BL03:CM17-CV8403","SCL32-BL03:CM16-CV8403","SCL32-BL03:CM15-CV8403",
"SCL32-BL03:CM14-CV8403","SCL32-BL03:CM13-CV8403","SCL32-BL03:CM12-CV8403","SCL32-BL03:CM11-CV8403","SCL32-BL03:CM10-CV8403",
"SCL32-BL03:CM09-CV8403","SCL32-BL03:CM08-CV8403","SCL32-BL03:CM07-CV8403","SCL32-BL03:CM06-CV8403","SCL32-BL03:CM05-CV8403",
"SCL32-BL03:CM04-CV8403","SCL32-BL03:CM03-CV8403","SCL32-BL03:CM02-CV8403","SCL32-BL03:CM01-CV8403","SCL32-BL02:CM13-CV8403",
"SCL32-BL02:CM12-CV8403","SCL32-BL02:CM11-CV8403","SCL32-BL02:CM10-CV8403","SCL32-BL02:CM09-CV8403","SCL32-BL02:CM08-CV8403",
"SCL32-BL02:CM07-CV8403","SCL32-BL02:CM06-CV8403","SCL32-BL02:CM05-CV8403","SCL32-BL02:CM04-CV8403","SCL32-BL02:CM03-CV8403",
"SCL32-BL02:CM02-CV8403","SCL32-BL02:CM01-CV8403","P2DT-BL04:CM01-CV8402","SCL32-BL03:CM19-CV8402","SCL32-BL03:CM18-CV8402",
"SCL32-BL03:CM17-CV8402","SCL32-BL03:CM16-CV8402","SCL32-BL03:CM15-CV8402","SCL32-BL03:CM14-CV8402","SCL32-BL03:CM13-CV8402",
"SCL32-BL03:CM12-CV8402","SCL32-BL03:CM11-CV8402","SCL32-BL03:CM10-CV8402","SCL32-BL03:CM09-CV8402","SCL32-BL03:CM08-CV8402",
"SCL32-BL03:CM07-CV8402","SCL32-BL03:CM06-CV8402","SCL32-BL03:CM05-CV8402","SCL32-BL03:CM04-CV8402","SCL32-BL03:CM03-CV8402",
"SCL32-BL03:CM02-CV8402","SCL32-BL03:CM01-CV8402","SCL32-BL02:CM13-CV8402","SCL32-BL02:CM12-CV8402","SCL32-BL02:CM11-CV8402",
"SCL32-BL02:CM10-CV8402","SCL32-BL02:CM09-CV8402","SCL32-BL02:CM08-CV8402","SCL32-BL02:CM07-CV8402","SCL32-BL02:CM06-CV8402",
"SCL32-BL02:CM05-CV8402","SCL32-BL02:CM04-CV8402","SCL32-BL02:CM03-CV8402","SCL32-BL02:CM02-CV8402","SCL32-BL02:CM01-CV8402",
"SCL31-BL01:CM22-CV8402","SCL31-BL01:CM21-CV8402","SCL31-BL01:CM20-CV8402","SCL31-BL01:CM19-CV8402","SCL31-BL01:CM18-CV8402",
"SCL31-BL01:CM17-CV8402","SCL31-BL01:CM16-CV8402","SCL31-BL01:CM15-CV8402","SCL31-BL01:CM14-CV8402","SCL31-BL01:CM13-CV8402",
"SCL31-BL01:CM12-CV8402","SCL31-BL01:CM11-CV8402","SCL31-BL01:CM10-CV8402","SCL31-BL01:CM09-CV8402","SCL31-BL01:CM08-CV8402",
"SCL31-BL01:CM07-CV8402","SCL31-BL01:CM06-CV8402","SCL31-BL01:CM05-CV8402","SCL31-BL01:CM04-CV8402","SCL31-BL01:CM03-CV8402",
"SCL31-BL01:CM02-CV8402","SCL31-BL01:CM01-CV8402","P2DT-CDL04:VBx01-CV7201","SCL32-CDL03:VBx19-CV7201","SCL32-CDL03:VBx18-CV7201",
"SCL32-CDL03:VBx17-CV7201","SCL32-CDL03:VBx16-CV7201","SCL32-CDL03:VBx15-CV7201","SCL32-CDL03:VBx14-CV7201","SCL32-CDL03:VBx13-CV7201",
"SCL32-CDL03:VBx12-CV7201","SCL32-CDL03:VBx11-CV7201","SCL32-CDL03:VBx10-CV7201","SCL32-CDL03:VBx09-CV7201","SCL32-CDL03:VBx08-CV7201",
"SCL32-CDL03:VBx07-CV7201","SCL32-CDL03:VBx06-CV7201","SCL32-CDL03:VBx05-CV7201","SCL32-CDL03:VBx04-CV7201","SCL32-CDL03:VBx03-CV7201",
"SCL32-CDL03:VBx02-CV7201","SCL32-CDL03:VBx01-CV7201","SCL32-CDL02:VBx13-CV7201","SCL32-CDL02:VBx12-CV7201","SCL32-CDL02:VBx11-CV7201",
"SCL32-CDL02:VBx10-CV7201","SCL32-CDL02:VBx09-CV7201","SCL32-CDL02:VBx08-CV7201","SCL32-CDL02:VBx07-CV7201","SCL32-CDL02:VBx06-CV7201",
"SCL32-CDL02:VBx05-CV7201","SCL32-CDL02:VBx04-CV7201","SCL32-CDL02:VBx03-CV7201","SCL32-CDL02:VBx02-CV7201","SCL32-CDL02:VBx01-CV7201",
"P2DT-BL04:CM01-CV8401","SCL32-BL03:CM19-CV8401","SCL32-BL03:CM18-CV8401","SCL32-BL03:CM17-CV8401","SCL32-BL03:CM16-CV8401",
"SCL32-BL03:CM15-CV8401","SCL32-BL03:CM14-CV8401","SCL32-BL03:CM13-CV8401","SCL32-BL03:CM12-CV8401","SCL32-BL03:CM11-CV8401",
"SCL32-BL03:CM10-CV8401","SCL32-BL03:CM09-CV8401","SCL32-BL03:CM08-CV8401","SCL32-BL03:CM07-CV8401","SCL32-BL03:CM06-CV8401",
"SCL32-BL03:CM05-CV8401","SCL32-BL03:CM04-CV8401","SCL32-BL03:CM03-CV8401","SCL32-BL03:CM02-CV8401","SCL32-BL03:CM01-CV8401",
"SCL32-BL02:CM13-CV8401","SCL32-BL02:CM12-CV8401","SCL32-BL02:CM11-CV8401","SCL32-BL02:CM10-CV8401","SCL32-BL02:CM09-CV8401",
"SCL32-BL02:CM08-CV8401","SCL32-BL02:CM07-CV8401","SCL32-BL02:CM06-CV8401","SCL32-BL02:CM05-CV8401","SCL32-BL02:CM04-CV8401",
"SCL32-BL02:CM03-CV8401","SCL32-BL02:CM02-CV8401","SCL32-BL02:CM01-CV8401","SCL31-BL01:CM22-CV8401","SCL31-BL01:CM21-CV8401",
"SCL31-BL01:CM20-CV8401","SCL31-BL01:CM19-CV8401","SCL31-BL01:CM18-CV8401","SCL31-BL01:CM17-CV8401","SCL31-BL01:CM16-CV8401",
"SCL31-BL01:CM15-CV8401","SCL31-BL01:CM14-CV8401","SCL31-BL01:CM13-CV8401","SCL31-BL01:CM12-CV8401","SCL31-BL01:CM11-CV8401",
"SCL31-BL01:CM10-CV8401","SCL31-BL01:CM09-CV8401","SCL31-BL01:CM08-CV8401","SCL31-BL01:CM07-CV8401","SCL31-BL01:CM06-CV8401",
"SCL31-BL01:CM05-CV8401","SCL31-BL01:CM04-CV8401","SCL31-BL01:CM03-CV8401","SCL31-BL01:CM02-CV8401","SCL31-BL01:CM01-CV8401",
"P2DT-CDL04:VBx01-CV7301","SCL32-CDL03:VBx19-CV7301","SCL32-CDL03:VBx18-CV7301","SCL32-CDL03:VBx17-CV7301","SCL32-CDL03:VBx16-CV7301",
"SCL32-CDL03:VBx15-CV7301","SCL32-CDL03:VBx14-CV7301","SCL32-CDL03:VBx13-CV7301","SCL32-CDL03:VBx12-CV7301","SCL32-CDL03:VBx11-CV7301",
"SCL32-CDL03:VBx10-CV7301","SCL32-CDL03:VBx09-CV7301","SCL32-CDL03:VBx08-CV7301","SCL32-CDL03:VBx07-CV7301","SCL32-CDL03:VBx06-CV7301",
"SCL32-CDL03:VBx05-CV7301","SCL32-CDL03:VBx04-CV7301","SCL32-CDL03:VBx03-CV7301","SCL32-CDL03:VBx02-CV7301","SCL32-CDL03:VBx01-CV7301",
"SCL32-CDL02:VBx13-CV7301","SCL32-CDL02:VBx12-CV7301","SCL32-CDL02:VBx11-CV7301","SCL32-CDL02:VBx10-CV7301","SCL32-CDL02:VBx09-CV7301",
"SCL32-CDL02:VBx08-CV7301","SCL32-CDL02:VBx07-CV7301","SCL32-CDL02:VBx06-CV7301","SCL32-CDL02:VBx05-CV7301","SCL32-CDL02:VBx04-CV7301",
"SCL32-CDL02:VBx03-CV7301","SCL32-CDL02:VBx02-CV7301","SCL32-CDL02:VBx01-CV7301","SCL31-CDL01:VBx22-CV7301","SCL31-CDL01:VBx20-CV7301",
"SCL31-CDL01:VBx18-CV7301","SCL31-CDL01:VBx16-CV7301","SCL31-CDL01:VBx14-CV7301","SCL31-CDL01:VBx12-CV7301","SCL31-CDL01:VBx10-CV7301",
"SCL31-CDL01:VBx08-CV7301","SCL31-CDL01:VBx06-CV7301","SCL31-CDL01:VBx04-CV7301","SCL31-CDL01:VBx02-CV7301","Cryo-CDL00:TBx01-CV7201",
"Cryo-CDL00:TBx01-XV7201"};

int  stopindex = 268;
int  stopindex_1_2 = 266;
int  stopindex_3 = 66;
int  stopindex_4 = 22;
int  stopindex_5 = 33;
int  stopindex_6 = 55;
int  stopindex_7 = 44;
int  stopindex_8 = 2;

string steppv;
assign steppv to "{SYS}{SUBSYS}{DEV}{SUBDEV}StepPV";
monitor steppv;

int ss_start = 0;
assign ss_start to "{SYS}{SUBSYS}{DEV}{SUBDEV}Start";
monitor ss_start;
evflag	efStop;
sync ss_start efStop;

int index = 0;
assign index to "{SYS}{SUBSYS}{DEV}{SUBDEV}Index";
monitor index;

float cdDelay;
assign cdDelay to "{SYS}{SUBSYS}{DEV}{SUBDEV}StepDly";
monitor cdDelay;

int presz_start = 0;
assign presz_start to "{SYS}{SUBSYS}{DEV}{SUBDEV}PresStart";
monitor presz_start;

char	logicname[60];

int		proc = 1;
assign	proc to "";


char	valvename[60];
float	valveval;
assign  valveval to "";

char	target_valname[60];
float	target_val;
assign  target_val to "";

char	valve_evalname[60];
int		valve_eval;
assign	valve_eval to "";

evflag	efCDOM041;

ss ssCDOM041
{
	state init
	{
		when(TRUE)
		{
		  efSet(efStop);
		  printf("Started Cooldown Logic Processig...\n");
		}state stopCDOM041
	}

	state stopCDOM041
	{
		when(efTest(efStop) && ss_start == 1)
		{
			stopindex = 268;
			index = 0;
			pvPut(index, SYNC);
			efSet(efCDOM041);
			efClear(efStop);
		}state CDOM041_Init
	}

	state CDOM041_Init
	{
		when(delay(cdDelay) && efTestAndClear(efCDOM041))
		{
			sprintf(logicname, "%s:%s:CDLogic.PROC","OM041", OM041[index]);
			sprintf(valvename, "%s:Valve", OM041[index]);
			sprintf(target_valname, "%s:%s:CDLogic.INPJ","OM041", OM041[index]);

			printf("%s, %s\n", logicname, valvename);

			if(index < stopindex)
			{
				strcpy(steppv, valvename);
				pvPut(steppv, SYNC);

				pvAssign(valveval, valvename);
				pvMonitor(valveval);

				pvAssign(target_val, target_valname);
				pvMonitor(target_val);

				pvAssign(proc, logicname);
				pvMonitor(proc);
			};

		}state CDOM041
	}

	state CDOM041
	{
		when(delay(cdDelay) && valveval < target_val && index < stopindex)
		{
			printf("CDOM041 Processing...\n");
			proc = 1;
			pvPut(proc, SYNC);
		}state CDOM041

		when(delay(cdDelay) && valveval >= target_val && index < stopindex)
		{
			pvStopMonitor(valveval);
			pvStopMonitor(proc);
			pvAssign(valveval, "");
			pvAssign(proc, "");

			index++;
			pvPut(index, SYNC);

			efSet(efCDOM041);
		}state CDOM041_Init

		when(delay(cdDelay) && index >= stopindex)
		{
			strcpy(steppv, "OM041 Done");
			pvPut(steppv, SYNC);
			ss_start = 0;
			pvPut(ss_start, SYNC);

		}state stopCDOM041
	}

}
