program sncPT7001WF2Scalar 

option +r; 
double QWRPT7001[11];
assign  QWRPT7001 to { 
"SCL31-CDL01:VBx02-PT7001:Press", "SCL31-CDL01:VBx04-PT7001:Press", "SCL31-CDL01:VBx06-PT7001:Press", "SCL31-CDL01:VBx08-PT7001:Press", "SCL31-CDL01:VBx10-PT7001:Press",
"SCL31-CDL01:VBx12-PT7001:Press", "SCL31-CDL01:VBx14-PT7001:Press", "SCL31-CDL01:VBx16-PT7001:Press", "SCL31-CDL01:VBx18-PT7001:Press", "SCL31-CDL01:VBx20-PT7001:Press", 
"SCL31-CDL01:VBx22-PT7001:Press"
};

double HWRPT7001[33];
assign  HWRPT7001 to {
"SCL32-CDL02:VBx01-PT7001:Press", "SCL32-CDL02:VBx02-PT7001:Press", "SCL32-CDL02:VBx03-PT7001:Press", "SCL32-CDL02:VBx04-PT7001:Press", "SCL32-CDL02:VBx05-PT7001:Press",
"SCL32-CDL02:VBx06-PT7001:Press", "SCL32-CDL02:VBx07-PT7001:Press", "SCL32-CDL02:VBx08-PT7001:Press", "SCL32-CDL02:VBx09-PT7001:Press", "SCL32-CDL02:VBx10-PT7001:Press",
"SCL32-CDL02:VBx11-PT7001:Press", "SCL32-CDL02:VBx12-PT7001:Press", "SCL32-CDL02:VBx13-PT7001:Press", "SCL32-CDL03:VBx01-PT7001:Press", "SCL32-CDL03:VBx02-PT7001:Press",
"SCL32-CDL03:VBx03-PT7001:Press", "SCL32-CDL03:VBx04-PT7001:Press", "SCL32-CDL03:VBx05-PT7001:Press", "SCL32-CDL03:VBx06-PT7001:Press", "SCL32-CDL03:VBx07-PT7001:Press",
"SCL32-CDL03:VBx08-PT7001:Press", "SCL32-CDL03:VBx09-PT7001:Press", "SCL32-CDL03:VBx10-PT7001:Press", "SCL32-CDL03:VBx11-PT7001:Press", "SCL32-CDL03:VBx12-PT7001:Press",
"SCL32-CDL03:VBx13-PT7001:Press", "SCL32-CDL03:VBx14-PT7001:Press", "SCL32-CDL03:VBx15-PT7001:Press", "SCL32-CDL03:VBx16-PT7001:Press", "SCL32-CDL03:VBx17-PT7001:Press",
"SCL32-CDL03:VBx18-PT7001:Press", "SCL32-CDL03:VBx19-PT7001:Press", "P2DT-CDL04:VBx01-PT7001:Press"};


double  wfQWRPT7001[11];
assign  wfQWRPT7001 to "SCL31-CDL01:QWR-WFIn7001:Result"; 
monitor wfQWRPT7001; 

evflag	efQWRPT7001;
sync wfQWRPT7001 to efQWRPT7001;

double  wfHWRPT7001[33];
assign  wfHWRPT7001 to "SCL32-CDL23:HWR-WFIn7001:Result";
monitor wfHWRPT7001; 

evflag	efHWRPT7001;
sync wfHWRPT7001 to efHWRPT7001;


ss WFPT7001QWR 
{
    state QWR_WFPT7001toScalar
    {
        when(efTestAndClear(efQWRPT7001))
        {
            int index = 0;
            for(;index < 11;index++)
			{
                QWRPT7001[index]=wfQWRPT7001[index];
				pvPut (QWRPT7001[index], SYNC);
			}
        }state QWR_WFPT7001toScalar
    }
}

ss WFPT7001HWR 
{
    state HWR_WFPT7001toScalar
    {
        when(efTestAndClear(efHWRPT7001))
        {
            int index = 0;
            for(;index < 33;index++)
			{
                HWRPT7001[index]=wfHWRPT7001[index];
				pvPut (HWRPT7001[index], SYNC);
			}
        }state HWR_WFPT7001toScalar
    }
}
