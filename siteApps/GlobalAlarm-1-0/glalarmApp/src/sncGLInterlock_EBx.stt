program sncGLInterlockEBx

option +r; 

//Start EBx PT7101:VacuumR 
float allEBxIntCVPVs[171];
assign allEBxIntCVPVs to {
"SCL31-CDL01:VBx02-CV7301:Setpt", "SCL31-CDL01:VBx02-CV7401:Setpt", "SCL31-CDL01:VBx02-CV7501:Setpt",
"SCL31-CDL01:VBx04-CV7301:Setpt", "SCL31-CDL01:VBx04-CV7401:Setpt", "SCL31-CDL01:VBx04-CV7501:Setpt",
"SCL31-CDL01:VBx06-CV7301:Setpt", "SCL31-CDL01:VBx06-CV7401:Setpt", "SCL31-CDL01:VBx06-CV7501:Setpt",
"SCL31-CDL01:VBx08-CV7301:Setpt", "SCL31-CDL01:VBx08-CV7401:Setpt", "SCL31-CDL01:VBx08-CV7501:Setpt",
"SCL31-CDL01:VBx10-CV7301:Setpt", "SCL31-CDL01:VBx10-CV7401:Setpt", "SCL31-CDL01:VBx10-CV7501:Setpt",
"SCL31-CDL01:VBx12-CV7301:Setpt", "SCL31-CDL01:VBx12-CV7401:Setpt", "SCL31-CDL01:VBx12-CV7501:Setpt",
"SCL31-CDL01:VBx14-CV7301:Setpt", "SCL31-CDL01:VBx14-CV7401:Setpt", "SCL31-CDL01:VBx14-CV7501:Setpt",
"SCL31-CDL01:VBx16-CV7301:Setpt", "SCL31-CDL01:VBx16-CV7401:Setpt", "SCL31-CDL01:VBx16-CV7501:Setpt",
"SCL31-CDL01:VBx18-CV7301:Setpt", "SCL31-CDL01:VBx18-CV7401:Setpt", "SCL31-CDL01:VBx18-CV7501:Setpt",
"SCL31-CDL01:VBx20-CV7301:Setpt", "SCL31-CDL01:VBx20-CV7401:Setpt", "SCL31-CDL01:VBx20-CV7501:Setpt",
"SCL31-CDL01:VBx22-CV7301:Setpt", "SCL31-CDL01:VBx22-CV7401:Setpt", "SCL31-CDL01:VBx22-CV7501:Setpt",
"SCL31-CDL01:EBx01-CV7401:Setpt", "SCL31-CDL01:EBx01-CV7402:Setpt", "SCL31-CDL01:EBx01-CV7501:Setpt",
"SCL31-CDL01:EBx01-CV7502:Setpt", "SCL32-CDL02:VBx01-CV7201:Setpt", "SCL32-CDL02:VBx01-CV7301:Setpt",
"SCL32-CDL02:VBx01-CV7401:Setpt", "SCL32-CDL02:VBx01-CV7501:Setpt", "SCL32-CDL02:VBx02-CV7201:Setpt",
"SCL32-CDL02:VBx02-CV7301:Setpt", "SCL32-CDL02:VBx02-CV7401:Setpt", "SCL32-CDL02:VBx02-CV7501:Setpt",
"SCL32-CDL02:VBx03-CV7501:Setpt", "SCL32-CDL02:VBx03-CV7401:Setpt", "SCL32-CDL02:VBx03-CV7301:Setpt",
"SCL32-CDL02:VBx03-CV7201:Setpt", "SCL32-CDL02:VBx04-CV7501:Setpt", "SCL32-CDL02:VBx04-CV7401:Setpt",
"SCL32-CDL02:VBx04-CV7301:Setpt", "SCL32-CDL02:VBx04-CV7201:Setpt", "SCL32-CDL02:VBx05-CV7201:Setpt",
"SCL32-CDL02:VBx05-CV7301:Setpt", "SCL32-CDL02:VBx05-CV7401:Setpt", "SCL32-CDL02:VBx05-CV7501:Setpt",
"SCL32-CDL02:VBx06-CV7201:Setpt", "SCL32-CDL02:VBx06-CV7301:Setpt", "SCL32-CDL02:VBx06-CV7401:Setpt",
"SCL32-CDL02:VBx06-CV7501:Setpt", "SCL32-CDL02:VBx07-CV7201:Setpt", "SCL32-CDL02:VBx07-CV7301:Setpt",
"SCL32-CDL02:VBx07-CV7401:Setpt", "SCL32-CDL02:VBx07-CV7501:Setpt", "SCL32-CDL02:VBx08-CV7201:Setpt",
"SCL32-CDL02:VBx08-CV7301:Setpt", "SCL32-CDL02:VBx08-CV7401:Setpt", "SCL32-CDL02:VBx08-CV7501:Setpt",
"SCL32-CDL02:VBx09-CV7201:Setpt", "SCL32-CDL02:VBx09-CV7301:Setpt", "SCL32-CDL02:VBx09-CV7401:Setpt",
"SCL32-CDL02:VBx09-CV7501:Setpt", "SCL32-CDL02:VBx10-CV7201:Setpt", "SCL32-CDL02:VBx10-CV7301:Setpt",
"SCL32-CDL02:VBx10-CV7401:Setpt", "SCL32-CDL02:VBx10-CV7501:Setpt", "SCL32-CDL02:VBx11-CV7201:Setpt",
"SCL32-CDL02:VBx11-CV7301:Setpt", "SCL32-CDL02:VBx11-CV7401:Setpt", "SCL32-CDL02:VBx11-CV7501:Setpt",
"SCL32-CDL02:VBx12-CV7201:Setpt", "SCL32-CDL02:VBx12-CV7301:Setpt", "SCL32-CDL02:VBx12-CV7401:Setpt",
"SCL32-CDL02:VBx12-CV7501:Setpt", "SCL32-CDL02:VBx13-CV7201:Setpt", "SCL32-CDL02:VBx13-CV7301:Setpt",
"SCL32-CDL02:VBx13-CV7401:Setpt", "SCL32-CDL02:VBx13-CV7501:Setpt", "SCL32-CDL03:VBx01-CV7201:Setpt",
"SCL32-CDL03:VBx01-CV7301:Setpt", "SCL32-CDL03:VBx01-CV7401:Setpt", "SCL32-CDL03:VBx01-CV7501:Setpt",
"SCL32-CDL03:VBx02-CV7201:Setpt", "SCL32-CDL03:VBx02-CV7301:Setpt", "SCL32-CDL03:VBx02-CV7401:Setpt",
"SCL32-CDL03:VBx02-CV7501:Setpt", "SCL32-CDL03:VBx03-CV7201:Setpt", "SCL32-CDL03:VBx03-CV7301:Setpt",
"SCL32-CDL03:VBx03-CV7401:Setpt", "SCL32-CDL03:VBx03-CV7501:Setpt", "SCL32-CDL03:VBx04-CV7201:Setpt",
"SCL32-CDL03:VBx04-CV7301:Setpt", "SCL32-CDL03:VBx04-CV7401:Setpt", "SCL32-CDL03:VBx04-CV7501:Setpt",
"SCL32-CDL03:VBx05-CV7201:Setpt", "SCL32-CDL03:VBx05-CV7301:Setpt", "SCL32-CDL03:VBx05-CV7401:Setpt",
"SCL32-CDL03:VBx05-CV7501:Setpt", "SCL32-CDL03:VBx06-CV7201:Setpt", "SCL32-CDL03:VBx06-CV7301:Setpt",
"SCL32-CDL03:VBx06-CV7401:Setpt", "SCL32-CDL03:VBx06-CV7501:Setpt", "SCL32-CDL03:VBx07-CV7201:Setpt",
"SCL32-CDL03:VBx07-CV7301:Setpt", "SCL32-CDL03:VBx07-CV7401:Setpt", "SCL32-CDL03:VBx07-CV7501:Setpt",
"SCL32-CDL03:VBx08-CV7201:Setpt", "SCL32-CDL03:VBx08-CV7301:Setpt", "SCL32-CDL03:VBx08-CV7401:Setpt",
"SCL32-CDL03:VBx08-CV7501:Setpt", "SCL32-CDL03:VBx09-CV7201:Setpt", "SCL32-CDL03:VBx09-CV7301:Setpt",
"SCL32-CDL03:VBx09-CV7401:Setpt", "SCL32-CDL03:VBx09-CV7501:Setpt", "SCL32-CDL03:VBx10-CV7201:Setpt",
"SCL32-CDL03:VBx10-CV7301:Setpt", "SCL32-CDL03:VBx10-CV7401:Setpt", "SCL32-CDL03:VBx10-CV7501:Setpt",
"SCL32-CDL03:VBx11-CV7201:Setpt", "SCL32-CDL03:VBx11-CV7301:Setpt", "SCL32-CDL03:VBx11-CV7401:Setpt",
"SCL32-CDL03:VBx11-CV7501:Setpt", "SCL32-CDL03:VBx12-CV7201:Setpt", "SCL32-CDL03:VBx12-CV7301:Setpt",
"SCL32-CDL03:VBx12-CV7401:Setpt", "SCL32-CDL03:VBx12-CV7501:Setpt", "SCL32-CDL03:VBx13-CV7201:Setpt",
"SCL32-CDL03:VBx13-CV7301:Setpt", "SCL32-CDL03:VBx13-CV7401:Setpt", "SCL32-CDL03:VBx13-CV7501:Setpt",
"SCL32-CDL03:VBx14-CV7201:Setpt", "SCL32-CDL03:VBx14-CV7301:Setpt", "SCL32-CDL03:VBx14-CV7401:Setpt",
"SCL32-CDL03:VBx14-CV7501:Setpt", "SCL32-CDL03:VBx15-CV7201:Setpt", "SCL32-CDL03:VBx15-CV7301:Setpt",
"SCL32-CDL03:VBx15-CV7401:Setpt", "SCL32-CDL03:VBx15-CV7501:Setpt", "SCL32-CDL03:VBx16-CV7201:Setpt",
"SCL32-CDL03:VBx16-CV7301:Setpt", "SCL32-CDL03:VBx16-CV7401:Setpt", "SCL32-CDL03:VBx16-CV7501:Setpt",
"SCL32-CDL03:VBx17-CV7201:Setpt", "SCL32-CDL03:VBx17-CV7301:Setpt", "SCL32-CDL03:VBx17-CV7401:Setpt",
"SCL32-CDL03:VBx17-CV7501:Setpt", "SCL32-CDL03:VBx18-CV7201:Setpt", "SCL32-CDL03:VBx18-CV7301:Setpt",
"SCL32-CDL03:VBx18-CV7401:Setpt", "SCL32-CDL03:VBx18-CV7501:Setpt", "SCL32-CDL03:VBx19-CV7201:Setpt",
"SCL32-CDL03:VBx19-CV7301:Setpt", "SCL32-CDL03:VBx19-CV7401:Setpt", "SCL32-CDL03:VBx19-CV7501:Setpt",
"Cryo-CDL00:TBx01-CV7201:Setpt",  "Cryo-CDL00:TBx01-CV7301:Setpt",  "Cryo-CDL00:TBx01-CV7401:Setpt",
"Cryo-CDL00:TBx01-CV7501:Setpt",  "Cryo-CDL00:TBx01-CV7503:Setpt",  "Cryo-CDL00:TBx01-CV7481:Setpt"
};

unsigned short allEBxIntXVPVs[43];
assign	allEBxIntXVPVs to {
"SCL31-CDL01:VBx02-XV7501:SetManuOpen", "SCL31-CDL01:VBx04-XV7501:SetManuOpen", "SCL31-CDL01:VBx06-XV7501:SetManuOpen",
"SCL31-CDL01:VBx08-XV7501:SetManuOpen", "SCL31-CDL01:VBx10-XV7501:SetManuOpen", "SCL31-CDL01:VBx12-XV7501:SetManuOpen",
"SCL31-CDL01:VBx14-XV7501:SetManuOpen", "SCL31-CDL01:VBx16-XV7501:SetManuOpen", "SCL31-CDL01:VBx18-XV7501:SetManuOpen",
"SCL31-CDL01:VBx20-XV7501:SetManuOpen", "SCL31-CDL01:VBx22-XV7501:SetManuOpen", "SCL32-CDL02:VBx01-XV7501:SetManuOpen",
"SCL32-CDL02:VBx02-XV7501:SetManuOpen", "SCL32-CDL02:VBx03-XV7501:SetManuOpen", "SCL32-CDL02:VBx04-XV7501:SetManuOpen",
"SCL32-CDL02:VBx05-XV7501:SetManuOpen", "SCL32-CDL02:VBx06-XV7501:SetManuOpen", "SCL32-CDL02:VBx07-XV7501:SetManuOpen",
"SCL32-CDL02:VBx08-XV7501:SetManuOpen", "SCL32-CDL02:VBx09-XV7501:SetManuOpen", "SCL32-CDL02:VBx10-XV7501:SetManuOpen",
"SCL32-CDL02:VBx11-XV7501:SetManuOpen", "SCL32-CDL02:VBx12-XV7501:SetManuOpen", "SCL32-CDL02:VBx13-XV7501:SetManuOpen",
"SCL32-CDL03:VBx01-XV7501:SetManuOpen", "SCL32-CDL03:VBx02-XV7501:SetManuOpen", "SCL32-CDL03:VBx03-XV7501:SetManuOpen",
"SCL32-CDL03:VBx04-XV7501:SetManuOpen", "SCL32-CDL03:VBx05-XV7501:SetManuOpen", "SCL32-CDL03:VBx06-XV7501:SetManuOpen",
"SCL32-CDL03:VBx07-XV7501:SetManuOpen", "SCL32-CDL03:VBx08-XV7501:SetManuOpen", "SCL32-CDL03:VBx09-XV7501:SetManuOpen",
"SCL32-CDL03:VBx10-XV7501:SetManuOpen", "SCL32-CDL03:VBx11-XV7501:SetManuOpen", "SCL32-CDL03:VBx12-XV7501:SetManuOpen",
"SCL32-CDL03:VBx13-XV7501:SetManuOpen", "SCL32-CDL03:VBx14-XV7501:SetManuOpen", "SCL32-CDL03:VBx15-XV7501:SetManuOpen",
"SCL32-CDL03:VBx16-XV7501:SetManuOpen", "SCL32-CDL03:VBx17-XV7501:SetManuOpen", "SCL32-CDL03:VBx18-XV7501:SetManuOpen",
"SCL32-CDL03:VBx19-XV7501:SetManuOpen"
};

unsigned short gbintEbx;
assign gbintEbx to "SCL31-CDL01:EBx01-PT7101:IntStatG";
monitor gbintEbx;

evflag evGBIntEbx;
sync gbintEbx evGBIntEbx;

//End PT7101:VacuumR 

//Start EBx PT7401:PresR, PT7401:IntStatG 
float allEBxPT7401CVs[2];
assign allEBxPT7401CVs to {
"Cryo-CDL00:TBx01-CV7401:Setpt", "Cryo-CDL00:TBx01-CV7482:Setpt"
};

unsigned short gbintEbxPT7401;
assign gbintEbxPT7401 to "SCL31-CDL01:EBx01-PT7401:IntStatG";
monitor gbintEbxPT7401;

evflag evGBIntEbxPT7401;
sync gbintEbxPT7401 evGBIntEbxPT7401;
//End PT7401:IntStatG 
//
//Start EBx PT5401:PresR, PT7501:IntStatG 
float allEBxPT7501CVs[2];
assign allEBxPT7501CVs to {
"Cryo-CDL00:TBx01-CV7502:Setpt", "Cryo-CDL00:TBx01-CV7582:Setpt"
};
unsigned short EBxPT7501;
assign EBxPT7501 to "Cryo-CDL00:TBx01-XV7501:SetManuOpen";

unsigned short gbintEbxPT7501;
assign gbintEbxPT7501 to "SCL31-CDL01:EBx01-PT7401:IntStatG";
monitor gbintEbxPT7501;

evflag evGBIntEbxPT7501;
sync gbintEbxPT7501 evGBIntEbxPT7501;

//End PT7501:IntStatG 


ss gbinterlockEBx
{
	state init
	{
		when(TRUE)
		{
		}state CheckEBxInterlock
	}

	state CheckEBxInterlock
	{

		//when(delay(1.0))
		when(efTestAndClear(evGBIntEbx) && gbintEbx >= 1)
		{
			int index = 0;
			for(index = 0; index < 171; index++)
			{
				allEBxIntCVPVs[index] = 0.0;
				pvPut(allEBxIntCVPVs[index], SYNC);
			};

			for(index = 0; index < 43; index++)
			{
				allEBxIntXVPVs[index] = 0;
				pvPut(allEBxIntXVPVs[index], SYNC);
			}

		}state ReleaseEBxInterlock
	}

	state ReleaseEBxInterlock
	{
		//when(delay(1.0))
		when(efTestAndClear(evGBIntEbx) && gbintEbx == 0)
		{
		}state CheckEBxInterlock
	}
}

ss gbinterlockEBxPT7401
{
	state init
	{
		when(TRUE)
		{
		}state CheckEBxInterlockPT7401
	}

	state CheckEBxInterlockPT7401
	{

		//when(delay(1.0))
		when(efTestAndClear(evGBIntEbxPT7401) && gbintEbxPT7401 >= 1)
		{
			int index = 0;
			for(index = 0; index < 2; index++)
			{
				allEBxPT7401CVs[index] = 0.0;
				pvPut(allEBxPT7401CVs[index], SYNC);
			};

		}state ReleaseEBxInterlockPT7401
	}

	state ReleaseEBxInterlockPT7401
	{
		//when(delay(1.0))
		when(efTestAndClear(evGBIntEbxPT7401) && gbintEbxPT7401 == 0)
		{
		}state CheckEBxInterlockPT7401
	}
}

ss gbinterlockEBxPT7501
{
	state init
	{
		when(TRUE)
		{
		}state CheckEBxInterlockPT7501
	}

	state CheckEBxInterlockPT7501
	{

		//when(delay(1.0))
		when(efTestAndClear(evGBIntEbxPT7501) && gbintEbxPT7501 >= 1)
		{
			int index = 0;
			for(index = 0; index < 2; index++)
			{
				allEBxPT7501CVs[index] = 0.0;
				pvPut(allEBxPT7501CVs[index], SYNC);
			};

			EBxPT7501 = 0;;
			pvPut(EBxPT7501, SYNC);

		}state ReleaseEBxInterlockPT7501
	}

	state ReleaseEBxInterlockPT7501
	{
		//when(delay(1.0))
		when(efTestAndClear(evGBIntEbxPT7501) && gbintEbxPT7501 == 0)
		{
		}state CheckEBxInterlockPT7501
	}
}
