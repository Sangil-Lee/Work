program sncGLInterlockWF

option +r; 

unsigned char allXV7301[44];
assign allXV7301 to {
"SCL31-CDL01:EBx01-XV7301:CloseStat", "SCL31-CDL01:VBx02-XV7301:CloseStat", "SCL31-CDL01:VBx04-XV7301:CloseStat",
"SCL31-CDL01:VBx06-XV7301:CloseStat", "SCL31-CDL01:VBx08-XV7301:CloseStat", "SCL31-CDL01:VBx10-XV7301:CloseStat",
"SCL31-CDL01:VBx12-XV7301:CloseStat", "SCL31-CDL01:VBx14-XV7301:CloseStat", "SCL31-CDL01:VBx16-XV7301:CloseStat",
"SCL31-CDL01:VBx18-XV7301:CloseStat", "SCL31-CDL01:VBx20-XV7301:CloseStat", "SCL31-CDL01:VBx22-XV7301:CloseStat",
"SCL32-CDL02:VBx01-XV7301:CloseStat", "SCL32-CDL02:VBx02-XV7301:CloseStat", "SCL32-CDL02:VBx03-XV7301:CloseStat",
"SCL32-CDL02:VBx04-XV7301:CloseStat", "SCL32-CDL02:VBx05-XV7301:CloseStat", "SCL32-CDL02:VBx06-XV7301:CloseStat",
"SCL32-CDL02:VBx07-XV7301:CloseStat", "SCL32-CDL02:VBx08-XV7301:CloseStat", "SCL32-CDL02:VBx09-XV7301:CloseStat",
"SCL32-CDL02:VBx10-XV7301:CloseStat", "SCL32-CDL02:VBx11-XV7301:CloseStat", "SCL32-CDL02:VBx12-XV7301:CloseStat",
"SCL32-CDL02:VBx13-XV7301:CloseStat", "SCL32-CDL03:VBx01-XV7301:CloseStat", "SCL32-CDL03:VBx02-XV7301:CloseStat",
"SCL32-CDL03:VBx03-XV7301:CloseStat", "SCL32-CDL03:VBx04-XV7301:CloseStat", "SCL32-CDL03:VBx05-XV7301:CloseStat",
"SCL32-CDL03:VBx06-XV7301:CloseStat", "SCL32-CDL03:VBx07-XV7301:CloseStat", "SCL32-CDL03:VBx08-XV7301:CloseStat",
"SCL32-CDL03:VBx09-XV7301:CloseStat", "SCL32-CDL03:VBx10-XV7301:CloseStat", "SCL32-CDL03:VBx11-XV7301:CloseStat",
"SCL32-CDL03:VBx12-XV7301:CloseStat", "SCL32-CDL03:VBx13-XV7301:CloseStat", "SCL32-CDL03:VBx14-XV7301:CloseStat",
"SCL32-CDL03:VBx15-XV7301:CloseStat", "SCL32-CDL03:VBx16-XV7301:CloseStat", "SCL32-CDL03:VBx17-XV7301:CloseStat",
"SCL32-CDL03:VBx18-XV7301:CloseStat", "SCL32-CDL03:VBx19-XV7301:CloseStat" };

monitor allXV7301;
evflag evXV7301;
sync allXV7301 evXV7301;

unsigned char wfXV7301[44];
assign wfXV7301 to "SCL3-ALL:IntWF-XV7301:CloseStat";
monitor wfXV7301;

unsigned char allXV7201[44];
assign allXV7201 to {
"SCL31-CDL01:EBx01-XV7201:CloseStat", "SCL31-CDL01:VBx02-XV7201:CloseStat", "SCL31-CDL01:VBx04-XV7201:CloseStat",
"SCL31-CDL01:VBx06-XV7201:CloseStat", "SCL31-CDL01:VBx08-XV7201:CloseStat", "SCL31-CDL01:VBx10-XV7201:CloseStat",
"SCL31-CDL01:VBx12-XV7201:CloseStat", "SCL31-CDL01:VBx14-XV7201:CloseStat", "SCL31-CDL01:VBx16-XV7201:CloseStat",
"SCL31-CDL01:VBx18-XV7201:CloseStat", "SCL31-CDL01:VBx20-XV7201:CloseStat", "SCL31-CDL01:VBx22-XV7201:CloseStat",
"SCL32-CDL02:VBx01-XV7201:CloseStat", "SCL32-CDL02:VBx02-XV7201:CloseStat", "SCL32-CDL02:VBx03-XV7201:CloseStat",
"SCL32-CDL02:VBx04-XV7201:CloseStat", "SCL32-CDL02:VBx05-XV7201:CloseStat", "SCL32-CDL02:VBx06-XV7201:CloseStat",
"SCL32-CDL02:VBx07-XV7201:CloseStat", "SCL32-CDL02:VBx08-XV7201:CloseStat", "SCL32-CDL02:VBx09-XV7201:CloseStat",
"SCL32-CDL02:VBx10-XV7201:CloseStat", "SCL32-CDL02:VBx11-XV7201:CloseStat", "SCL32-CDL02:VBx12-XV7201:CloseStat",
"SCL32-CDL02:VBx13-XV7201:CloseStat", "SCL32-CDL03:VBx01-XV7201:CloseStat", "SCL32-CDL03:VBx02-XV7201:CloseStat",
"SCL32-CDL03:VBx03-XV7201:CloseStat", "SCL32-CDL03:VBx04-XV7201:CloseStat", "SCL32-CDL03:VBx05-XV7201:CloseStat",
"SCL32-CDL03:VBx06-XV7201:CloseStat", "SCL32-CDL03:VBx07-XV7201:CloseStat", "SCL32-CDL03:VBx08-XV7201:CloseStat",
"SCL32-CDL03:VBx09-XV7201:CloseStat", "SCL32-CDL03:VBx10-XV7201:CloseStat", "SCL32-CDL03:VBx11-XV7201:CloseStat",
"SCL32-CDL03:VBx12-XV7201:CloseStat", "SCL32-CDL03:VBx13-XV7201:CloseStat", "SCL32-CDL03:VBx14-XV7201:CloseStat",
"SCL32-CDL03:VBx15-XV7201:CloseStat", "SCL32-CDL03:VBx16-XV7201:CloseStat", "SCL32-CDL03:VBx17-XV7201:CloseStat",
"SCL32-CDL03:VBx18-XV7201:CloseStat", "SCL32-CDL03:VBx19-XV7201:CloseStat" };

monitor allXV7201;
evflag evXV7201;
sync allXV7201 evXV7201;

unsigned char wfXV7201[44];
assign wfXV7201 to "SCL3-ALL:IntWF-XV7201:CloseStat";
monitor wfXV7201;

unsigned char allXV7502[44];
assign allXV7502 to {
"SCL31-CDL01:EBx01-XV7502:CloseStat", "SCL31-CDL01:VBx02-XV7502:CloseStat", "SCL31-CDL01:VBx04-XV7502:CloseStat",
"SCL31-CDL01:VBx06-XV7502:CloseStat", "SCL31-CDL01:VBx08-XV7502:CloseStat", "SCL31-CDL01:VBx10-XV7502:CloseStat",
"SCL31-CDL01:VBx12-XV7502:CloseStat", "SCL31-CDL01:VBx14-XV7502:CloseStat", "SCL31-CDL01:VBx16-XV7502:CloseStat",
"SCL31-CDL01:VBx18-XV7502:CloseStat", "SCL31-CDL01:VBx20-XV7502:CloseStat", "SCL31-CDL01:VBx22-XV7502:CloseStat",
"SCL32-CDL02:VBx01-XV7502:CloseStat", "SCL32-CDL02:VBx02-XV7502:CloseStat", "SCL32-CDL02:VBx03-XV7502:CloseStat",
"SCL32-CDL02:VBx04-XV7502:CloseStat", "SCL32-CDL02:VBx05-XV7502:CloseStat", "SCL32-CDL02:VBx06-XV7502:CloseStat",
"SCL32-CDL02:VBx07-XV7502:CloseStat", "SCL32-CDL02:VBx08-XV7502:CloseStat", "SCL32-CDL02:VBx09-XV7502:CloseStat",
"SCL32-CDL02:VBx10-XV7502:CloseStat", "SCL32-CDL02:VBx11-XV7502:CloseStat", "SCL32-CDL02:VBx12-XV7502:CloseStat",
"SCL32-CDL02:VBx13-XV7502:CloseStat", "SCL32-CDL03:VBx01-XV7502:CloseStat", "SCL32-CDL03:VBx02-XV7502:CloseStat",
"SCL32-CDL03:VBx03-XV7502:CloseStat", "SCL32-CDL03:VBx04-XV7502:CloseStat", "SCL32-CDL03:VBx05-XV7502:CloseStat",
"SCL32-CDL03:VBx06-XV7502:CloseStat", "SCL32-CDL03:VBx07-XV7502:CloseStat", "SCL32-CDL03:VBx08-XV7502:CloseStat",
"SCL32-CDL03:VBx09-XV7502:CloseStat", "SCL32-CDL03:VBx10-XV7502:CloseStat", "SCL32-CDL03:VBx11-XV7502:CloseStat",
"SCL32-CDL03:VBx12-XV7502:CloseStat", "SCL32-CDL03:VBx13-XV7502:CloseStat", "SCL32-CDL03:VBx14-XV7502:CloseStat",
"SCL32-CDL03:VBx15-XV7502:CloseStat", "SCL32-CDL03:VBx16-XV7502:CloseStat", "SCL32-CDL03:VBx17-XV7502:CloseStat",
"SCL32-CDL03:VBx18-XV7502:CloseStat", "SCL32-CDL03:VBx19-XV7502:CloseStat" };

monitor allXV7502;
evflag evXV7502;
sync allXV7502 evXV7502;

unsigned char wfXV7502[44];
assign wfXV7502 to "SCL3-ALL:IntWF-XV7502:CloseStat";
monitor wfXV7502;

%% #include <math.h>
ss makeWF
{
	state init
	{
		when(TRUE)
		{
			efSet(evXV7301);
		}state MakeWaveform
	}

	state MakeWaveform
	{
		when(efTestAndClear(evXV7301))
		{
			int index = 0;
			for(;index < 44;index++)
				wfXV7301[index]=allXV7301[index];

			pvPut (wfXV7301, SYNC);

		}state MakeWaveform

		when(efTestAndClear(evXV7201))
		{
			int index = 0;
			for(;index < 44;index++)
				wfXV7201[index]=allXV7201[index];

			pvPut (wfXV7201, SYNC);

		}state MakeWaveform

		when(efTestAndClear(evXV7502))
		{
			int index = 0;
			for(;index < 44;index++)
				wfXV7502[index]=allXV7502[index];

			pvPut (wfXV7502, SYNC);

		}state MakeWaveform
	}
}
