program 

option +r;

float groupPVs[43];
assign groupPVs to {
"SCL31-CDL01:VBx02-XV7502:SetManuClose", "SCL31-CDL01:VBx04-XV7502:SetManuClose", "SCL31-CDL01:VBx06-XV7502:SetManuClose",
"SCL31-CDL01:VBx08-XV7502:SetManuClose", "SCL31-CDL01:VBx10-XV7502:SetManuClose", "SCL31-CDL01:VBx12-XV7502:SetManuClose",
"SCL31-CDL01:VBx14-XV7502:SetManuClose", "SCL31-CDL01:VBx16-XV7502:SetManuClose", "SCL31-CDL01:VBx18-XV7502:SetManuClose",
"SCL31-CDL01:VBx20-XV7502:SetManuClose", "SCL31-CDL01:VBx22-XV7502:SetManuClose", "SCL32-CDL02:VBx01XV7502:SetManuClose",
"SCL32-CDL02:VBx02XV7502:SetManuClose", "SCL32-CDL02:VBx03XV7502:SetManuClose", "SCL32-CDL02:VBx04XV7502:SetManuClose",
"SCL32-CDL02:VBx05XV7502:SetManuClose", "SCL32-CDL02:VBx06XV7502:SetManuClose", "SCL32-CDL02:VBx07XV7502:SetManuClose",
"SCL32-CDL02:VBx08XV7502:SetManuClose", "SCL32-CDL02:VBx09XV7502:SetManuClose", "SCL32-CDL02:VBx10XV7502:SetManuClose",
"SCL32-CDL02:VBx11XV7502:SetManuClose", "SCL32-CDL02:VBx12XV7502:SetManuClose", "SCL32-CDL02:VBx13XV7502:SetManuClose",
"SCL32-CDL03:VBx01-XV7502:SetManuClose", "SCL32-CDL03:VBx02-XV7502:SetManuClose", "SCL32-CDL03:VBx03-XV7502:SetManuClose",
"SCL32-CDL03:VBx04-XV7502:SetManuClose", "SCL32-CDL03:VBx05-XV7502:SetManuClose", "SCL32-CDL03:VBx06-XV7502:SetManuClose",
"SCL32-CDL03:VBx07-XV7502:SetManuClose", "SCL32-CDL03:VBx08-XV7502:SetManuClose", "SCL32-CDL03:VBx09-XV7502:SetManuClose",
"SCL32-CDL03:VBx10-XV7502:SetManuClose", "SCL32-CDL03:VBx11-XV7502:SetManuClose", "SCL32-CDL03:VBx12-XV7502:SetManuClose",
"SCL32-CDL03:VBx13-XV7502:SetManuClose", "SCL32-CDL03:VBx14-XV7502:SetManuClose", "SCL32-CDL03:VBx15-XV7502:SetManuClose",
"SCL32-CDL03:VBx16-XV7502:SetManuClose", "SCL32-CDL03:VBx17-XV7502:SetManuClose", "SCL32-CDL03:VBx18-XV7502:SetManuClose",
"SCL32-CDL03:VBx19-XV7502:SetManuClose"
};

float	controlPV;
assign	controlPV to "{C_PV}";
monitor controlPV;
evflag  evControl;
sync 	controlPV evControl;

int index = 0;
int pvcnt = 0;

ss seq_controls_
{
	state init
	{
		when(TRUE)
		{
			efClear(evControl);
		}state WaitEvent
	}

	state WaitEvent
	{
		when(efTestAndClear(evControl))
		{
			index = 0;
			pvcnt = sizeof(groupPVs)/sizeof(groupPVs[0]);
			for(index = 0; index < pvcnt;index++) {
				groupPVs[index] = controlPV;
				pvPut(groupPVs[index], ASYNC);
			}
		}state GrpControls
	}

	state GrpControls
	{
		when(pvArrayPutComplete(groupPVs,TRUE) )
		{
		}state WaitEvent
	}
}
