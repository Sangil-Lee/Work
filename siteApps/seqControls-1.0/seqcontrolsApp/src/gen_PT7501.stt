program PT7501Alarm
option +r;


float QWRVBxPT7501HIHIArray[11];
assign QWRVBxPT7501HIHIArray to {
 "SCL31-CDL01:VBx02-PT7501:PresR.HIHI",
 "SCL31-CDL01:VBx04-PT7501:PresR.HIHI",
 "SCL31-CDL01:VBx06-PT7501:PresR.HIHI",
 "SCL31-CDL01:VBx08-PT7501:PresR.HIHI",
 "SCL31-CDL01:VBx10-PT7501:PresR.HIHI",
 "SCL31-CDL01:VBx12-PT7501:PresR.HIHI",
 "SCL31-CDL01:VBx14-PT7501:PresR.HIHI",
 "SCL31-CDL01:VBx16-PT7501:PresR.HIHI",
 "SCL31-CDL01:VBx18-PT7501:PresR.HIHI",
 "SCL31-CDL01:VBx20-PT7501:PresR.HIHI",
 "SCL31-CDL01:VBx22-PT7501:PresR.HIHI"

};
float	QWRVBxPT7501HIHI;
assign	QWRVBxPT7501HIHI to "{GrpQWRVBxPT7501}.HIHI";
monitor QWRVBxPT7501HIHI;
evflag  evQWRVBxPT7501HIHI;
sync 	QWRVBxPT7501HIHI evQWRVBxPT7501HIHI;

float HWRVBxPT7501HIHIArray[33];
assign HWRVBxPT7501HIHIArray to {
 "SCL32-CDL02:VBx01-PT7501:PresR.HIHI",
 "SCL32-CDL02:VBx02-PT7501:PresR.HIHI",
 "SCL32-CDL02:VBx03-PT7501:PresR.HIHI",
 "SCL32-CDL02:VBx04-PT7501:PresR.HIHI",
 "SCL32-CDL02:VBx05-PT7501:PresR.HIHI",
 "SCL32-CDL02:VBx06-PT7501:PresR.HIHI",
 "SCL32-CDL02:VBx07-PT7501:PresR.HIHI",
 "SCL32-CDL02:VBx08-PT7501:PresR.HIHI",
 "SCL32-CDL02:VBx09-PT7501:PresR.HIHI",
 "SCL32-CDL02:VBx10-PT7501:PresR.HIHI",
 "SCL32-CDL02:VBx11-PT7501:PresR.HIHI",
 "SCL32-CDL02:VBx12-PT7501:PresR.HIHI",
 "SCL32-CDL02:VBx13-PT7501:PresR.HIHI",
 "SCL32-CDL03:VBx01-PT7501:PresR.HIHI",
 "SCL32-CDL03:VBx02-PT7501:PresR.HIHI",
 "SCL32-CDL03:VBx03-PT7501:PresR.HIHI",
 "SCL32-CDL03:VBx04-PT7501:PresR.HIHI",
 "SCL32-CDL03:VBx05-PT7501:PresR.HIHI",
 "SCL32-CDL03:VBx06-PT7501:PresR.HIHI",
 "SCL32-CDL03:VBx07-PT7501:PresR.HIHI",
 "SCL32-CDL03:VBx08-PT7501:PresR.HIHI",
 "SCL32-CDL03:VBx09-PT7501:PresR.HIHI",
 "SCL32-CDL03:VBx10-PT7501:PresR.HIHI",
 "SCL32-CDL03:VBx11-PT7501:PresR.HIHI",
 "SCL32-CDL03:VBx12-PT7501:PresR.HIHI",
 "SCL32-CDL03:VBx13-PT7501:PresR.HIHI",
 "SCL32-CDL03:VBx14-PT7501:PresR.HIHI",
 "SCL32-CDL03:VBx15-PT7501:PresR.HIHI",
 "SCL32-CDL03:VBx16-PT7501:PresR.HIHI",
 "SCL32-CDL03:VBx17-PT7501:PresR.HIHI",
 "SCL32-CDL03:VBx18-PT7501:PresR.HIHI",
 "SCL32-CDL03:VBx19-PT7501:PresR.HIHI",
 "P2DT-CDL04:VBx01-PT7501:PresR.HIHI"

};
float	HWRVBxPT7501HIHI;
assign	HWRVBxPT7501HIHI to "{GrpHWRVBxPT7501}.HIHI";
monitor HWRVBxPT7501HIHI;
evflag  evHWRVBxPT7501HIHI;
sync 	HWRVBxPT7501HIHI evHWRVBxPT7501HIHI;

float QWRCMPT8501HIHIArray[11];
assign QWRCMPT8501HIHIArray to {
 "SCL31-BL01:VBx02-PT7501:PresR.HIHI",
 "SCL31-BL01:VBx04-PT7501:PresR.HIHI",
 "SCL31-BL01:VBx06-PT7501:PresR.HIHI",
 "SCL31-BL01:VBx08-PT7501:PresR.HIHI",
 "SCL31-BL01:VBx10-PT7501:PresR.HIHI",
 "SCL31-BL01:VBx12-PT7501:PresR.HIHI",
 "SCL31-BL01:VBx14-PT7501:PresR.HIHI",
 "SCL31-BL01:VBx16-PT7501:PresR.HIHI",
 "SCL31-BL01:VBx18-PT7501:PresR.HIHI",
 "SCL31-BL01:VBx20-PT7501:PresR.HIHI",
 "SCL31-BL01:VBx22-PT7501:PresR.HIHI"

};
float	QWRCMPT8501HIHI;
assign	QWRCMPT8501HIHI to "{GrpQWRCMPT8501}.HIHI";
monitor QWRCMPT8501HIHI;
evflag  evQWRCMPT8501HIHI;
sync 	QWRCMPT8501HIHI evQWRCMPT8501HIHI;

float HWRCMPT8501HIHIArray[33];
assign HWRCMPT8501HIHIArray to {
 "SCL32-BL02:VBx01-PT7501:PresR.HIHI",
 "SCL32-BL02:VBx02-PT7501:PresR.HIHI",
 "SCL32-BL02:VBx03-PT7501:PresR.HIHI",
 "SCL32-BL02:VBx04-PT7501:PresR.HIHI",
 "SCL32-BL02:VBx05-PT7501:PresR.HIHI",
 "SCL32-BL02:VBx06-PT7501:PresR.HIHI",
 "SCL32-BL02:VBx07-PT7501:PresR.HIHI",
 "SCL32-BL02:VBx08-PT7501:PresR.HIHI",
 "SCL32-BL02:VBx09-PT7501:PresR.HIHI",
 "SCL32-BL02:VBx10-PT7501:PresR.HIHI",
 "SCL32-BL02:VBx11-PT7501:PresR.HIHI",
 "SCL32-BL02:VBx12-PT7501:PresR.HIHI",
 "SCL32-BL02:VBx13-PT7501:PresR.HIHI",
 "SCL32-BL03:VBx01-PT7501:PresR.HIHI",
 "SCL32-BL03:VBx02-PT7501:PresR.HIHI",
 "SCL32-BL03:VBx03-PT7501:PresR.HIHI",
 "SCL32-BL03:VBx04-PT7501:PresR.HIHI",
 "SCL32-BL03:VBx05-PT7501:PresR.HIHI",
 "SCL32-BL03:VBx06-PT7501:PresR.HIHI",
 "SCL32-BL03:VBx07-PT7501:PresR.HIHI",
 "SCL32-BL03:VBx08-PT7501:PresR.HIHI",
 "SCL32-BL03:VBx09-PT7501:PresR.HIHI",
 "SCL32-BL03:VBx10-PT7501:PresR.HIHI",
 "SCL32-BL03:VBx11-PT7501:PresR.HIHI",
 "SCL32-BL03:VBx12-PT7501:PresR.HIHI",
 "SCL32-BL03:VBx13-PT7501:PresR.HIHI",
 "SCL32-BL03:VBx14-PT7501:PresR.HIHI",
 "SCL32-BL03:VBx15-PT7501:PresR.HIHI",
 "SCL32-BL03:VBx16-PT7501:PresR.HIHI",
 "SCL32-BL03:VBx17-PT7501:PresR.HIHI",
 "SCL32-BL03:VBx18-PT7501:PresR.HIHI",
 "SCL32-BL03:VBx19-PT7501:PresR.HIHI",
 "P2DT-BL04:VBx01-PT7501:PresR.HIHI"

};
float	HWRCMPT8501HIHI;
assign	HWRCMPT8501HIHI to "{GrpHWRCMPT8501}.HIHI";
monitor HWRCMPT8501HIHI;
evflag  evHWRCMPT8501HIHI;
sync 	HWRCMPT8501HIHI evHWRCMPT8501HIHI;



float QWRVBxPT7501HIGHArray[11];
assign QWRVBxPT7501HIGHArray to {
 "SCL31-CDL01:VBx02-PT7501:PresR.HIGH",
 "SCL31-CDL01:VBx04-PT7501:PresR.HIGH",
 "SCL31-CDL01:VBx06-PT7501:PresR.HIGH",
 "SCL31-CDL01:VBx08-PT7501:PresR.HIGH",
 "SCL31-CDL01:VBx10-PT7501:PresR.HIGH",
 "SCL31-CDL01:VBx12-PT7501:PresR.HIGH",
 "SCL31-CDL01:VBx14-PT7501:PresR.HIGH",
 "SCL31-CDL01:VBx16-PT7501:PresR.HIGH",
 "SCL31-CDL01:VBx18-PT7501:PresR.HIGH",
 "SCL31-CDL01:VBx20-PT7501:PresR.HIGH",
 "SCL31-CDL01:VBx22-PT7501:PresR.HIGH"

};
float	QWRVBxPT7501HIGH;
assign	QWRVBxPT7501HIGH to "{GrpQWRVBxPT7501}.HIGH";
monitor QWRVBxPT7501HIGH;
evflag  evQWRVBxPT7501HIGH;
sync 	QWRVBxPT7501HIGH evQWRVBxPT7501HIGH;

float HWRVBxPT7501HIGHArray[33];
assign HWRVBxPT7501HIGHArray to {
 "SCL32-CDL02:VBx01-PT7501:PresR.HIGH",
 "SCL32-CDL02:VBx02-PT7501:PresR.HIGH",
 "SCL32-CDL02:VBx03-PT7501:PresR.HIGH",
 "SCL32-CDL02:VBx04-PT7501:PresR.HIGH",
 "SCL32-CDL02:VBx05-PT7501:PresR.HIGH",
 "SCL32-CDL02:VBx06-PT7501:PresR.HIGH",
 "SCL32-CDL02:VBx07-PT7501:PresR.HIGH",
 "SCL32-CDL02:VBx08-PT7501:PresR.HIGH",
 "SCL32-CDL02:VBx09-PT7501:PresR.HIGH",
 "SCL32-CDL02:VBx10-PT7501:PresR.HIGH",
 "SCL32-CDL02:VBx11-PT7501:PresR.HIGH",
 "SCL32-CDL02:VBx12-PT7501:PresR.HIGH",
 "SCL32-CDL02:VBx13-PT7501:PresR.HIGH",
 "SCL32-CDL03:VBx01-PT7501:PresR.HIGH",
 "SCL32-CDL03:VBx02-PT7501:PresR.HIGH",
 "SCL32-CDL03:VBx03-PT7501:PresR.HIGH",
 "SCL32-CDL03:VBx04-PT7501:PresR.HIGH",
 "SCL32-CDL03:VBx05-PT7501:PresR.HIGH",
 "SCL32-CDL03:VBx06-PT7501:PresR.HIGH",
 "SCL32-CDL03:VBx07-PT7501:PresR.HIGH",
 "SCL32-CDL03:VBx08-PT7501:PresR.HIGH",
 "SCL32-CDL03:VBx09-PT7501:PresR.HIGH",
 "SCL32-CDL03:VBx10-PT7501:PresR.HIGH",
 "SCL32-CDL03:VBx11-PT7501:PresR.HIGH",
 "SCL32-CDL03:VBx12-PT7501:PresR.HIGH",
 "SCL32-CDL03:VBx13-PT7501:PresR.HIGH",
 "SCL32-CDL03:VBx14-PT7501:PresR.HIGH",
 "SCL32-CDL03:VBx15-PT7501:PresR.HIGH",
 "SCL32-CDL03:VBx16-PT7501:PresR.HIGH",
 "SCL32-CDL03:VBx17-PT7501:PresR.HIGH",
 "SCL32-CDL03:VBx18-PT7501:PresR.HIGH",
 "SCL32-CDL03:VBx19-PT7501:PresR.HIGH",
 "P2DT-CDL04:VBx01-PT7501:PresR.HIGH"

};
float	HWRVBxPT7501HIGH;
assign	HWRVBxPT7501HIGH to "{GrpHWRVBxPT7501}.HIGH";
monitor HWRVBxPT7501HIGH;
evflag  evHWRVBxPT7501HIGH;
sync 	HWRVBxPT7501HIGH evHWRVBxPT7501HIGH;

float QWRCMPT8501HIGHArray[11];
assign QWRCMPT8501HIGHArray to {
 "SCL31-BL01:VBx02-PT7501:PresR.HIGH",
 "SCL31-BL01:VBx04-PT7501:PresR.HIGH",
 "SCL31-BL01:VBx06-PT7501:PresR.HIGH",
 "SCL31-BL01:VBx08-PT7501:PresR.HIGH",
 "SCL31-BL01:VBx10-PT7501:PresR.HIGH",
 "SCL31-BL01:VBx12-PT7501:PresR.HIGH",
 "SCL31-BL01:VBx14-PT7501:PresR.HIGH",
 "SCL31-BL01:VBx16-PT7501:PresR.HIGH",
 "SCL31-BL01:VBx18-PT7501:PresR.HIGH",
 "SCL31-BL01:VBx20-PT7501:PresR.HIGH",
 "SCL31-BL01:VBx22-PT7501:PresR.HIGH"

};
float	QWRCMPT8501HIGH;
assign	QWRCMPT8501HIGH to "{GrpQWRCMPT8501}.HIGH";
monitor QWRCMPT8501HIGH;
evflag  evQWRCMPT8501HIGH;
sync 	QWRCMPT8501HIGH evQWRCMPT8501HIGH;

float HWRCMPT8501HIGHArray[33];
assign HWRCMPT8501HIGHArray to {
 "SCL32-BL02:VBx01-PT7501:PresR.HIGH",
 "SCL32-BL02:VBx02-PT7501:PresR.HIGH",
 "SCL32-BL02:VBx03-PT7501:PresR.HIGH",
 "SCL32-BL02:VBx04-PT7501:PresR.HIGH",
 "SCL32-BL02:VBx05-PT7501:PresR.HIGH",
 "SCL32-BL02:VBx06-PT7501:PresR.HIGH",
 "SCL32-BL02:VBx07-PT7501:PresR.HIGH",
 "SCL32-BL02:VBx08-PT7501:PresR.HIGH",
 "SCL32-BL02:VBx09-PT7501:PresR.HIGH",
 "SCL32-BL02:VBx10-PT7501:PresR.HIGH",
 "SCL32-BL02:VBx11-PT7501:PresR.HIGH",
 "SCL32-BL02:VBx12-PT7501:PresR.HIGH",
 "SCL32-BL02:VBx13-PT7501:PresR.HIGH",
 "SCL32-BL03:VBx01-PT7501:PresR.HIGH",
 "SCL32-BL03:VBx02-PT7501:PresR.HIGH",
 "SCL32-BL03:VBx03-PT7501:PresR.HIGH",
 "SCL32-BL03:VBx04-PT7501:PresR.HIGH",
 "SCL32-BL03:VBx05-PT7501:PresR.HIGH",
 "SCL32-BL03:VBx06-PT7501:PresR.HIGH",
 "SCL32-BL03:VBx07-PT7501:PresR.HIGH",
 "SCL32-BL03:VBx08-PT7501:PresR.HIGH",
 "SCL32-BL03:VBx09-PT7501:PresR.HIGH",
 "SCL32-BL03:VBx10-PT7501:PresR.HIGH",
 "SCL32-BL03:VBx11-PT7501:PresR.HIGH",
 "SCL32-BL03:VBx12-PT7501:PresR.HIGH",
 "SCL32-BL03:VBx13-PT7501:PresR.HIGH",
 "SCL32-BL03:VBx14-PT7501:PresR.HIGH",
 "SCL32-BL03:VBx15-PT7501:PresR.HIGH",
 "SCL32-BL03:VBx16-PT7501:PresR.HIGH",
 "SCL32-BL03:VBx17-PT7501:PresR.HIGH",
 "SCL32-BL03:VBx18-PT7501:PresR.HIGH",
 "SCL32-BL03:VBx19-PT7501:PresR.HIGH",
 "P2DT-BL04:VBx01-PT7501:PresR.HIGH"

};
float	HWRCMPT8501HIGH;
assign	HWRCMPT8501HIGH to "{GrpHWRCMPT8501}.HIGH";
monitor HWRCMPT8501HIGH;
evflag  evHWRCMPT8501HIGH;
sync 	HWRCMPT8501HIGH evHWRCMPT8501HIGH;



float QWRVBxPT7501LOWArray[11];
assign QWRVBxPT7501LOWArray to {
 "SCL31-CDL01:VBx02-PT7501:PresR.LOW",
 "SCL31-CDL01:VBx04-PT7501:PresR.LOW",
 "SCL31-CDL01:VBx06-PT7501:PresR.LOW",
 "SCL31-CDL01:VBx08-PT7501:PresR.LOW",
 "SCL31-CDL01:VBx10-PT7501:PresR.LOW",
 "SCL31-CDL01:VBx12-PT7501:PresR.LOW",
 "SCL31-CDL01:VBx14-PT7501:PresR.LOW",
 "SCL31-CDL01:VBx16-PT7501:PresR.LOW",
 "SCL31-CDL01:VBx18-PT7501:PresR.LOW",
 "SCL31-CDL01:VBx20-PT7501:PresR.LOW",
 "SCL31-CDL01:VBx22-PT7501:PresR.LOW"

};
float	QWRVBxPT7501LOW;
assign	QWRVBxPT7501LOW to "{GrpQWRVBxPT7501}.LOW";
monitor QWRVBxPT7501LOW;
evflag  evQWRVBxPT7501LOW;
sync 	QWRVBxPT7501LOW evQWRVBxPT7501LOW;

float HWRVBxPT7501LOWArray[33];
assign HWRVBxPT7501LOWArray to {
 "SCL32-CDL02:VBx01-PT7501:PresR.LOW",
 "SCL32-CDL02:VBx02-PT7501:PresR.LOW",
 "SCL32-CDL02:VBx03-PT7501:PresR.LOW",
 "SCL32-CDL02:VBx04-PT7501:PresR.LOW",
 "SCL32-CDL02:VBx05-PT7501:PresR.LOW",
 "SCL32-CDL02:VBx06-PT7501:PresR.LOW",
 "SCL32-CDL02:VBx07-PT7501:PresR.LOW",
 "SCL32-CDL02:VBx08-PT7501:PresR.LOW",
 "SCL32-CDL02:VBx09-PT7501:PresR.LOW",
 "SCL32-CDL02:VBx10-PT7501:PresR.LOW",
 "SCL32-CDL02:VBx11-PT7501:PresR.LOW",
 "SCL32-CDL02:VBx12-PT7501:PresR.LOW",
 "SCL32-CDL02:VBx13-PT7501:PresR.LOW",
 "SCL32-CDL03:VBx01-PT7501:PresR.LOW",
 "SCL32-CDL03:VBx02-PT7501:PresR.LOW",
 "SCL32-CDL03:VBx03-PT7501:PresR.LOW",
 "SCL32-CDL03:VBx04-PT7501:PresR.LOW",
 "SCL32-CDL03:VBx05-PT7501:PresR.LOW",
 "SCL32-CDL03:VBx06-PT7501:PresR.LOW",
 "SCL32-CDL03:VBx07-PT7501:PresR.LOW",
 "SCL32-CDL03:VBx08-PT7501:PresR.LOW",
 "SCL32-CDL03:VBx09-PT7501:PresR.LOW",
 "SCL32-CDL03:VBx10-PT7501:PresR.LOW",
 "SCL32-CDL03:VBx11-PT7501:PresR.LOW",
 "SCL32-CDL03:VBx12-PT7501:PresR.LOW",
 "SCL32-CDL03:VBx13-PT7501:PresR.LOW",
 "SCL32-CDL03:VBx14-PT7501:PresR.LOW",
 "SCL32-CDL03:VBx15-PT7501:PresR.LOW",
 "SCL32-CDL03:VBx16-PT7501:PresR.LOW",
 "SCL32-CDL03:VBx17-PT7501:PresR.LOW",
 "SCL32-CDL03:VBx18-PT7501:PresR.LOW",
 "SCL32-CDL03:VBx19-PT7501:PresR.LOW",
 "P2DT-CDL04:VBx01-PT7501:PresR.LOW"

};
float	HWRVBxPT7501LOW;
assign	HWRVBxPT7501LOW to "{GrpHWRVBxPT7501}.LOW";
monitor HWRVBxPT7501LOW;
evflag  evHWRVBxPT7501LOW;
sync 	HWRVBxPT7501LOW evHWRVBxPT7501LOW;

float QWRCMPT8501LOWArray[11];
assign QWRCMPT8501LOWArray to {
 "SCL31-BL01:VBx02-PT7501:PresR.LOW",
 "SCL31-BL01:VBx04-PT7501:PresR.LOW",
 "SCL31-BL01:VBx06-PT7501:PresR.LOW",
 "SCL31-BL01:VBx08-PT7501:PresR.LOW",
 "SCL31-BL01:VBx10-PT7501:PresR.LOW",
 "SCL31-BL01:VBx12-PT7501:PresR.LOW",
 "SCL31-BL01:VBx14-PT7501:PresR.LOW",
 "SCL31-BL01:VBx16-PT7501:PresR.LOW",
 "SCL31-BL01:VBx18-PT7501:PresR.LOW",
 "SCL31-BL01:VBx20-PT7501:PresR.LOW",
 "SCL31-BL01:VBx22-PT7501:PresR.LOW"

};
float	QWRCMPT8501LOW;
assign	QWRCMPT8501LOW to "{GrpQWRCMPT8501}.LOW";
monitor QWRCMPT8501LOW;
evflag  evQWRCMPT8501LOW;
sync 	QWRCMPT8501LOW evQWRCMPT8501LOW;

float HWRCMPT8501LOWArray[33];
assign HWRCMPT8501LOWArray to {
 "SCL32-BL02:VBx01-PT7501:PresR.LOW",
 "SCL32-BL02:VBx02-PT7501:PresR.LOW",
 "SCL32-BL02:VBx03-PT7501:PresR.LOW",
 "SCL32-BL02:VBx04-PT7501:PresR.LOW",
 "SCL32-BL02:VBx05-PT7501:PresR.LOW",
 "SCL32-BL02:VBx06-PT7501:PresR.LOW",
 "SCL32-BL02:VBx07-PT7501:PresR.LOW",
 "SCL32-BL02:VBx08-PT7501:PresR.LOW",
 "SCL32-BL02:VBx09-PT7501:PresR.LOW",
 "SCL32-BL02:VBx10-PT7501:PresR.LOW",
 "SCL32-BL02:VBx11-PT7501:PresR.LOW",
 "SCL32-BL02:VBx12-PT7501:PresR.LOW",
 "SCL32-BL02:VBx13-PT7501:PresR.LOW",
 "SCL32-BL03:VBx01-PT7501:PresR.LOW",
 "SCL32-BL03:VBx02-PT7501:PresR.LOW",
 "SCL32-BL03:VBx03-PT7501:PresR.LOW",
 "SCL32-BL03:VBx04-PT7501:PresR.LOW",
 "SCL32-BL03:VBx05-PT7501:PresR.LOW",
 "SCL32-BL03:VBx06-PT7501:PresR.LOW",
 "SCL32-BL03:VBx07-PT7501:PresR.LOW",
 "SCL32-BL03:VBx08-PT7501:PresR.LOW",
 "SCL32-BL03:VBx09-PT7501:PresR.LOW",
 "SCL32-BL03:VBx10-PT7501:PresR.LOW",
 "SCL32-BL03:VBx11-PT7501:PresR.LOW",
 "SCL32-BL03:VBx12-PT7501:PresR.LOW",
 "SCL32-BL03:VBx13-PT7501:PresR.LOW",
 "SCL32-BL03:VBx14-PT7501:PresR.LOW",
 "SCL32-BL03:VBx15-PT7501:PresR.LOW",
 "SCL32-BL03:VBx16-PT7501:PresR.LOW",
 "SCL32-BL03:VBx17-PT7501:PresR.LOW",
 "SCL32-BL03:VBx18-PT7501:PresR.LOW",
 "SCL32-BL03:VBx19-PT7501:PresR.LOW",
 "P2DT-BL04:VBx01-PT7501:PresR.LOW"

};
float	HWRCMPT8501LOW;
assign	HWRCMPT8501LOW to "{GrpHWRCMPT8501}.LOW";
monitor HWRCMPT8501LOW;
evflag  evHWRCMPT8501LOW;
sync 	HWRCMPT8501LOW evHWRCMPT8501LOW;



float QWRVBxPT7501LOLOArray[11];
assign QWRVBxPT7501LOLOArray to {
 "SCL31-CDL01:VBx02-PT7501:PresR.LOLO",
 "SCL31-CDL01:VBx04-PT7501:PresR.LOLO",
 "SCL31-CDL01:VBx06-PT7501:PresR.LOLO",
 "SCL31-CDL01:VBx08-PT7501:PresR.LOLO",
 "SCL31-CDL01:VBx10-PT7501:PresR.LOLO",
 "SCL31-CDL01:VBx12-PT7501:PresR.LOLO",
 "SCL31-CDL01:VBx14-PT7501:PresR.LOLO",
 "SCL31-CDL01:VBx16-PT7501:PresR.LOLO",
 "SCL31-CDL01:VBx18-PT7501:PresR.LOLO",
 "SCL31-CDL01:VBx20-PT7501:PresR.LOLO",
 "SCL31-CDL01:VBx22-PT7501:PresR.LOLO"

};
float	QWRVBxPT7501LOLO;
assign	QWRVBxPT7501LOLO to "{GrpQWRVBxPT7501}.LOLO";
monitor QWRVBxPT7501LOLO;
evflag  evQWRVBxPT7501LOLO;
sync 	QWRVBxPT7501LOLO evQWRVBxPT7501LOLO;

float HWRVBxPT7501LOLOArray[33];
assign HWRVBxPT7501LOLOArray to {
 "SCL32-CDL02:VBx01-PT7501:PresR.LOLO",
 "SCL32-CDL02:VBx02-PT7501:PresR.LOLO",
 "SCL32-CDL02:VBx03-PT7501:PresR.LOLO",
 "SCL32-CDL02:VBx04-PT7501:PresR.LOLO",
 "SCL32-CDL02:VBx05-PT7501:PresR.LOLO",
 "SCL32-CDL02:VBx06-PT7501:PresR.LOLO",
 "SCL32-CDL02:VBx07-PT7501:PresR.LOLO",
 "SCL32-CDL02:VBx08-PT7501:PresR.LOLO",
 "SCL32-CDL02:VBx09-PT7501:PresR.LOLO",
 "SCL32-CDL02:VBx10-PT7501:PresR.LOLO",
 "SCL32-CDL02:VBx11-PT7501:PresR.LOLO",
 "SCL32-CDL02:VBx12-PT7501:PresR.LOLO",
 "SCL32-CDL02:VBx13-PT7501:PresR.LOLO",
 "SCL32-CDL03:VBx01-PT7501:PresR.LOLO",
 "SCL32-CDL03:VBx02-PT7501:PresR.LOLO",
 "SCL32-CDL03:VBx03-PT7501:PresR.LOLO",
 "SCL32-CDL03:VBx04-PT7501:PresR.LOLO",
 "SCL32-CDL03:VBx05-PT7501:PresR.LOLO",
 "SCL32-CDL03:VBx06-PT7501:PresR.LOLO",
 "SCL32-CDL03:VBx07-PT7501:PresR.LOLO",
 "SCL32-CDL03:VBx08-PT7501:PresR.LOLO",
 "SCL32-CDL03:VBx09-PT7501:PresR.LOLO",
 "SCL32-CDL03:VBx10-PT7501:PresR.LOLO",
 "SCL32-CDL03:VBx11-PT7501:PresR.LOLO",
 "SCL32-CDL03:VBx12-PT7501:PresR.LOLO",
 "SCL32-CDL03:VBx13-PT7501:PresR.LOLO",
 "SCL32-CDL03:VBx14-PT7501:PresR.LOLO",
 "SCL32-CDL03:VBx15-PT7501:PresR.LOLO",
 "SCL32-CDL03:VBx16-PT7501:PresR.LOLO",
 "SCL32-CDL03:VBx17-PT7501:PresR.LOLO",
 "SCL32-CDL03:VBx18-PT7501:PresR.LOLO",
 "SCL32-CDL03:VBx19-PT7501:PresR.LOLO",
 "P2DT-CDL04:VBx01-PT7501:PresR.LOLO"

};
float	HWRVBxPT7501LOLO;
assign	HWRVBxPT7501LOLO to "{GrpHWRVBxPT7501}.LOLO";
monitor HWRVBxPT7501LOLO;
evflag  evHWRVBxPT7501LOLO;
sync 	HWRVBxPT7501LOLO evHWRVBxPT7501LOLO;

float QWRCMPT8501LOLOArray[11];
assign QWRCMPT8501LOLOArray to {
 "SCL31-BL01:VBx02-PT7501:PresR.LOLO",
 "SCL31-BL01:VBx04-PT7501:PresR.LOLO",
 "SCL31-BL01:VBx06-PT7501:PresR.LOLO",
 "SCL31-BL01:VBx08-PT7501:PresR.LOLO",
 "SCL31-BL01:VBx10-PT7501:PresR.LOLO",
 "SCL31-BL01:VBx12-PT7501:PresR.LOLO",
 "SCL31-BL01:VBx14-PT7501:PresR.LOLO",
 "SCL31-BL01:VBx16-PT7501:PresR.LOLO",
 "SCL31-BL01:VBx18-PT7501:PresR.LOLO",
 "SCL31-BL01:VBx20-PT7501:PresR.LOLO",
 "SCL31-BL01:VBx22-PT7501:PresR.LOLO"

};
float	QWRCMPT8501LOLO;
assign	QWRCMPT8501LOLO to "{GrpQWRCMPT8501}.LOLO";
monitor QWRCMPT8501LOLO;
evflag  evQWRCMPT8501LOLO;
sync 	QWRCMPT8501LOLO evQWRCMPT8501LOLO;

float HWRCMPT8501LOLOArray[33];
assign HWRCMPT8501LOLOArray to {
 "SCL32-BL02:VBx01-PT7501:PresR.LOLO",
 "SCL32-BL02:VBx02-PT7501:PresR.LOLO",
 "SCL32-BL02:VBx03-PT7501:PresR.LOLO",
 "SCL32-BL02:VBx04-PT7501:PresR.LOLO",
 "SCL32-BL02:VBx05-PT7501:PresR.LOLO",
 "SCL32-BL02:VBx06-PT7501:PresR.LOLO",
 "SCL32-BL02:VBx07-PT7501:PresR.LOLO",
 "SCL32-BL02:VBx08-PT7501:PresR.LOLO",
 "SCL32-BL02:VBx09-PT7501:PresR.LOLO",
 "SCL32-BL02:VBx10-PT7501:PresR.LOLO",
 "SCL32-BL02:VBx11-PT7501:PresR.LOLO",
 "SCL32-BL02:VBx12-PT7501:PresR.LOLO",
 "SCL32-BL02:VBx13-PT7501:PresR.LOLO",
 "SCL32-BL03:VBx01-PT7501:PresR.LOLO",
 "SCL32-BL03:VBx02-PT7501:PresR.LOLO",
 "SCL32-BL03:VBx03-PT7501:PresR.LOLO",
 "SCL32-BL03:VBx04-PT7501:PresR.LOLO",
 "SCL32-BL03:VBx05-PT7501:PresR.LOLO",
 "SCL32-BL03:VBx06-PT7501:PresR.LOLO",
 "SCL32-BL03:VBx07-PT7501:PresR.LOLO",
 "SCL32-BL03:VBx08-PT7501:PresR.LOLO",
 "SCL32-BL03:VBx09-PT7501:PresR.LOLO",
 "SCL32-BL03:VBx10-PT7501:PresR.LOLO",
 "SCL32-BL03:VBx11-PT7501:PresR.LOLO",
 "SCL32-BL03:VBx12-PT7501:PresR.LOLO",
 "SCL32-BL03:VBx13-PT7501:PresR.LOLO",
 "SCL32-BL03:VBx14-PT7501:PresR.LOLO",
 "SCL32-BL03:VBx15-PT7501:PresR.LOLO",
 "SCL32-BL03:VBx16-PT7501:PresR.LOLO",
 "SCL32-BL03:VBx17-PT7501:PresR.LOLO",
 "SCL32-BL03:VBx18-PT7501:PresR.LOLO",
 "SCL32-BL03:VBx19-PT7501:PresR.LOLO",
 "P2DT-BL04:VBx01-PT7501:PresR.LOLO"

};
float	HWRCMPT8501LOLO;
assign	HWRCMPT8501LOLO to "{GrpHWRCMPT8501}.LOLO";
monitor HWRCMPT8501LOLO;
evflag  evHWRCMPT8501LOLO;
sync 	HWRCMPT8501LOLO evHWRCMPT8501LOLO;


ss seq_controls_PT7501Alarm
{
	state init
	{
		when(TRUE)
		{
        efClear(evQWRVBxPT7501HIHI);
        efClear(evHWRVBxPT7501HIHI);
        efClear(evQWRCMPT8501HIHI);
        efClear(evHWRCMPT8501HIHI);
        efClear(evQWRVBxPT7501HIGH);
        efClear(evHWRVBxPT7501HIGH);
        efClear(evQWRCMPT8501HIGH);
        efClear(evHWRCMPT8501HIGH);
        efClear(evQWRVBxPT7501LOW);
        efClear(evHWRVBxPT7501LOW);
        efClear(evQWRCMPT8501LOW);
        efClear(evHWRCMPT8501LOW);
        efClear(evQWRVBxPT7501LOLO);
        efClear(evHWRVBxPT7501LOLO);
        efClear(evQWRCMPT8501LOLO);
        efClear(evHWRCMPT8501LOLO);

		}state WaitEvent
	}

	state WaitEvent
	{
 
		when(efTestAndClear(evQWRVBxPT7501HIHI))
		{
			int index = 0;
			int pvcnt = sizeof(QWRVBxPT7501HIHIArray)/sizeof(QWRVBxPT7501HIHIArray[0]);
			for(index = 0; index < pvcnt;index++) {
				QWRVBxPT7501HIHIArray[index] = QWRVBxPT7501HIHI;
				pvPut(QWRVBxPT7501HIHIArray[index], ASYNC);
			}
		}state GrpControls

		when(efTestAndClear(evHWRVBxPT7501HIHI))
		{
			int index = 0;
			int pvcnt = sizeof(HWRVBxPT7501HIHIArray)/sizeof(HWRVBxPT7501HIHIArray[0]);
			for(index = 0; index < pvcnt;index++) {
				HWRVBxPT7501HIHIArray[index] = HWRVBxPT7501HIHI;
				pvPut(HWRVBxPT7501HIHIArray[index], ASYNC);
			}
		}state GrpControls

		when(efTestAndClear(evQWRCMPT8501HIHI))
		{
			int index = 0;
			int pvcnt = sizeof(QWRCMPT8501HIHIArray)/sizeof(QWRCMPT8501HIHIArray[0]);
			for(index = 0; index < pvcnt;index++) {
				QWRCMPT8501HIHIArray[index] = QWRCMPT8501HIHI;
				pvPut(QWRCMPT8501HIHIArray[index], ASYNC);
			}
		}state GrpControls

		when(efTestAndClear(evHWRCMPT8501HIHI))
		{
			int index = 0;
			int pvcnt = sizeof(HWRCMPT8501HIHIArray)/sizeof(HWRCMPT8501HIHIArray[0]);
			for(index = 0; index < pvcnt;index++) {
				HWRCMPT8501HIHIArray[index] = HWRCMPT8501HIHI;
				pvPut(HWRCMPT8501HIHIArray[index], ASYNC);
			}
		}state GrpControls
  
		when(efTestAndClear(evQWRVBxPT7501HIGH))
		{
			int index = 0;
			int pvcnt = sizeof(QWRVBxPT7501HIGHArray)/sizeof(QWRVBxPT7501HIGHArray[0]);
			for(index = 0; index < pvcnt;index++) {
				QWRVBxPT7501HIGHArray[index] = QWRVBxPT7501HIGH;
				pvPut(QWRVBxPT7501HIGHArray[index], ASYNC);
			}
		}state GrpControls

		when(efTestAndClear(evHWRVBxPT7501HIGH))
		{
			int index = 0;
			int pvcnt = sizeof(HWRVBxPT7501HIGHArray)/sizeof(HWRVBxPT7501HIGHArray[0]);
			for(index = 0; index < pvcnt;index++) {
				HWRVBxPT7501HIGHArray[index] = HWRVBxPT7501HIGH;
				pvPut(HWRVBxPT7501HIGHArray[index], ASYNC);
			}
		}state GrpControls

		when(efTestAndClear(evQWRCMPT8501HIGH))
		{
			int index = 0;
			int pvcnt = sizeof(QWRCMPT8501HIGHArray)/sizeof(QWRCMPT8501HIGHArray[0]);
			for(index = 0; index < pvcnt;index++) {
				QWRCMPT8501HIGHArray[index] = QWRCMPT8501HIGH;
				pvPut(QWRCMPT8501HIGHArray[index], ASYNC);
			}
		}state GrpControls

		when(efTestAndClear(evHWRCMPT8501HIGH))
		{
			int index = 0;
			int pvcnt = sizeof(HWRCMPT8501HIGHArray)/sizeof(HWRCMPT8501HIGHArray[0]);
			for(index = 0; index < pvcnt;index++) {
				HWRCMPT8501HIGHArray[index] = HWRCMPT8501HIGH;
				pvPut(HWRCMPT8501HIGHArray[index], ASYNC);
			}
		}state GrpControls
  
		when(efTestAndClear(evQWRVBxPT7501LOW))
		{
			int index = 0;
			int pvcnt = sizeof(QWRVBxPT7501LOWArray)/sizeof(QWRVBxPT7501LOWArray[0]);
			for(index = 0; index < pvcnt;index++) {
				QWRVBxPT7501LOWArray[index] = QWRVBxPT7501LOW;
				pvPut(QWRVBxPT7501LOWArray[index], ASYNC);
			}
		}state GrpControls

		when(efTestAndClear(evHWRVBxPT7501LOW))
		{
			int index = 0;
			int pvcnt = sizeof(HWRVBxPT7501LOWArray)/sizeof(HWRVBxPT7501LOWArray[0]);
			for(index = 0; index < pvcnt;index++) {
				HWRVBxPT7501LOWArray[index] = HWRVBxPT7501LOW;
				pvPut(HWRVBxPT7501LOWArray[index], ASYNC);
			}
		}state GrpControls

		when(efTestAndClear(evQWRCMPT8501LOW))
		{
			int index = 0;
			int pvcnt = sizeof(QWRCMPT8501LOWArray)/sizeof(QWRCMPT8501LOWArray[0]);
			for(index = 0; index < pvcnt;index++) {
				QWRCMPT8501LOWArray[index] = QWRCMPT8501LOW;
				pvPut(QWRCMPT8501LOWArray[index], ASYNC);
			}
		}state GrpControls

		when(efTestAndClear(evHWRCMPT8501LOW))
		{
			int index = 0;
			int pvcnt = sizeof(HWRCMPT8501LOWArray)/sizeof(HWRCMPT8501LOWArray[0]);
			for(index = 0; index < pvcnt;index++) {
				HWRCMPT8501LOWArray[index] = HWRCMPT8501LOW;
				pvPut(HWRCMPT8501LOWArray[index], ASYNC);
			}
		}state GrpControls
  
		when(efTestAndClear(evQWRVBxPT7501LOLO))
		{
			int index = 0;
			int pvcnt = sizeof(QWRVBxPT7501LOLOArray)/sizeof(QWRVBxPT7501LOLOArray[0]);
			for(index = 0; index < pvcnt;index++) {
				QWRVBxPT7501LOLOArray[index] = QWRVBxPT7501LOLO;
				pvPut(QWRVBxPT7501LOLOArray[index], ASYNC);
			}
		}state GrpControls

		when(efTestAndClear(evHWRVBxPT7501LOLO))
		{
			int index = 0;
			int pvcnt = sizeof(HWRVBxPT7501LOLOArray)/sizeof(HWRVBxPT7501LOLOArray[0]);
			for(index = 0; index < pvcnt;index++) {
				HWRVBxPT7501LOLOArray[index] = HWRVBxPT7501LOLO;
				pvPut(HWRVBxPT7501LOLOArray[index], ASYNC);
			}
		}state GrpControls

		when(efTestAndClear(evQWRCMPT8501LOLO))
		{
			int index = 0;
			int pvcnt = sizeof(QWRCMPT8501LOLOArray)/sizeof(QWRCMPT8501LOLOArray[0]);
			for(index = 0; index < pvcnt;index++) {
				QWRCMPT8501LOLOArray[index] = QWRCMPT8501LOLO;
				pvPut(QWRCMPT8501LOLOArray[index], ASYNC);
			}
		}state GrpControls

		when(efTestAndClear(evHWRCMPT8501LOLO))
		{
			int index = 0;
			int pvcnt = sizeof(HWRCMPT8501LOLOArray)/sizeof(HWRCMPT8501LOLOArray[0]);
			for(index = 0; index < pvcnt;index++) {
				HWRCMPT8501LOLOArray[index] = HWRCMPT8501LOLO;
				pvPut(HWRCMPT8501LOLOArray[index], ASYNC);
			}
		}state GrpControls
 
	}

	state GrpControls
	{

		when(pvArrayPutComplete(QWRVBxPT7501HIHIArray,TRUE) )
		{
		}state WaitEvent

		when(pvArrayPutComplete(HWRVBxPT7501HIHIArray,TRUE) )
		{
		}state WaitEvent

		when(pvArrayPutComplete(QWRCMPT8501HIHIArray,TRUE) )
		{
		}state WaitEvent

		when(pvArrayPutComplete(HWRCMPT8501HIHIArray,TRUE) )
		{
		}state WaitEvent

		when(pvArrayPutComplete(QWRVBxPT7501HIGHArray,TRUE) )
		{
		}state WaitEvent

		when(pvArrayPutComplete(HWRVBxPT7501HIGHArray,TRUE) )
		{
		}state WaitEvent

		when(pvArrayPutComplete(QWRCMPT8501HIGHArray,TRUE) )
		{
		}state WaitEvent

		when(pvArrayPutComplete(HWRCMPT8501HIGHArray,TRUE) )
		{
		}state WaitEvent

		when(pvArrayPutComplete(QWRVBxPT7501LOWArray,TRUE) )
		{
		}state WaitEvent

		when(pvArrayPutComplete(HWRVBxPT7501LOWArray,TRUE) )
		{
		}state WaitEvent

		when(pvArrayPutComplete(QWRCMPT8501LOWArray,TRUE) )
		{
		}state WaitEvent

		when(pvArrayPutComplete(HWRCMPT8501LOWArray,TRUE) )
		{
		}state WaitEvent

		when(pvArrayPutComplete(QWRVBxPT7501LOLOArray,TRUE) )
		{
		}state WaitEvent

		when(pvArrayPutComplete(HWRVBxPT7501LOLOArray,TRUE) )
		{
		}state WaitEvent

		when(pvArrayPutComplete(QWRCMPT8501LOLOArray,TRUE) )
		{
		}state WaitEvent

		when(pvArrayPutComplete(HWRCMPT8501LOLOArray,TRUE) )
		{
		}state WaitEvent

	}
}
