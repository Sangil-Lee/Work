program sncMakeAIDynamic

option +r;

float aiNoiseVal[101];
assign aiNoiseVal to {
	"Cryo-CDL00:TBx01-PT7306:PresR", "Cryo-CDL00:TBx01-PT7507:PresR", "Cryo-CDL00:TBx01-PT7504:PresR", "Cryo-CDL00:TBx01-PT7501:PresR", "Cryo-CDL00:TBx01-PT7301:PresR",
	"Cryo-CDL00:TBx01-PT7401:PresR", "Cryo-CDL00:TBx01-PT7201:PresR", "SCL31-BL01:CM01-PT8301:PresR", "SCL31-BL01:CM02-PT8301:PresR", "SCL31-BL01:CM03-PT8301:PresR",
	"SCL31-BL01:CM04-PT8301:PresR", "SCL31-BL01:CM05-PT8301:PresR", "SCL31-BL01:CM06-PT8301:PresR", "SCL31-BL01:CM07-PT8301:PresR", "SCL31-BL01:CM08-PT8301:PresR",
	"SCL31-BL01:CM09-PT8301:PresR", "SCL31-BL01:CM10-PT8301:PresR", "SCL31-BL01:CM11-PT8301:PresR", "SCL31-BL01:CM12-PT8301:PresR", "SCL31-BL01:CM13-PT8301:PresR",
	"SCL31-BL01:CM14-PT8301:PresR", "SCL31-BL01:CM15-PT8301:PresR", "SCL31-BL01:CM16-PT8301:PresR", "SCL31-BL01:CM17-PT8301:PresR", "SCL31-BL01:CM18-PT8301:PresR",
	"SCL31-BL01:CM19-PT8301:PresR", "SCL31-BL01:CM20-PT8301:PresR", "SCL31-BL01:CM21-PT8301:PresR", "SCL31-BL01:CM22-PT8301:PresR", "SCL32-BL02:CM01-PT8301:PresR",
	"SCL32-BL02:CM02-PT8301:PresR", "SCL32-BL02:CM03-PT8301:PresR", "SCL32-BL02:CM04-PT8301:PresR", "SCL32-BL02:CM05-PT8301:PresR", "SCL32-BL02:CM06-PT8301:PresR",
	"SCL32-BL02:CM07-PT8301:PresR", "SCL32-BL02:CM08-PT8301:PresR", "SCL32-BL02:CM09-PT8301:PresR", "SCL32-BL02:CM10-PT8301:PresR", "SCL32-BL02:CM11-PT8301:PresR",
	"SCL32-BL02:CM12-PT8301:PresR", "SCL32-BL02:CM13-PT8301:PresR", "P2DT-BL04:CM01-PT8301:PresR",  "SCL32-BL03:CM01-PT8301:PresR", "SCL32-BL03:CM02-PT8301:PresR",
	"SCL32-BL03:CM03-PT8301:PresR", "SCL32-BL03:CM04-PT8301:PresR", "SCL32-BL03:CM05-PT8301:PresR", "SCL32-BL03:CM06-PT8301:PresR", "SCL32-BL03:CM07-PT8301:PresR",
	"SCL32-BL03:CM08-PT8301:PresR", "SCL32-BL03:CM09-PT8301:PresR", "SCL32-BL03:CM10-PT8301:PresR", "SCL32-BL03:CM11-PT8301:PresR", "SCL32-BL03:CM12-PT8301:PresR",
	"SCL32-BL03:CM13-PT8301:PresR", "SCL32-BL03:CM14-PT8301:PresR", "SCL32-BL03:CM15-PT8301:PresR", "SCL32-BL03:CM16-PT8301:PresR", "SCL32-BL03:CM17-PT8301:PresR",
	"SCL32-BL03:CM18-PT8301:PresR", "SCL32-BL03:CM19-PT8301:PresR", "SCL32-BL02:CM01-PT8201:PresR", "SCL32-BL02:CM02-PT8201:PresR", "SCL32-BL02:CM03-PT8201:PresR",
	"SCL32-BL02:CM04-PT8201:PresR", "SCL32-BL02:CM05-PT8201:PresR", "SCL32-BL02:CM06-PT8201:PresR", "SCL32-BL02:CM07-PT8201:PresR", "SCL32-BL02:CM08-PT8201:PresR",
	"SCL32-BL02:CM09-PT8201:PresR", "SCL32-BL02:CM10-PT8201:PresR", "SCL32-BL02:CM11-PT8201:PresR", "SCL32-BL02:CM12-PT8201:PresR", "SCL32-BL02:CM13-PT8201:PresR",
	"P2DT-BL04:CM01-PT8201:PresR",  "SCL32-BL03:CM01-PT8201:PresR", "SCL32-BL03:CM02-PT8201:PresR", "SCL32-BL03:CM03-PT8201:PresR", "SCL32-BL03:CM04-PT8201:PresR",
	"SCL32-BL03:CM05-PT8201:PresR", "SCL32-BL03:CM06-PT8201:PresR", "SCL32-BL03:CM07-PT8201:PresR", "SCL32-BL03:CM08-PT8201:PresR", "SCL32-BL03:CM09-PT8201:PresR",
	"SCL32-BL03:CM10-PT8201:PresR", "SCL32-BL03:CM11-PT8201:PresR", "SCL32-BL03:CM12-PT8201:PresR", "SCL32-BL03:CM13-PT8201:PresR", "SCL32-BL03:CM14-PT8201:PresR",
	"SCL32-BL03:CM15-PT8201:PresR", "SCL32-BL03:CM16-PT8201:PresR", "SCL32-BL03:CM17-PT8201:PresR", "SCL32-BL03:CM18-PT8201:PresR", "SCL32-BL03:CM19-PT8201:PresR",
	"Cryo-CDL00:TBx01-TT7303:TempR", "Cryo-CDL00:TBx01-TT7503:TempR", "Cryo-CDL00:TBx01-TT7501:TempR", "Cryo-CDL00:TBx01-TT7301:TempR", "Cryo-CDL00:TBx01-TT7401:TempR",
	"Cryo-CDL00:TBx01-TT7201:TempR"
};
float	aiNoiseSWave[101];
assign	aiNoiseSWave to "{P}{R}NoiseSWave";
monitor aiNoiseSWave;
evflag evWave;
sync aiNoiseSWave evWave;

int index;
int pvcnt;
ss makewave
{
	state init
	{
		when(TRUE)
		{
		}state MakeAIVal
	}

	state MakeAIVal
	{
		when(delay(1.) && efTestAndClear(evWave)) 
		{
			index = 0;
			pvcnt = sizeof(aiNoiseVal)/sizeof(aiNoiseVal[0]);
			for(index = 0; index < pvcnt;index++)
			{
				aiNoiseVal[index]	= aiNoiseSWave[index];
				pvPut(aiNoiseVal[index], ASYNC);
			}
		}state SyncValue
	}

	state SyncValue
	{
		when(pvArrayPutComplete(aiNoiseVal,TRUE)) 
		{
		}state MakeAIVal
	}
}

