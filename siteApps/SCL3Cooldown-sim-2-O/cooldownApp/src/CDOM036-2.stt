program CDOM0362Logic
option +r;

%% #include <math.h>

int om0362LogicProc[44];
assign om0362LogicProc to {
"SCL31-CDL01:VBx02-CV7401:CDLogic.PROC", "SCL31-CDL01:VBx04-CV7401:CDLogic.PROC", "SCL31-CDL01:VBx06-CV7401:CDLogic.PROC",
"SCL31-CDL01:VBx08-CV7401:CDLogic.PROC", "SCL31-CDL01:VBx10-CV7401:CDLogic.PROC", "SCL31-CDL01:VBx12-CV7401:CDLogic.PROC",
"SCL31-CDL01:VBx14-CV7401:CDLogic.PROC", "SCL31-CDL01:VBx16-CV7401:CDLogic.PROC", "SCL31-CDL01:VBx18-CV7401:CDLogic.PROC",
"SCL31-CDL01:VBx20-CV7401:CDLogic.PROC", "SCL31-CDL01:VBx22-CV7401:CDLogic.PROC", "SCL32-CDL02:VBx01-CV7401:CDLogic.PROC",
"SCL32-CDL02:VBx02-CV7401:CDLogic.PROC", "SCL32-CDL02:VBx03-CV7401:CDLogic.PROC", "SCL32-CDL02:VBx04-CV7401:CDLogic.PROC",
"SCL32-CDL02:VBx05-CV7401:CDLogic.PROC", "SCL32-CDL02:VBx06-CV7401:CDLogic.PROC", "SCL32-CDL02:VBx07-CV7401:CDLogic.PROC",
"SCL32-CDL02:VBx08-CV7401:CDLogic.PROC", "SCL32-CDL02:VBx09-CV7401:CDLogic.PROC", "SCL32-CDL02:VBx10-CV7401:CDLogic.PROC",
"SCL32-CDL02:VBx11-CV7401:CDLogic.PROC", "SCL32-CDL02:VBx12-CV7401:CDLogic.PROC", "SCL32-CDL02:VBx13-CV7401:CDLogic.PROC",
"SCL32-CDL03:VBx01-CV7401:CDLogic.PROC", "SCL32-CDL03:VBx02-CV7401:CDLogic.PROC", "SCL32-CDL03:VBx03-CV7401:CDLogic.PROC",
"SCL32-CDL03:VBx04-CV7401:CDLogic.PROC", "SCL32-CDL03:VBx05-CV7401:CDLogic.PROC", "SCL32-CDL03:VBx06-CV7401:CDLogic.PROC",
"SCL32-CDL03:VBx07-CV7401:CDLogic.PROC", "SCL32-CDL03:VBx08-CV7401:CDLogic.PROC", "SCL32-CDL03:VBx09-CV7401:CDLogic.PROC",
"SCL32-CDL03:VBx10-CV7401:CDLogic.PROC", "SCL32-CDL03:VBx11-CV7401:CDLogic.PROC", "SCL32-CDL03:VBx12-CV7401:CDLogic.PROC",
"SCL32-CDL03:VBx13-CV7401:CDLogic.PROC", "SCL32-CDL03:VBx14-CV7401:CDLogic.PROC", "SCL32-CDL03:VBx15-CV7401:CDLogic.PROC",
"SCL32-CDL03:VBx16-CV7401:CDLogic.PROC", "SCL32-CDL03:VBx17-CV7401:CDLogic.PROC", "SCL32-CDL03:VBx18-CV7401:CDLogic.PROC",
"SCL32-CDL03:VBx19-CV7401:CDLogic.PROC", "P2DT-CDL04:VBx01-CV7401:CDLogic.PROC"
};
monitor om0362LogicProc;

float valveVal[44];
assign valveVal to {
"SCL31-CDL01:VBx02-CV7401:Valve", "SCL31-CDL01:VBx04-CV7401:Valve", "SCL31-CDL01:VBx06-CV7401:Valve",
"SCL31-CDL01:VBx08-CV7401:Valve", "SCL31-CDL01:VBx10-CV7401:Valve", "SCL31-CDL01:VBx12-CV7401:Valve",
"SCL31-CDL01:VBx14-CV7401:Valve", "SCL31-CDL01:VBx16-CV7401:Valve", "SCL31-CDL01:VBx18-CV7401:Valve",
"SCL31-CDL01:VBx20-CV7401:Valve", "SCL31-CDL01:VBx22-CV7401:Valve", "SCL32-CDL02:VBx01-CV7401:Valve",
"SCL32-CDL02:VBx02-CV7401:Valve", "SCL32-CDL02:VBx03-CV7401:Valve", "SCL32-CDL02:VBx04-CV7401:Valve",
"SCL32-CDL02:VBx05-CV7401:Valve", "SCL32-CDL02:VBx06-CV7401:Valve", "SCL32-CDL02:VBx07-CV7401:Valve",
"SCL32-CDL02:VBx08-CV7401:Valve", "SCL32-CDL02:VBx09-CV7401:Valve", "SCL32-CDL02:VBx10-CV7401:Valve",
"SCL32-CDL02:VBx11-CV7401:Valve", "SCL32-CDL02:VBx12-CV7401:Valve", "SCL32-CDL02:VBx13-CV7401:Valve",
"SCL32-CDL03:VBx01-CV7401:Valve", "SCL32-CDL03:VBx02-CV7401:Valve", "SCL32-CDL03:VBx03-CV7401:Valve",
"SCL32-CDL03:VBx04-CV7401:Valve", "SCL32-CDL03:VBx05-CV7401:Valve", "SCL32-CDL03:VBx06-CV7401:Valve",
"SCL32-CDL03:VBx07-CV7401:Valve", "SCL32-CDL03:VBx08-CV7401:Valve", "SCL32-CDL03:VBx09-CV7401:Valve",
"SCL32-CDL03:VBx10-CV7401:Valve", "SCL32-CDL03:VBx11-CV7401:Valve", "SCL32-CDL03:VBx12-CV7401:Valve",
"SCL32-CDL03:VBx13-CV7401:Valve", "SCL32-CDL03:VBx14-CV7401:Valve", "SCL32-CDL03:VBx15-CV7401:Valve",
"SCL32-CDL03:VBx16-CV7401:Valve", "SCL32-CDL03:VBx17-CV7401:Valve", "SCL32-CDL03:VBx18-CV7401:Valve",
"SCL32-CDL03:VBx19-CV7401:Valve", "P2DT-CDL04:VBx01-CV7401:Valve"
};

monitor valveVal;

evflag  evFanout;
sync	valveVal	evFanout;

int index = 0;
assign index to "SCL3:CD-OM0362:IndexPV";
monitor index;

int proc = 1;

float om0362Val;
assign om0362Val to "SCL3:CD-OM0362:Value";
monitor om0362Val;

float cdDelay;
assign cdDelay to "SCL3:CD-OM0362:ScanTime";
monitor cdDelay;

float	valvewave[44];
assign	valvewave to "SCL3:CD-OM0362:ValveWave";
monitor valvewave;


ss ssCDOM0362
{
	state CDOM0362
	{
		when(delay(cdDelay)) 
		{
			if(om0362Val == 100) {
				om0362Val = 0;
				index++;
				pvPut(index, SYNC);
			} else {
				om0362Val = valveVal[index];
			};

			pvPut(om0362Val, SYNC);
			if(index < 44)
			{
				om0362LogicProc[index] = proc;
				pvPut(om0362LogicProc[index], SYNC);
			};
		}state CDOM0362
	}
	
}

ss ssOM0362ValveWave
{
	state init
	{
		when(TRUE)
		{
			efClear(evFanout);
		}state MakeOM0362ValveWave
	}

	state MakeOM0362ValveWave
	{
		when(efTestAndClear(evFanout)) 
		{
			int idx = 0;
			for(idx = 0; idx < 44;idx++)
				valvewave[idx] = valveVal[idx];

			pvPut(valvewave, SYNC);
		}state MakeOM0362ValveWave
	}
}

