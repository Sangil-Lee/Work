program CDOM0363Logic
option +r;

%% #include <math.h>

int om0363LogicProc[55];
assign om0363LogicProc to {
"SCL31-BL01:CM01-CV8401:CDLogic.PROC", "SCL31-BL01:CM02-CV8401:CDLogic.PROC", "SCL31-BL01:CM03-CV8401:CDLogic.PROC",
"SCL31-BL01:CM04-CV8401:CDLogic.PROC", "SCL31-BL01:CM05-CV8401:CDLogic.PROC", "SCL31-BL01:CM06-CV8401:CDLogic.PROC",
"SCL31-BL01:CM07-CV8401:CDLogic.PROC", "SCL31-BL01:CM08-CV8401:CDLogic.PROC", "SCL31-BL01:CM09-CV8401:CDLogic.PROC",
"SCL31-BL01:CM10-CV8401:CDLogic.PROC", "SCL31-BL01:CM11-CV8401:CDLogic.PROC", "SCL31-BL01:CM12-CV8401:CDLogic.PROC",
"SCL31-BL01:CM13-CV8401:CDLogic.PROC", "SCL31-BL01:CM14-CV8401:CDLogic.PROC", "SCL31-BL01:CM15-CV8401:CDLogic.PROC",
"SCL31-BL01:CM16-CV8401:CDLogic.PROC", "SCL31-BL01:CM17-CV8401:CDLogic.PROC", "SCL31-BL01:CM18-CV8401:CDLogic.PROC",
"SCL31-BL01:CM19-CV8401:CDLogic.PROC", "SCL31-BL01:CM20-CV8401:CDLogic.PROC", "SCL31-BL01:CM21-CV8401:CDLogic.PROC",
"SCL31-BL01:CM22-CV8401:CDLogic.PROC", "SCL32-BL02:CM01-CV8401:CDLogic.PROC", "SCL32-BL02:CM02-CV8401:CDLogic.PROC",
"SCL32-BL02:CM03-CV8401:CDLogic.PROC", "SCL32-BL02:CM04-CV8401:CDLogic.PROC", "SCL32-BL02:CM05-CV8401:CDLogic.PROC",
"SCL32-BL02:CM06-CV8401:CDLogic.PROC", "SCL32-BL02:CM07-CV8401:CDLogic.PROC", "SCL32-BL02:CM08-CV8401:CDLogic.PROC",
"SCL32-BL02:CM09-CV8401:CDLogic.PROC", "SCL32-BL02:CM10-CV8401:CDLogic.PROC", "SCL32-BL02:CM11-CV8401:CDLogic.PROC",
"SCL32-BL02:CM12-CV8401:CDLogic.PROC", "SCL32-BL02:CM13-CV8401:CDLogic.PROC", "SCL32-BL03:CM01-CV8401:CDLogic.PROC",
"SCL32-BL03:CM02-CV8401:CDLogic.PROC", "SCL32-BL03:CM03-CV8401:CDLogic.PROC", "SCL32-BL03:CM04-CV8401:CDLogic.PROC",
"SCL32-BL03:CM05-CV8401:CDLogic.PROC", "SCL32-BL03:CM06-CV8401:CDLogic.PROC", "SCL32-BL03:CM07-CV8401:CDLogic.PROC",
"SCL32-BL03:CM08-CV8401:CDLogic.PROC", "SCL32-BL03:CM09-CV8401:CDLogic.PROC", "SCL32-BL03:CM10-CV8401:CDLogic.PROC",
"SCL32-BL03:CM11-CV8401:CDLogic.PROC", "SCL32-BL03:CM12-CV8401:CDLogic.PROC", "SCL32-BL03:CM13-CV8401:CDLogic.PROC",
"SCL32-BL03:CM14-CV8401:CDLogic.PROC", "SCL32-BL03:CM15-CV8401:CDLogic.PROC", "SCL32-BL03:CM16-CV8401:CDLogic.PROC",
"SCL32-BL03:CM17-CV8401:CDLogic.PROC", "SCL32-BL03:CM18-CV8401:CDLogic.PROC", "SCL32-BL03:CM19-CV8401:CDLogic.PROC",
"P2DT-BL04:CM01-CV8401:CDLogic.PROC"
};
monitor om0363LogicProc;

float valveVal[55];
assign valveVal to {
"SCL31-BL01:CM01-CV8401:Valve", "SCL31-BL01:CM02-CV8401:Valve", "SCL31-BL01:CM03-CV8401:Valve",
"SCL31-BL01:CM04-CV8401:Valve", "SCL31-BL01:CM05-CV8401:Valve", "SCL31-BL01:CM06-CV8401:Valve",
"SCL31-BL01:CM07-CV8401:Valve", "SCL31-BL01:CM08-CV8401:Valve", "SCL31-BL01:CM09-CV8401:Valve",
"SCL31-BL01:CM10-CV8401:Valve", "SCL31-BL01:CM11-CV8401:Valve", "SCL31-BL01:CM12-CV8401:Valve",
"SCL31-BL01:CM13-CV8401:Valve", "SCL31-BL01:CM14-CV8401:Valve", "SCL31-BL01:CM15-CV8401:Valve",
"SCL31-BL01:CM16-CV8401:Valve", "SCL31-BL01:CM17-CV8401:Valve", "SCL31-BL01:CM18-CV8401:Valve",
"SCL31-BL01:CM19-CV8401:Valve", "SCL31-BL01:CM20-CV8401:Valve", "SCL31-BL01:CM21-CV8401:Valve",
"SCL31-BL01:CM22-CV8401:Valve", "SCL32-BL02:CM01-CV8401:Valve", "SCL32-BL02:CM02-CV8401:Valve",
"SCL32-BL02:CM03-CV8401:Valve", "SCL32-BL02:CM04-CV8401:Valve", "SCL32-BL02:CM05-CV8401:Valve",
"SCL32-BL02:CM06-CV8401:Valve", "SCL32-BL02:CM07-CV8401:Valve", "SCL32-BL02:CM08-CV8401:Valve",
"SCL32-BL02:CM09-CV8401:Valve", "SCL32-BL02:CM10-CV8401:Valve", "SCL32-BL02:CM11-CV8401:Valve",
"SCL32-BL02:CM12-CV8401:Valve", "SCL32-BL02:CM13-CV8401:Valve", "SCL32-BL03:CM01-CV8401:Valve",
"SCL32-BL03:CM02-CV8401:Valve", "SCL32-BL03:CM03-CV8401:Valve", "SCL32-BL03:CM04-CV8401:Valve",
"SCL32-BL03:CM05-CV8401:Valve", "SCL32-BL03:CM06-CV8401:Valve", "SCL32-BL03:CM07-CV8401:Valve",
"SCL32-BL03:CM08-CV8401:Valve", "SCL32-BL03:CM09-CV8401:Valve", "SCL32-BL03:CM10-CV8401:Valve",
"SCL32-BL03:CM11-CV8401:Valve", "SCL32-BL03:CM12-CV8401:Valve", "SCL32-BL03:CM13-CV8401:Valve",
"SCL32-BL03:CM14-CV8401:Valve", "SCL32-BL03:CM15-CV8401:Valve", "SCL32-BL03:CM16-CV8401:Valve",
"SCL32-BL03:CM17-CV8401:Valve", "SCL32-BL03:CM18-CV8401:Valve", "SCL32-BL03:CM19-CV8401:Valve",
"P2DT-BL04:CM01-CV8401:Valve"
};

monitor valveVal;

evflag  evFanout;
sync	valveVal	evFanout;

int index = 0;
assign index to "SCL3:CD-OM0363:IndexPV";
monitor index;

int proc = 1;

float om0363Val;
assign om0363Val to "SCL3:CD-OM0363:Value";
monitor om0363Val;

float cdDelay;
assign cdDelay to "SCL3:CD-OM0363:ScanTime";
monitor cdDelay;

float	valvewave[55];
assign	valvewave to "SCL3:CD-OM0363:ValveWave";
monitor valvewave;


ss ssCDOM0363
{
	state CDOM0363
	{
		when(delay(cdDelay)) 
		{
			if(om0363Val == 5) {
				om0363Val = 0;
				index++;
				pvPut(index, SYNC);
			} else {
				om0363Val = valveVal[index];
			};

			pvPut(om0363Val, SYNC);
			if(index < 55)
			{
				om0363LogicProc[index] = proc;
				pvPut(om0363LogicProc[index], SYNC);
			};
		}state CDOM0363
	}
	
}

ss ssOM0363ValveWave
{
	state init
	{
		when(TRUE)
		{
			efClear(evFanout);
		}state MakeOM0363ValveWave
	}

	state MakeOM0363ValveWave
	{
		when(efTestAndClear(evFanout)) 
		{
			int idx = 0;
			for(idx = 0; idx < 55;idx++)
				valvewave[idx] = valveVal[idx];

			pvPut(valvewave, SYNC);
		}state MakeOM0363ValveWave
	}
}

