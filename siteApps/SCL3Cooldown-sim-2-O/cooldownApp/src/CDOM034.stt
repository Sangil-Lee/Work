program CDOM034Logic
option +r;

%% #include <math.h>

int om034LogicProc[2];
assign om034LogicProc to {
"SCL31-CDL01:EBx01-CV7401:CDLogic.PROC", "SCL31-CDL01:EBx01-CV7402:CDLogic.PROC"
};
monitor om034LogicProc;

float valveVal[2];
assign valveVal to {
"SCL31-CDL01:EBx01-CV7401:Valve", "SCL31-CDL01:EBx01-CV7402:Valve"
};

monitor valveVal;

evflag  evFanout;
sync	valveVal	evFanout;

int index = 0;
assign index to "SCL3:CD-OM034:IndexPV";
monitor index;

int proc = 1;

float om034Val;
assign om034Val to "SCL3:CD-OM034:Value";
monitor om034Val;

float cdDelay;
assign cdDelay to "SCL3:CD-OM034:ScanTime";
monitor cdDelay;

float	valvewave[1];
assign	valvewave to "SCL3:CD-OM034:ValveWave";
monitor valvewave;


ss ssCDOM034
{
	state CDOM034
	{
		when(delay(cdDelay)) 
		{
			if(index == 0)
			{
				if(om034Val == 5) {
					om034Val = 0;
					index++;
					pvPut(index, SYNC);
				} else {
					om034Val = valveVal[index];
				};
			}
			else
			{
				if(om034Val == 50) {
					om034Val = 0;
					index++;
					pvPut(index, SYNC);
				} else {
					om034Val = valveVal[index];
				};
			};


			pvPut(om034Val, SYNC);
			if(index < 2)
			{
				om034LogicProc[index] = proc;
				pvPut(om034LogicProc[index], SYNC);
			};
		}state CDOM034
	}
	
}

ss ssOM034ValveWave
{
	state init
	{
		when(TRUE)
		{
			efClear(evFanout);
		}state MakeOM034ValveWave
	}

	state MakeOM034ValveWave
	{
		when(efTestAndClear(evFanout)) 
		{
			int idx = 0;
			%%for(idx = 0; idx < 2;idx++)
				valvewave[idx] = valveVal[idx];

			pvPut(valvewave, SYNC);
		}state MakeOM034ValveWave
	}
}

