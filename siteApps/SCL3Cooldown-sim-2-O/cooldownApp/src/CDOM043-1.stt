program CDOM0431Logic
option +r;

%% #include <math.h>

int om0431LogicProc[44];
assign om0431LogicProc to {
"P2DT-CDL04:VBx01-CV7401:CDLogic.PROC", "SCL32-CDL03:VBx19-CV7401:CDLogic.PROC", "SCL32-CDL03:VBx18-CV7401:CDLogic.PROC",
"SCL32-CDL03:VBx17-CV7401:CDLogic.PROC", "SCL32-CDL03:VBx16-CV7401:CDLogic.PROC", "SCL32-CDL03:VBx15-CV7401:CDLogic.PROC",
"SCL32-CDL03:VBx14-CV7401:CDLogic.PROC", "SCL32-CDL03:VBx13-CV7401:CDLogic.PROC", "SCL32-CDL03:VBx12-CV7401:CDLogic.PROC",
"SCL32-CDL03:VBx11-CV7401:CDLogic.PROC", "SCL32-CDL03:VBx10-CV7401:CDLogic.PROC", "SCL32-CDL03:VBx09-CV7401:CDLogic.PROC",
"SCL32-CDL03:VBx08-CV7401:CDLogic.PROC", "SCL32-CDL03:VBx07-CV7401:CDLogic.PROC", "SCL32-CDL03:VBx06-CV7401:CDLogic.PROC",
"SCL32-CDL03:VBx05-CV7401:CDLogic.PROC", "SCL32-CDL03:VBx04-CV7401:CDLogic.PROC", "SCL32-CDL03:VBx03-CV7401:CDLogic.PROC",
"SCL32-CDL03:VBx02-CV7401:CDLogic.PROC", "SCL32-CDL03:VBx01-CV7401:CDLogic.PROC", "SCL32-CDL02:VBx13-CV7401:CDLogic.PROC",
"SCL32-CDL02:VBx12-CV7401:CDLogic.PROC", "SCL32-CDL02:VBx11-CV7401:CDLogic.PROC", "SCL32-CDL02:VBx10-CV7401:CDLogic.PROC",
"SCL32-CDL02:VBx09-CV7401:CDLogic.PROC", "SCL32-CDL02:VBx08-CV7401:CDLogic.PROC", "SCL32-CDL02:VBx07-CV7401:CDLogic.PROC",
"SCL32-CDL02:VBx06-CV7401:CDLogic.PROC", "SCL32-CDL02:VBx05-CV7401:CDLogic.PROC", "SCL32-CDL02:VBx04-CV7401:CDLogic.PROC",
"SCL32-CDL02:VBx03-CV7401:CDLogic.PROC", "SCL32-CDL02:VBx02-CV7401:CDLogic.PROC", "SCL32-CDL02:VBx01-CV7401:CDLogic.PROC",
"SCL31-CDL01:VBx22-CV7401:CDLogic.PROC", "SCL31-CDL01:VBx20-CV7401:CDLogic.PROC", "SCL31-CDL01:VBx18-CV7401:CDLogic.PROC",
"SCL31-CDL01:VBx16-CV7401:CDLogic.PROC", "SCL31-CDL01:VBx14-CV7401:CDLogic.PROC", "SCL31-CDL01:VBx12-CV7401:CDLogic.PROC",
"SCL31-CDL01:VBx10-CV7401:CDLogic.PROC", "SCL31-CDL01:VBx08-CV7401:CDLogic.PROC", "SCL31-CDL01:VBx06-CV7401:CDLogic.PROC",
"SCL31-CDL01:VBx04-CV7401:CDLogic.PROC", "SCL31-CDL01:VBx02-CV7401:CDLogic.PROC"
};
monitor om0431LogicProc;

float valveVal[44];
assign valveVal to {
"P2DT-CDL04:VBx01-CV7401:Valve",  "SCL32-CDL03:VBx19-CV7401:Valve", "SCL32-CDL03:VBx18-CV7401:Valve",
"SCL32-CDL03:VBx17-CV7401:Valve", "SCL32-CDL03:VBx16-CV7401:Valve", "SCL32-CDL03:VBx15-CV7401:Valve",
"SCL32-CDL03:VBx14-CV7401:Valve", "SCL32-CDL03:VBx13-CV7401:Valve", "SCL32-CDL03:VBx12-CV7401:Valve",
"SCL32-CDL03:VBx11-CV7401:Valve", "SCL32-CDL03:VBx10-CV7401:Valve", "SCL32-CDL03:VBx09-CV7401:Valve",
"SCL32-CDL03:VBx08-CV7401:Valve", "SCL32-CDL03:VBx07-CV7401:Valve", "SCL32-CDL03:VBx06-CV7401:Valve",
"SCL32-CDL03:VBx05-CV7401:Valve", "SCL32-CDL03:VBx04-CV7401:Valve", "SCL32-CDL03:VBx03-CV7401:Valve",
"SCL32-CDL03:VBx02-CV7401:Valve", "SCL32-CDL03:VBx01-CV7401:Valve", "SCL32-CDL02:VBx13-CV7401:Valve",
"SCL32-CDL02:VBx12-CV7401:Valve", "SCL32-CDL02:VBx11-CV7401:Valve", "SCL32-CDL02:VBx10-CV7401:Valve",
"SCL32-CDL02:VBx09-CV7401:Valve", "SCL32-CDL02:VBx08-CV7401:Valve", "SCL32-CDL02:VBx07-CV7401:Valve",
"SCL32-CDL02:VBx06-CV7401:Valve", "SCL32-CDL02:VBx05-CV7401:Valve", "SCL32-CDL02:VBx04-CV7401:Valve",
"SCL32-CDL02:VBx03-CV7401:Valve", "SCL32-CDL02:VBx02-CV7401:Valve", "SCL32-CDL02:VBx01-CV7401:Valve",
"SCL31-CDL01:VBx22-CV7401:Valve", "SCL31-CDL01:VBx20-CV7401:Valve", "SCL31-CDL01:VBx18-CV7401:Valve",
"SCL31-CDL01:VBx16-CV7401:Valve", "SCL31-CDL01:VBx14-CV7401:Valve", "SCL31-CDL01:VBx12-CV7401:Valve",
"SCL31-CDL01:VBx10-CV7401:Valve", "SCL31-CDL01:VBx08-CV7401:Valve", "SCL31-CDL01:VBx06-CV7401:Valve",
"SCL31-CDL01:VBx04-CV7401:Valve", "SCL31-CDL01:VBx02-CV7401:Valve"
};

monitor valveVal;

evflag  evFanout;
sync	valveVal	evFanout;

int index = 0;
assign index to "SCL3:CD-OM0431:IndexPV";
monitor index;

int proc = 1;

float om0431Val;
assign om0431Val to "SCL3:CD-OM0431:Value";
monitor om0431Val;

float cdDelay;
assign cdDelay to "SCL3:CD-OM0431:ScanTime";
monitor cdDelay;

float	valvewave[44];
assign	valvewave to "SCL3:CD-OM0431:ValveWave";
monitor valvewave;

evflag	efNext;


ss ssCDOM0431
{
	state init
	{
		when(TRUE)
		{
			index = 1;
			pvPut(index, SYNC);
			cdDelay = 10.0;
			pvPut(cdDelay, SYNC);
		}state CDOM0431_1_5
	}

	state CDOM0431_1_5
	{
		when(delay(cdDelay) && index == 1) 
		{
			int idx = 0;
			float value = 0.0;
			int count = 0;
			for(idx = 0; idx < idx+5;idx++)
			{
				om0431LogicProc[idx] = proc;
				pvPut(om0431LogicProc[idx], SYNC);
				value = valveVal[idx];
				if((int)value == 0) count++;
			};

			if(count == 5) efSet(efNext);

		}state CDOM0431_1_5

		when(efTestAndClear(efNext))
		{
			index = 2;
			pvPut(index, SYNC);

		}state CDOM0431_6_10
	}

	state CDOM0431_6_10
	{
		when(delay(cdDelay) && index == 2) 
		{
			int idx = 5;
			float value = 0;
			int count = 0;
			for(idx = 5; idx < idx+5;idx++)
			{
				om0431LogicProc[idx] = proc;
				pvPut(om0431LogicProc[idx], SYNC);
				value = valveVal[idx];
				if((int)value == 0) count++;
			};

			if(count == 5) efSet(efNext);

		}state CDOM0431_6_10

		when(efTestAndClear(efNext))
		{
			index = 3;
			pvPut(index, SYNC);

		}state CDOM0431_11_15
	}

	state CDOM0431_11_15
	{
		when(delay(cdDelay) && index == 3) 
		{
			int idx = 10;
			float value = 0;
			int count = 0;
			for(idx = 10; idx < idx+5; idx++)
			{
				om0431LogicProc[idx] = proc;
				pvPut(om0431LogicProc[idx], SYNC);
				value = valveVal[idx];
				if((int)value == 0) count++;
			};

			if(count == 5) efSet(efNext);

		}state CDOM0431_11_15

		when(efTestAndClear(efNext))
		{
			index = 4;
			pvPut(index, SYNC);

		}state CDOM0431_16_20
	}

	state CDOM0431_16_20
	{
		when(delay(cdDelay) && index == 4) 
		{
			int idx = 15;
			float value = 0;
			int count = 0;
			for(idx = 15; idx < idx+5; idx++)
			{
				om0431LogicProc[idx] = proc;
				pvPut(om0431LogicProc[idx], SYNC);
				value = valveVal[idx];
				if((int)value == 0) count++;
			};

			if(count == 5) efSet(efNext);

		}state CDOM0431_16_20

		when(efTestAndClear(efNext))
		{
			index = 5;
			pvPut(index, SYNC);

		}state CDOM0431_21_25
	}

	state CDOM0431_21_25
	{
		when(delay(cdDelay) && index == 5) 
		{
			int idx = 20;
			float value = 0;
			int count = 0;
			for(idx = 20; idx < idx+5; idx++)
			{
				om0431LogicProc[idx] = proc;
				pvPut(om0431LogicProc[idx], SYNC);
				value = valveVal[idx];
				if((int)value == 0) count++;
			};

			if(count == 5) efSet(efNext);

		}state CDOM0431_21_25

		when(efTestAndClear(efNext))
		{
			index = 6;
			pvPut(index, SYNC);

		}state CDOM0431_26_30
	}

	state CDOM0431_26_30
	{
		when(delay(cdDelay) && index == 6) 
		{
			int idx = 25;
			float value = 0;
			int count = 0;
			for(idx = 25; idx < idx+5; idx++)
			{
				om0431LogicProc[idx] = proc;
				pvPut(om0431LogicProc[idx], SYNC);
				value = valveVal[idx];
				if((int)value == 0) count++;
			};

			if(count == 5) efSet(efNext);

		}state CDOM0431_26_30

		when(efTestAndClear(efNext))
		{
			index = 7;
			pvPut(index, SYNC);

		}state CDOM0431_31_35
	}

	state CDOM0431_31_35
	{
		when(delay(cdDelay) && index == 7) 
		{
			int idx = 30;
			float value = 0;
			int count = 0;
			for(idx = 30; idx < idx+5; idx++)
			{
				om0431LogicProc[idx] = proc;
				pvPut(om0431LogicProc[idx], SYNC);
				value = valveVal[idx];
				if((int)value == 0) count++;
			};

			if(count == 5) efSet(efNext);

		}state CDOM0431_31_35

		when(efTestAndClear(efNext))
		{
			index = 8;
			pvPut(index, SYNC);

		}state CDOM0431_36_40
	}

	state CDOM0431_36_40
	{
		when(delay(cdDelay) && index == 8) 
		{
			int idx = 35;
			float value = 0;
			int count = 0;
			for(idx = 35; idx < idx+5; idx++)
			{
				om0431LogicProc[idx] = proc;
				pvPut(om0431LogicProc[idx], SYNC);
				value = valveVal[idx];
				if((int)value == 0) count++;
			};

			if(count == 5) efSet(efNext);

		}state CDOM0431_36_40

		when(efTestAndClear(efNext))
		{
			index = 9;
			pvPut(index, SYNC);

		}state CDOM0431_41_44
	}

	state CDOM0431_41_44
	{
		when(delay(cdDelay) && index == 9) 
		{
			int idx = 40;
			float value = 0;
			int count = 0;
			for(idx = 40; idx < idx+4; idx++)
			{
				om0431LogicProc[idx] = proc;
				pvPut(om0431LogicProc[idx], SYNC);
				value = valveVal[idx];
				if((int)value == 0) count++;
			};

			if(count == 4) efSet(efNext);

		}state CDOM0431_31_35

		when(efTestAndClear(efNext))
		{
			index = 10;
			pvPut(index, SYNC);

		}state PhaseEndCond
	}

	state PhaseEndCond
	{
		when(delay(cdDelay) && index == 10) 
		{

		}state PhaseEndCond
	}


}

ss ssOM0431ValveWave
{
	state init
	{
		when(TRUE)
		{
			efClear(evFanout);
		}state MakeOM0431ValveWave
	}

	state MakeOM0431ValveWave
	{
		when(efTestAndClear(efNext)) 
		{
			int idx = 0;
			for(idx = 0; idx < 44;idx++)
				valvewave[idx] = valveVal[idx];

			pvPut(valvewave, SYNC);
		}state MakeOM0431ValveWave
	}
}

