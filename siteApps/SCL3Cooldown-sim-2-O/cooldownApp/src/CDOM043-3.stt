program CDOM0433Logic
option +r;

%% #include <math.h>

int om0433LogicProc[22];
assign om0433LogicProc to {
"SCL31-BL01:CM22-CV8402:CDLogic.PROC", "SCL31-BL01:CM21-CV8402:CDLogic.PROC", "SCL31-BL01:CM20-CV8402:CDLogic.PROC", "SCL31-BL01:CM19-CV8402:CDLogic.PROC", "SCL31-BL01:CM18-CV8402:CDLogic.PROC", "SCL31-BL01:CM17-CV8402:CDLogic.PROC",
"SCL31-BL01:CM16-CV8402:CDLogic.PROC", "SCL31-BL01:CM15-CV8402:CDLogic.PROC", "SCL31-BL01:CM14-CV8402:CDLogic.PROC", "SCL31-BL01:CM13-CV8402:CDLogic.PROC", "SCL31-BL01:CM12-CV8402:CDLogic.PROC", "SCL31-BL01:CM11-CV8402:CDLogic.PROC",
"SCL31-BL01:CM10-CV8402:CDLogic.PROC", "SCL31-BL01:CM09-CV8402:CDLogic.PROC", "SCL31-BL01:CM08-CV8402:CDLogic.PROC", "SCL31-BL01:CM07-CV8402:CDLogic.PROC", "SCL31-BL01:CM06-CV8402:CDLogic.PROC", "SCL31-BL01:CM05-CV8402:CDLogic.PROC",
"SCL31-BL01:CM04-CV8402:CDLogic.PROC", "SCL31-BL01:CM03-CV8402:CDLogic.PROC", "SCL31-BL01:CM02-CV8402:CDLogic.PROC", "SCL31-BL01:CM01-CV8402:CDLogic.PROC"
};
monitor om0433LogicProc;

float valveVal[22];
assign valveVal to {
"SCL31-BL01:CM22-CV8402:Valve", "SCL31-BL01:CM21-CV8402:Valve", "SCL31-BL01:CM20-CV8402:Valve", "SCL31-BL01:CM19-CV8402:Valve", "SCL31-BL01:CM18-CV8402:Valve", "SCL31-BL01:CM17-CV8402:Valve",
"SCL31-BL01:CM16-CV8402:Valve", "SCL31-BL01:CM15-CV8402:Valve", "SCL31-BL01:CM14-CV8402:Valve", "SCL31-BL01:CM13-CV8402:Valve", "SCL31-BL01:CM12-CV8402:Valve", "SCL31-BL01:CM11-CV8402:Valve",
"SCL31-BL01:CM10-CV8402:Valve", "SCL31-BL01:CM09-CV8402:Valve", "SCL31-BL01:CM08-CV8402:Valve", "SCL31-BL01:CM07-CV8402:Valve", "SCL31-BL01:CM06-CV8402:Valve", "SCL31-BL01:CM05-CV8402:Valve",
"SCL31-BL01:CM04-CV8402:Valve", "SCL31-BL01:CM03-CV8402:Valve", "SCL31-BL01:CM02-CV8402:Valve", "SCL31-BL01:CM01-CV8402:Valve"
};

monitor valveVal;

evflag  evFanout;
sync	valveVal	evFanout;

int index = 0;
assign index to "SCL3:CD-OM0433:IndexPV";
monitor index;

int proc = 1;

float om0433Val;
assign om0433Val to "SCL3:CD-OM0433:Value";
monitor om0433Val;

float cdDelay;
assign cdDelay to "SCL3:CD-OM0433:ScanTime";
monitor cdDelay;

float	valvewave[22];
assign	valvewave to "SCL3:CD-OM0433:ValveWave";
monitor valvewave;

evflag	efNext;


ss ssCDOM0433
{
	state init
	{
		when(TRUE)
		{
			index = 1;
			pvPut(index, SYNC);
			cdDelay = 10.0;
			pvPut(cdDelay, SYNC);
		}state CDOM0433
	}

	state CDOM0433
	{
		when(delay(cdDelay)) 
		{
			int idx = 0;
			float value = 0.0;
			int count = 0;
			int until = 0;

			idx = (index*6)-6;

			if(index == 4) {
				until = idx+4;
			} else {
				until = idx+6;
			};

			for(; idx < until;idx++)
			{
				om0433LogicProc[idx] = proc;
				pvPut(om0433LogicProc[idx], SYNC);
				value = valveVal[idx];
				if((int)value == 0) count++;
			};

			if(index == 4) {
				if(count == 4) efSet(efNext);
			} else {
				if(count == 6) efSet(efNext);
			};

		}state CDOM0433

		when(efTestAndClear(efNext))
		{
			index++;
			pvPut(index, SYNC);
		}state CDOM0433

		//PhaseEndCond -> index == 5 && Done -> Transition
	}
}

ss ssOM0433ValveWave
{
	state init
	{
		when(TRUE)
		{
			efClear(evFanout);
		}state MakeOM0433ValveWave
	}

	state MakeOM0433ValveWave
	{
		when(efTestAndClear(evFanout)) 
		{
			int idx = 0;
			for(; idx < 22;idx++)
				valvewave[idx] = valveVal[idx];

			pvPut(valvewave, SYNC);
		}state MakeOM0433ValveWave
	}
}

