program CDFanoutLogic
option +r;

%% #include <math.h>

int logicProc[77];
assign logicProc to {
"SCL31-CDL01:VBx02-CV7301:CDLogic.PROC","SCL31-CDL01:VBx04-CV7301:CDLogic.PROC","SCL31-CDL01:VBx06-CV7301:CDLogic.PROC",
"SCL31-CDL01:VBx08-CV7301:CDLogic.PROC","SCL31-CDL01:VBx10-CV7301:CDLogic.PROC","SCL31-CDL01:VBx12-CV7301:CDLogic.PROC",
"SCL31-CDL01:VBx14-CV7301:CDLogic.PROC","SCL31-CDL01:VBx16-CV7301:CDLogic.PROC","SCL31-CDL01:VBx18-CV7301:CDLogic.PROC",
"SCL31-CDL01:VBx20-CV7301:CDLogic.PROC","SCL31-CDL01:VBx22-CV7301:CDLogic.PROC","SCL32-CDL02:VBx01-CV7301:CDLogic.PROC",
"SCL32-CDL02:VBx01-CV7201:CDLogic.PROC","SCL32-CDL02:VBx02-CV7301:CDLogic.PROC","SCL32-CDL02:VBx02-CV7201:CDLogic.PROC",
"SCL32-CDL02:VBx03-CV7301:CDLogic.PROC","SCL32-CDL02:VBx03-CV7201:CDLogic.PROC","SCL32-CDL02:VBx04-CV7301:CDLogic.PROC",
"SCL32-CDL02:VBx04-CV7201:CDLogic.PROC","SCL32-CDL02:VBx05-CV7301:CDLogic.PROC","SCL32-CDL02:VBx05-CV7201:CDLogic.PROC",
"SCL32-CDL02:VBx06-CV7301:CDLogic.PROC","SCL32-CDL02:VBx06-CV7201:CDLogic.PROC","SCL32-CDL02:VBx07-CV7301:CDLogic.PROC",
"SCL32-CDL02:VBx07-CV7201:CDLogic.PROC","SCL32-CDL02:VBx08-CV7301:CDLogic.PROC","SCL32-CDL02:VBx08-CV7201:CDLogic.PROC",
"SCL32-CDL02:VBx09-CV7301:CDLogic.PROC","SCL32-CDL02:VBx09-CV7201:CDLogic.PROC","SCL32-CDL02:VBx10-CV7301:CDLogic.PROC",
"SCL32-CDL02:VBx10-CV7201:CDLogic.PROC","SCL32-CDL02:VBx11-CV7301:CDLogic.PROC","SCL32-CDL02:VBx11-CV7201:CDLogic.PROC",
"SCL32-CDL02:VBx12-CV7301:CDLogic.PROC","SCL32-CDL02:VBx12-CV7201:CDLogic.PROC","SCL32-CDL02:VBx13-CV7301:CDLogic.PROC",
"SCL32-CDL02:VBx13-CV7201:CDLogic.PROC","SCL32-CDL03:VBx01-CV7301:CDLogic.PROC","SCL32-CDL03:VBx01-CV7201:CDLogic.PROC",
"SCL32-CDL03:VBx02-CV7301:CDLogic.PROC","SCL32-CDL03:VBx02-CV7201:CDLogic.PROC","SCL32-CDL03:VBx03-CV7301:CDLogic.PROC",
"SCL32-CDL03:VBx03-CV7201:CDLogic.PROC","SCL32-CDL03:VBx04-CV7301:CDLogic.PROC","SCL32-CDL03:VBx04-CV7201:CDLogic.PROC",
"SCL32-CDL03:VBx05-CV7301:CDLogic.PROC","SCL32-CDL03:VBx05-CV7201:CDLogic.PROC","SCL32-CDL03:VBx06-CV7301:CDLogic.PROC",
"SCL32-CDL03:VBx06-CV7201:CDLogic.PROC","SCL32-CDL03:VBx07-CV7301:CDLogic.PROC","SCL32-CDL03:VBx07-CV7201:CDLogic.PROC",
"SCL32-CDL03:VBx08-CV7301:CDLogic.PROC","SCL32-CDL03:VBx08-CV7201:CDLogic.PROC","SCL32-CDL03:VBx09-CV7301:CDLogic.PROC",
"SCL32-CDL03:VBx09-CV7201:CDLogic.PROC","SCL32-CDL03:VBx10-CV7301:CDLogic.PROC","SCL32-CDL03:VBx10-CV7201:CDLogic.PROC",
"SCL32-CDL03:VBx11-CV7301:CDLogic.PROC","SCL32-CDL03:VBx11-CV7201:CDLogic.PROC","SCL32-CDL03:VBx12-CV7301:CDLogic.PROC",
"SCL32-CDL03:VBx12-CV7201:CDLogic.PROC","SCL32-CDL03:VBx13-CV7301:CDLogic.PROC","SCL32-CDL03:VBx13-CV7201:CDLogic.PROC",
"SCL32-CDL03:VBx14-CV7301:CDLogic.PROC","SCL32-CDL03:VBx14-CV7201:CDLogic.PROC","SCL32-CDL03:VBx15-CV7301:CDLogic.PROC",
"SCL32-CDL03:VBx15-CV7201:CDLogic.PROC","SCL32-CDL03:VBx16-CV7301:CDLogic.PROC","SCL32-CDL03:VBx16-CV7201:CDLogic.PROC",
"SCL32-CDL03:VBx17-CV7301:CDLogic.PROC","SCL32-CDL03:VBx17-CV7201:CDLogic.PROC","SCL32-CDL03:VBx18-CV7301:CDLogic.PROC",
"SCL32-CDL03:VBx18-CV7201:CDLogic.PROC","SCL32-CDL03:VBx19-CV7301:CDLogic.PROC","SCL32-CDL03:VBx19-CV7201:CDLogic.PROC",
"P2DT-CDL04:VBx01-CV7301:CDLogic.PROC","P2DT-CDL04:VBx01-CV7201:CDLogic.PROC"
};
monitor logicProc;

float valveVal[77];
assign valveVal to {
"SCL31-CDL01:VBx02-CV7301:Valve","SCL31-CDL01:VBx04-CV7301:Valve","SCL31-CDL01:VBx06-CV7301:Valve",
"SCL31-CDL01:VBx08-CV7301:Valve","SCL31-CDL01:VBx10-CV7301:Valve","SCL31-CDL01:VBx12-CV7301:Valve",
"SCL31-CDL01:VBx14-CV7301:Valve","SCL31-CDL01:VBx16-CV7301:Valve","SCL31-CDL01:VBx18-CV7301:Valve",
"SCL31-CDL01:VBx20-CV7301:Valve","SCL31-CDL01:VBx22-CV7301:Valve","SCL32-CDL02:VBx01-CV7301:Valve",
"SCL32-CDL02:VBx01-CV7201:Valve","SCL32-CDL02:VBx02-CV7301:Valve","SCL32-CDL02:VBx02-CV7201:Valve",
"SCL32-CDL02:VBx03-CV7301:Valve","SCL32-CDL02:VBx03-CV7201:Valve","SCL32-CDL02:VBx04-CV7301:Valve",
"SCL32-CDL02:VBx04-CV7201:Valve","SCL32-CDL02:VBx05-CV7301:Valve","SCL32-CDL02:VBx05-CV7201:Valve",
"SCL32-CDL02:VBx06-CV7301:Valve","SCL32-CDL02:VBx06-CV7201:Valve","SCL32-CDL02:VBx07-CV7301:Valve",
"SCL32-CDL02:VBx07-CV7201:Valve","SCL32-CDL02:VBx08-CV7301:Valve","SCL32-CDL02:VBx08-CV7201:Valve",
"SCL32-CDL02:VBx09-CV7301:Valve","SCL32-CDL02:VBx09-CV7201:Valve","SCL32-CDL02:VBx10-CV7301:Valve",
"SCL32-CDL02:VBx10-CV7201:Valve","SCL32-CDL02:VBx11-CV7301:Valve","SCL32-CDL02:VBx11-CV7201:Valve",
"SCL32-CDL02:VBx12-CV7301:Valve","SCL32-CDL02:VBx12-CV7201:Valve","SCL32-CDL02:VBx13-CV7301:Valve",
"SCL32-CDL02:VBx13-CV7201:Valve","SCL32-CDL03:VBx01-CV7301:Valve","SCL32-CDL03:VBx01-CV7201:Valve",
"SCL32-CDL03:VBx02-CV7301:Valve","SCL32-CDL03:VBx02-CV7201:Valve","SCL32-CDL03:VBx03-CV7301:Valve",
"SCL32-CDL03:VBx03-CV7201:Valve","SCL32-CDL03:VBx04-CV7301:Valve","SCL32-CDL03:VBx04-CV7201:Valve",
"SCL32-CDL03:VBx05-CV7301:Valve","SCL32-CDL03:VBx05-CV7201:Valve","SCL32-CDL03:VBx06-CV7301:Valve",
"SCL32-CDL03:VBx06-CV7201:Valve","SCL32-CDL03:VBx07-CV7301:Valve","SCL32-CDL03:VBx07-CV7201:Valve",
"SCL32-CDL03:VBx08-CV7301:Valve","SCL32-CDL03:VBx08-CV7201:Valve","SCL32-CDL03:VBx09-CV7301:Valve",
"SCL32-CDL03:VBx09-CV7201:Valve","SCL32-CDL03:VBx10-CV7301:Valve","SCL32-CDL03:VBx10-CV7201:Valve",
"SCL32-CDL03:VBx11-CV7301:Valve","SCL32-CDL03:VBx11-CV7201:Valve","SCL32-CDL03:VBx12-CV7301:Valve",
"SCL32-CDL03:VBx12-CV7201:Valve","SCL32-CDL03:VBx13-CV7301:Valve","SCL32-CDL03:VBx13-CV7201:Valve",
"SCL32-CDL03:VBx14-CV7301:Valve","SCL32-CDL03:VBx14-CV7201:Valve","SCL32-CDL03:VBx15-CV7301:Valve",
"SCL32-CDL03:VBx15-CV7201:Valve","SCL32-CDL03:VBx16-CV7301:Valve","SCL32-CDL03:VBx16-CV7201:Valve",
"SCL32-CDL03:VBx17-CV7301:Valve","SCL32-CDL03:VBx17-CV7201:Valve","SCL32-CDL03:VBx18-CV7301:Valve",
"SCL32-CDL03:VBx18-CV7201:Valve","SCL32-CDL03:VBx19-CV7301:Valve","SCL32-CDL03:VBx19-CV7201:Valve",
"P2DT-CDL04:VBx01-CV7301:Valve","P2DT-CDL04:VBx01-CV7201:Valve"
};
monitor valveVal;

evflag  evFanout;
sync	valveVal	evFanout;

int index = 0;
assign index to "SCL3:Cooldown:IndexPV";
monitor index;

int proc = 1;

float cdFOVal;
assign cdFOVal to "SCL3:Cooldown:FanoutValue";
monitor cdFOVal;

float	valvewave[77];
assign	valvewave to "SCL3:Cooldown:ValveTot";
monitor valvewave;

ss ss_cdfanout
{
	state CDFanout
	{
		when(delay(5.0)) 
		{
			if(cdFOVal == 100) {
				cdFOVal = 0;
				index++;
				pvPut(index, SYNC);
			} else {
				cdFOVal = valveVal[index];
			};
			pvPut(cdFOVal, SYNC);
			logicProc[index] = proc;
			pvPut(logicProc[index], SYNC);
		}state CDFanout
	}
}

ss ss_valvewave
{
	state init
	{
		when(TRUE)
		{
			efClear(evFanout);
		}state MakeValveWave
	}

	state MakeValveWave
	{
		when(efTestAndClear(evFanout)) 
		{
			int index = 0;
			%%for(index = 0; index < 77;index++)
				valvewave[index] = valveVal[index];

			pvPut(valvewave, SYNC);
		}state MakeValveWave
	}
}

