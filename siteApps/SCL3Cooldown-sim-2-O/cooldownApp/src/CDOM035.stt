program CDOM035Logic
option +r;

%% #include <math.h>

int om035LogicProc[2];
assign om035LogicProc to {
"Cryo-CDL00:TBx01-CV7302:CDLogic.PROC", "SCL32-CDL02:VBx01-CV7302:CDLogic.PROC"
};
monitor om035LogicProc;

float valveVal[2];
assign valveVal to {
"Cryo-CDL00:TBx01-CV7302:Valve", "SCL32-CDL02:VBx01-CV7302:Valve"
};

monitor valveVal;

evflag  evFanout;
sync	valveVal	evFanout;

int index = 0;
assign index to "SCL3:CD-OM035:IndexPV";
monitor index;

int proc = 1;

float om035Val;
assign om035Val to "SCL3:CD-OM035:Value";
monitor om035Val;

float cdDelay;
assign cdDelay to "SCL3:CD-OM035:ScanTime";
monitor cdDelay;

float	valvewave[1];
assign	valvewave to "SCL3:CD-OM035:ValveWave";
monitor valvewave;


ss ssCDOM035
{
	state CDOM035
	{
		when(delay(cdDelay)) 
		{
			int idx = 0;
			for(idx = 0; idx < 2; idx++)
			{
				om035LogicProc[idx] = proc;
				pvPut(om035LogicProc[idx], SYNC);
			};
		}state CDOM035
	}
	
}

ss ssOM035ValveWave
{
	state init
	{
		when(TRUE)
		{
			efClear(evFanout);
		}state MakeOM035ValveWave
	}

	state MakeOM035ValveWave
	{
		when(efTestAndClear(evFanout)) 
		{
			int idx = 0;
			for(idx = 0; idx < 2;idx++)
				valvewave[idx] = valveVal[idx];

			pvPut(valvewave, SYNC);
		}state MakeOM035ValveWave
	}
}

