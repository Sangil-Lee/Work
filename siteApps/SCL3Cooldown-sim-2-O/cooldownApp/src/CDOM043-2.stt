program CDOM0432Logic
option +r;

%% #include <math.h>

int om0432LogicProc[66];
assign om0432LogicProc to {
"P2DT-BL04:CM01-CV8403:CDLogic.PROC",  "SCL32-BL03:CM19-CV8403:CDLogic.PROC", "SCL32-BL03:CM18-CV8403:CDLogic.PROC", "SCL32-BL03:CM17-CV8403:CDLogic.PROC", "SCL32-BL03:CM16-CV8403:CDLogic.PROC",
"SCL32-BL03:CM15-CV8403:CDLogic.PROC", "SCL32-BL03:CM14-CV8403:CDLogic.PROC", "SCL32-BL03:CM13-CV8403:CDLogic.PROC", "SCL32-BL03:CM12-CV8403:CDLogic.PROC", "SCL32-BL03:CM11-CV8403:CDLogic.PROC",
"SCL32-BL03:CM10-CV8403:CDLogic.PROC", "SCL32-BL03:CM09-CV8403:CDLogic.PROC", "SCL32-BL03:CM08-CV8403:CDLogic.PROC", "SCL32-BL03:CM07-CV8403:CDLogic.PROC", "SCL32-BL03:CM06-CV8403:CDLogic.PROC",
"SCL32-BL03:CM05-CV8403:CDLogic.PROC", "SCL32-BL03:CM04-CV8403:CDLogic.PROC", "SCL32-BL03:CM03-CV8403:CDLogic.PROC", "SCL32-BL03:CM02-CV8403:CDLogic.PROC", "SCL32-BL03:CM01-CV8403:CDLogic.PROC",
"SCL32-BL02:CM13-CV8403:CDLogic.PROC", "SCL32-BL02:CM12-CV8403:CDLogic.PROC", "SCL32-BL02:CM11-CV8403:CDLogic.PROC", "SCL32-BL02:CM10-CV8403:CDLogic.PROC", "SCL32-BL02:CM09-CV8403:CDLogic.PROC",
"SCL32-BL02:CM08-CV8403:CDLogic.PROC", "SCL32-BL02:CM07-CV8403:CDLogic.PROC", "SCL32-BL02:CM06-CV8403:CDLogic.PROC", "SCL32-BL02:CM05-CV8403:CDLogic.PROC", "SCL32-BL02:CM04-CV8403:CDLogic.PROC",
"SCL32-BL02:CM03-CV8403:CDLogic.PROC", "SCL32-BL02:CM02-CV8403:CDLogic.PROC", "SCL32-BL02:CM01-CV8403:CDLogic.PROC", 
"P2DT-BL04:CM01-CV8402:CDLogic.PROC",  "SCL32-BL03:CM19-CV8402:CDLogic.PROC", "SCL32-BL03:CM18-CV8402:CDLogic.PROC", "SCL32-BL03:CM17-CV8402:CDLogic.PROC", "SCL32-BL03:CM16-CV8402:CDLogic.PROC",
"SCL32-BL03:CM15-CV8402:CDLogic.PROC", "SCL32-BL03:CM14-CV8402:CDLogic.PROC", "SCL32-BL03:CM13-CV8402:CDLogic.PROC", "SCL32-BL03:CM12-CV8402:CDLogic.PROC", "SCL32-BL03:CM11-CV8402:CDLogic.PROC",
"SCL32-BL03:CM10-CV8402:CDLogic.PROC", "SCL32-BL03:CM09-CV8402:CDLogic.PROC", "SCL32-BL03:CM08-CV8402:CDLogic.PROC", "SCL32-BL03:CM07-CV8402:CDLogic.PROC", "SCL32-BL03:CM06-CV8402:CDLogic.PROC",
"SCL32-BL03:CM05-CV8402:CDLogic.PROC", "SCL32-BL03:CM04-CV8402:CDLogic.PROC", "SCL32-BL03:CM03-CV8402:CDLogic.PROC", "SCL32-BL03:CM02-CV8402:CDLogic.PROC", "SCL32-BL03:CM01-CV8402:CDLogic.PROC",
"SCL32-BL02:CM13-CV8402:CDLogic.PROC", "SCL32-BL02:CM12-CV8402:CDLogic.PROC", "SCL32-BL02:CM11-CV8402:CDLogic.PROC", "SCL32-BL02:CM10-CV8402:CDLogic.PROC", "SCL32-BL02:CM09-CV8402:CDLogic.PROC",
"SCL32-BL02:CM08-CV8402:CDLogic.PROC", "SCL32-BL02:CM07-CV8402:CDLogic.PROC", "SCL32-BL02:CM06-CV8402:CDLogic.PROC", "SCL32-BL02:CM05-CV8402:CDLogic.PROC", "SCL32-BL02:CM04-CV8402:CDLogic.PROC",
"SCL32-BL02:CM03-CV8402:CDLogic.PROC", "SCL32-BL02:CM02-CV8402:CDLogic.PROC", "SCL32-BL02:CM01-CV8402:CDLogic.PROC"
};
monitor om0432LogicProc;

float valveVal[66];
assign valveVal to {
"P2DT-BL04:CM01-CV8403:Valve",  "SCL32-BL03:CM19-CV8403:Valve", "SCL32-BL03:CM18-CV8403:Valve", "SCL32-BL03:CM17-CV8403:Valve", "SCL32-BL03:CM16-CV8403:Valve",
"SCL32-BL03:CM15-CV8403:Valve", "SCL32-BL03:CM14-CV8403:Valve", "SCL32-BL03:CM13-CV8403:Valve", "SCL32-BL03:CM12-CV8403:Valve", "SCL32-BL03:CM11-CV8403:Valve",
"SCL32-BL03:CM10-CV8403:Valve", "SCL32-BL03:CM09-CV8403:Valve", "SCL32-BL03:CM08-CV8403:Valve", "SCL32-BL03:CM07-CV8403:Valve", "SCL32-BL03:CM06-CV8403:Valve",
"SCL32-BL03:CM05-CV8403:Valve", "SCL32-BL03:CM04-CV8403:Valve", "SCL32-BL03:CM03-CV8403:Valve", "SCL32-BL03:CM02-CV8403:Valve", "SCL32-BL03:CM01-CV8403:Valve",
"SCL32-BL02:CM13-CV8403:Valve", "SCL32-BL02:CM12-CV8403:Valve", "SCL32-BL02:CM11-CV8403:Valve", "SCL32-BL02:CM10-CV8403:Valve", "SCL32-BL02:CM09-CV8403:Valve",
"SCL32-BL02:CM08-CV8403:Valve", "SCL32-BL02:CM07-CV8403:Valve", "SCL32-BL02:CM06-CV8403:Valve", "SCL32-BL02:CM05-CV8403:Valve", "SCL32-BL02:CM04-CV8403:Valve",
"SCL32-BL02:CM03-CV8403:Valve", "SCL32-BL02:CM02-CV8403:Valve", "SCL32-BL02:CM01-CV8403:Valve", 
"P2DT-BL04:CM01-CV8402:Valve",  "SCL32-BL03:CM19-CV8402:Valve", "SCL32-BL03:CM18-CV8402:Valve", "SCL32-BL03:CM17-CV8402:Valve", "SCL32-BL03:CM16-CV8402:Valve",
"SCL32-BL03:CM15-CV8402:Valve", "SCL32-BL03:CM14-CV8402:Valve", "SCL32-BL03:CM13-CV8402:Valve", "SCL32-BL03:CM12-CV8402:Valve", "SCL32-BL03:CM11-CV8402:Valve",
"SCL32-BL03:CM10-CV8402:Valve", "SCL32-BL03:CM09-CV8402:Valve", "SCL32-BL03:CM08-CV8402:Valve", "SCL32-BL03:CM07-CV8402:Valve", "SCL32-BL03:CM06-CV8402:Valve",
"SCL32-BL03:CM05-CV8402:Valve", "SCL32-BL03:CM04-CV8402:Valve", "SCL32-BL03:CM03-CV8402:Valve", "SCL32-BL03:CM02-CV8402:Valve", "SCL32-BL03:CM01-CV8402:Valve",
"SCL32-BL02:CM13-CV8402:Valve", "SCL32-BL02:CM12-CV8402:Valve", "SCL32-BL02:CM11-CV8402:Valve", "SCL32-BL02:CM10-CV8402:Valve", "SCL32-BL02:CM09-CV8402:Valve",
"SCL32-BL02:CM08-CV8402:Valve", "SCL32-BL02:CM07-CV8402:Valve", "SCL32-BL02:CM06-CV8402:Valve", "SCL32-BL02:CM05-CV8402:Valve", "SCL32-BL02:CM04-CV8402:Valve",
"SCL32-BL02:CM03-CV8402:Valve", "SCL32-BL02:CM02-CV8402:Valve", "SCL32-BL02:CM01-CV8402:Valve"
};
monitor valveVal;

evflag  evFanout;
sync	valveVal	evFanout;

int index = 0;
assign index to "SCL3:CD-OM0432:IndexPV";
monitor index;

int proc = 1;

float om0432Val;
assign om0432Val to "SCL3:CD-OM0432:Value";
monitor om0432Val;

float cdDelay;
assign cdDelay to "SCL3:CD-OM0432:ScanTime";
monitor cdDelay;

float	valvewave[66];
assign	valvewave to "SCL3:CD-OM0432:ValveWave";
monitor valvewave;

evflag	efNext;

ss ssCDOM0432
{
	state init
	{
		when(TRUE)
		{
			index = 1;
			pvPut(index, SYNC);
			cdDelay = 10.0;
			pvPut(cdDelay, SYNC);
		}state CDOM0432
	}

	state CDOM0432
	{
		//when(delay(cdDelay) && index == 1) 
		when(delay(cdDelay)) 
		{
			int idx = 0;
			float value = 0.0;
			int count = 0;
			int until = 0;

			idx = (index*5)-5;

			if(index == 7 || index == 14) {
				until = idx+3;
			} else {
				until = idx+5;
			};

			for(; idx < until;idx++)
			{
				om0432LogicProc[idx] = proc;
				pvPut(om0432LogicProc[idx], SYNC);
				value = valveVal[idx];
				if((int)value == 0) count++;
			};

			if(index == 7 || index == 14) {
				if(count == 3) efSet(efNext);
			} else {
				if(count == 5) efSet(efNext);
			};

		}state CDOM0432

		when(efTestAndClear(efNext))
		{
			index++;
			pvPut(index, SYNC);
		}state CDOM0432

		//PhaseEndCond -> index == 15 && Done -> Transition
	}
	
}

ss ssOM0432ValveWave
{
	state init
	{
		when(TRUE)
		{
			efClear(evFanout);
		}state MakeOM0432ValveWave
	}

	state MakeOM0432ValveWave
	{
		when(efTestAndClear(evFanout)) 
		{
			int idx = 0;
			%%for(idx = 0; idx < 66;idx++)
				valvewave[idx] = valveVal[idx];

			pvPut(valvewave, SYNC);
		}state MakeOM0432ValveWave
	}
}

