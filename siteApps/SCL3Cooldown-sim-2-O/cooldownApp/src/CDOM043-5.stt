program CDOM0435Logic
option +r;

%% #include <math.h>

int om0435LogicProc[55];
assign om0435LogicProc to {
"P2DT-BL04:CM01-CV8401:CDLogic.PROC",  "SCL32-BL03:CM19-CV8401:CDLogic.PROC", "SCL32-BL03:CM18-CV8401:CDLogic.PROC", "SCL32-BL03:CM17-CV8401:CDLogic.PROC", "SCL32-BL03:CM16-CV8401:CDLogic.PROC",
"SCL32-BL03:CM15-CV8401:CDLogic.PROC", "SCL32-BL03:CM14-CV8401:CDLogic.PROC", "SCL32-BL03:CM13-CV8401:CDLogic.PROC", "SCL32-BL03:CM12-CV8401:CDLogic.PROC", "SCL32-BL03:CM11-CV8401:CDLogic.PROC",
"SCL32-BL03:CM10-CV8401:CDLogic.PROC", "SCL32-BL03:CM09-CV8401:CDLogic.PROC", "SCL32-BL03:CM08-CV8401:CDLogic.PROC", "SCL32-BL03:CM07-CV8401:CDLogic.PROC", "SCL32-BL03:CM06-CV8401:CDLogic.PROC",
"SCL32-BL03:CM05-CV8401:CDLogic.PROC", "SCL32-BL03:CM04-CV8401:CDLogic.PROC", "SCL32-BL03:CM03-CV8401:CDLogic.PROC", "SCL32-BL03:CM02-CV8401:CDLogic.PROC", "SCL32-BL03:CM01-CV8401:CDLogic.PROC",
"SCL32-BL02:CM13-CV8401:CDLogic.PROC", "SCL32-BL02:CM12-CV8401:CDLogic.PROC", "SCL32-BL02:CM11-CV8401:CDLogic.PROC", "SCL32-BL02:CM10-CV8401:CDLogic.PROC", "SCL32-BL02:CM09-CV8401:CDLogic.PROC",
"SCL32-BL02:CM08-CV8401:CDLogic.PROC", "SCL32-BL02:CM07-CV8401:CDLogic.PROC", "SCL32-BL02:CM06-CV8401:CDLogic.PROC", "SCL32-BL02:CM05-CV8401:CDLogic.PROC", "SCL32-BL02:CM04-CV8401:CDLogic.PROC",
"SCL32-BL02:CM03-CV8401:CDLogic.PROC", "SCL32-BL02:CM02-CV8401:CDLogic.PROC", "SCL32-BL02:CM01-CV8401:CDLogic.PROC", "SCL31-BL01:CM22-CV8401:CDLogic.PROC", "SCL31-BL01:CM21-CV8401:CDLogic.PROC",
"SCL31-BL01:CM20-CV8401:CDLogic.PROC", "SCL31-BL01:CM19-CV8401:CDLogic.PROC", "SCL31-BL01:CM18-CV8401:CDLogic.PROC", "SCL31-BL01:CM17-CV8401:CDLogic.PROC", "SCL31-BL01:CM16-CV8401:CDLogic.PROC",
"SCL31-BL01:CM15-CV8401:CDLogic.PROC", "SCL31-BL01:CM14-CV8401:CDLogic.PROC", "SCL31-BL01:CM13-CV8401:CDLogic.PROC", "SCL31-BL01:CM12-CV8401:CDLogic.PROC", "SCL31-BL01:CM11-CV8401:CDLogic.PROC",
"SCL31-BL01:CM10-CV8401:CDLogic.PROC", "SCL31-BL01:CM09-CV8401:CDLogic.PROC", "SCL31-BL01:CM08-CV8401:CDLogic.PROC", "SCL31-BL01:CM07-CV8401:CDLogic.PROC", "SCL31-BL01:CM06-CV8401:CDLogic.PROC",
"SCL31-BL01:CM05-CV8401:CDLogic.PROC", "SCL31-BL01:CM04-CV8401:CDLogic.PROC", "SCL31-BL01:CM03-CV8401:CDLogic.PROC", "SCL31-BL01:CM02-CV8401:CDLogic.PROC", "SCL31-BL01:CM01-CV8401:CDLogic.PROC"
};
monitor om0435LogicProc;

float valveVal[55];
assign valveVal to {
"P2DT-BL04:CM01-CV8401:Valve",  "SCL32-BL03:CM19-CV8401:Valve", "SCL32-BL03:CM18-CV8401:Valve", "SCL32-BL03:CM17-CV8401:Valve", "SCL32-BL03:CM16-CV8401:Valve",
"SCL32-BL03:CM15-CV8401:Valve", "SCL32-BL03:CM14-CV8401:Valve", "SCL32-BL03:CM13-CV8401:Valve", "SCL32-BL03:CM12-CV8401:Valve", "SCL32-BL03:CM11-CV8401:Valve",
"SCL32-BL03:CM10-CV8401:Valve", "SCL32-BL03:CM09-CV8401:Valve", "SCL32-BL03:CM08-CV8401:Valve", "SCL32-BL03:CM07-CV8401:Valve", "SCL32-BL03:CM06-CV8401:Valve",
"SCL32-BL03:CM05-CV8401:Valve", "SCL32-BL03:CM04-CV8401:Valve", "SCL32-BL03:CM03-CV8401:Valve", "SCL32-BL03:CM02-CV8401:Valve", "SCL32-BL03:CM01-CV8401:Valve",
"SCL32-BL02:CM13-CV8401:Valve", "SCL32-BL02:CM12-CV8401:Valve", "SCL32-BL02:CM11-CV8401:Valve", "SCL32-BL02:CM10-CV8401:Valve", "SCL32-BL02:CM09-CV8401:Valve",
"SCL32-BL02:CM08-CV8401:Valve", "SCL32-BL02:CM07-CV8401:Valve", "SCL32-BL02:CM06-CV8401:Valve", "SCL32-BL02:CM05-CV8401:Valve", "SCL32-BL02:CM04-CV8401:Valve",
"SCL32-BL02:CM03-CV8401:Valve", "SCL32-BL02:CM02-CV8401:Valve", "SCL32-BL02:CM01-CV8401:Valve", "SCL31-BL01:CM22-CV8401:Valve", "SCL31-BL01:CM21-CV8401:Valve",
"SCL31-BL01:CM20-CV8401:Valve", "SCL31-BL01:CM19-CV8401:Valve", "SCL31-BL01:CM18-CV8401:Valve", "SCL31-BL01:CM17-CV8401:Valve", "SCL31-BL01:CM16-CV8401:Valve",
"SCL31-BL01:CM15-CV8401:Valve", "SCL31-BL01:CM14-CV8401:Valve", "SCL31-BL01:CM13-CV8401:Valve", "SCL31-BL01:CM12-CV8401:Valve", "SCL31-BL01:CM11-CV8401:Valve",
"SCL31-BL01:CM10-CV8401:Valve", "SCL31-BL01:CM09-CV8401:Valve", "SCL31-BL01:CM08-CV8401:Valve", "SCL31-BL01:CM07-CV8401:Valve", "SCL31-BL01:CM06-CV8401:Valve",
"SCL31-BL01:CM05-CV8401:Valve", "SCL31-BL01:CM04-CV8401:Valve", "SCL31-BL01:CM03-CV8401:Valve", "SCL31-BL01:CM02-CV8401:Valve", "SCL31-BL01:CM01-CV8401:Valve"
};

monitor valveVal;

evflag  evFanout;
sync	valveVal	evFanout;

int index = 0;
assign index to "SCL3:CD-OM0435:IndexPV";
monitor index;

int proc = 1;

float om0435Val;
assign om0435Val to "SCL3:CD-OM0435:Value";
monitor om0435Val;

float cdDelay;
assign cdDelay to "SCL3:CD-OM0435:ScanTime";
monitor cdDelay;

float	valvewave[55];
assign	valvewave to "SCL3:CD-OM0435:ValveWave";
monitor valvewave;

evflag	efNext;

ss ssCDOM0435
{
	state init
	{
		when(TRUE)
		{
			index = 1;
			pvPut(index, SYNC);
			cdDelay = 10.0;
			pvPut(cdDelay, SYNC);
		}state CDOM0435
	}

	state CDOM0435
	{
		when(delay(cdDelay)) 
		{
			int idx = 0;
			float value = 0.0;
			int count = 0;
			int until = 0;

			idx = (index*5)-5;
			until = idx+5;

			for(; idx < until;idx++)
			{
				om0435LogicProc[idx] = proc;
				pvPut(om0435LogicProc[idx], SYNC);
				value = valveVal[idx];
				if((int)value == 0) count++;
			};

			if(count == 5) efSet(efNext);

		}state CDOM0435

		when(efTestAndClear(efNext))
		{
			index++;
			pvPut(index, SYNC);
		}state CDOM0435

		//PhaseEndCond -> index == 12 && Done -> Transition
	}
	
}

ss ssOM0435ValveWave
{
	state init
	{
		when(TRUE)
		{
			efClear(evFanout);
		}state MakeOM0435ValveWave
	}

	state MakeOM0435ValveWave
	{
		when(efTestAndClear(evFanout)) 
		{
			int idx = 0;
			for(idx = 0; idx < 55;idx++)
				valvewave[idx] = valveVal[idx];

			pvPut(valvewave, SYNC);
		}state MakeOM0435ValveWave
	}
}

