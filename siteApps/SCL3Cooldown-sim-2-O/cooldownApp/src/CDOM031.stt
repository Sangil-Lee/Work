program CDOM031Logic
option +r;

%% #include <math.h>

int om03logicProc[107];
assign om03logicProc to {
"Cryo-CDL00:TBx01-XV7502:CDLogic.PROC", "Cryo-CDL00:TBx01-XV7501:CDLogic.PROC", "Cryo-CDL00:TBx01-CV7505:CDLogic.PROC", 
"Cryo-CDL00:TBx01-CV7502:CDLogic.PROC", "Cryo-CDL00:TBx01-CV7503:CDLogic.PROC", "Cryo-CDL00:TBx01-CV7501:CDLogic.PROC", 
"SCL31-CDL01:EBx01-CV7501:CDLogic.PROC", "P2DT-CDL04:VBx01-CV7501:CDLogic.PROC", "P2DT-CDL04:VBx01-XV7501:CDLogic.PROC",
"SCL32-CDL03:VBx19-CV7501:CDLogic.PROC", "SCL32-CDL03:VBx19-XV7501:CDLogic.PROC", "SCL32-CDL03:VBx18-CV7501:CDLogic.PROC",
"SCL32-CDL03:VBx18-XV7501:CDLogic.PROC", "SCL32-CDL03:VBx17-CV7501:CDLogic.PROC", "SCL32-CDL03:VBx17-XV7501:CDLogic.PROC",
"SCL32-CDL03:VBx16-CV7501:CDLogic.PROC", "SCL32-CDL03:VBx16-XV7501:CDLogic.PROC", "SCL32-CDL03:VBx15-CV7501:CDLogic.PROC",
"SCL32-CDL03:VBx15-XV7501:CDLogic.PROC", "SCL32-CDL03:VBx14-CV7501:CDLogic.PROC", "SCL32-CDL03:VBx14-XV7501:CDLogic.PROC",
"SCL32-CDL03:VBx13-CV7501:CDLogic.PROC", "SCL32-CDL03:VBx13-XV7501:CDLogic.PROC", "SCL32-CDL03:VBx12-CV7501:CDLogic.PROC",
"SCL32-CDL03:VBx12-XV7501:CDLogic.PROC", "SCL32-CDL03:VBx11-CV7501:CDLogic.PROC", "SCL32-CDL03:VBx11-XV7501:CDLogic.PROC",
"SCL32-CDL03:VBx10-CV7501:CDLogic.PROC", "SCL32-CDL03:VBx10-XV7501:CDLogic.PROC", "SCL32-CDL03:VBx09-CV7501:CDLogic.PROC",
"SCL32-CDL03:VBx09-XV7501:CDLogic.PROC", "SCL32-CDL03:VBx08-CV7501:CDLogic.PROC", "SCL32-CDL03:VBx08-XV7501:CDLogic.PROC",
"SCL32-CDL03:VBx07-CV7501:CDLogic.PROC", "SCL32-CDL03:VBx07-XV7501:CDLogic.PROC", "SCL32-CDL03:VBx06-CV7501:CDLogic.PROC",
"SCL32-CDL03:VBx06-XV7501:CDLogic.PROC", "SCL32-CDL03:VBx05-CV7501:CDLogic.PROC", "SCL32-CDL03:VBx05-XV7501:CDLogic.PROC",
"SCL32-CDL03:VBx04-CV7501:CDLogic.PROC", "SCL32-CDL03:VBx04-XV7501:CDLogic.PROC", "SCL32-CDL03:VBx03-CV7501:CDLogic.PROC",
"SCL32-CDL03:VBx03-XV7501:CDLogic.PROC", "SCL32-CDL03:VBx02-CV7501:CDLogic.PROC", "SCL32-CDL03:VBx02-XV7501:CDLogic.PROC",
"SCL32-CDL03:VBx01-CV7501:CDLogic.PROC", "SCL32-CDL03:VBx01-XV7501:CDLogic.PROC", "SCL32-CDL02:VBx13-CV7501:CDLogic.PROC",
"SCL32-CDL02:VBx13-XV7501:CDLogic.PROC", "SCL32-CDL02:VBx12-CV7501:CDLogic.PROC", "SCL32-CDL02:VBx12-XV7501:CDLogic.PROC",
"SCL32-CDL02:VBx11-CV7501:CDLogic.PROC", "SCL32-CDL02:VBx11-XV7501:CDLogic.PROC", "SCL32-CDL02:VBx10-CV7501:CDLogic.PROC",
"SCL32-CDL02:VBx10-XV7501:CDLogic.PROC", "SCL32-CDL02:VBx09-CV7501:CDLogic.PROC", "SCL32-CDL02:VBx09-XV7501:CDLogic.PROC",
"SCL32-CDL02:VBx08-CV7501:CDLogic.PROC", "SCL32-CDL02:VBx08-XV7501:CDLogic.PROC", "SCL32-CDL02:VBx07-CV7501:CDLogic.PROC",
"SCL32-CDL02:VBx07-XV7501:CDLogic.PROC", "SCL32-CDL02:VBx06-CV7501:CDLogic.PROC", "SCL32-CDL02:VBx06-XV7501:CDLogic.PROC",
"SCL32-CDL02:VBx05-CV7501:CDLogic.PROC", "SCL32-CDL02:VBx05-XV7501:CDLogic.PROC", "SCL32-CDL02:VBx04-CV7501:CDLogic.PROC",
"SCL32-CDL02:VBx04-XV7501:CDLogic.PROC", "SCL32-CDL02:VBx03-CV7501:CDLogic.PROC", "SCL32-CDL02:VBx03-XV7501:CDLogic.PROC",
"SCL32-CDL02:VBx02-CV7501:CDLogic.PROC", "SCL32-CDL02:VBx02-XV7501:CDLogic.PROC", "SCL32-CDL02:VBx01-CV7501:CDLogic.PROC",
"SCL32-CDL02:VBx01-XV7501:CDLogic.PROC", "SCL31-CDL01:VBx22-CV7501:CDLogic.PROC", "SCL31-CDL01:VBx22-CV7502:CDLogic.PROC",
"SCL31-CDL01:VBx22-XV7501:CDLogic.PROC", "SCL31-CDL01:VBx20-CV7501:CDLogic.PROC", "SCL31-CDL01:VBx20-CV7502:CDLogic.PROC",
"SCL31-CDL01:VBx20-XV7501:CDLogic.PROC", "SCL31-CDL01:VBx18-CV7501:CDLogic.PROC", "SCL31-CDL01:VBx18-CV7502:CDLogic.PROC",
"SCL31-CDL01:VBx18-XV7501:CDLogic.PROC", "SCL31-CDL01:VBx16-CV7501:CDLogic.PROC", "SCL31-CDL01:VBx16-CV7502:CDLogic.PROC",
"SCL31-CDL01:VBx16-XV7501:CDLogic.PROC", "SCL31-CDL01:VBx14-CV7501:CDLogic.PROC", "SCL31-CDL01:VBx14-CV7502:CDLogic.PROC",
"SCL31-CDL01:VBx14-XV7501:CDLogic.PROC", "SCL31-CDL01:VBx12-CV7501:CDLogic.PROC", "SCL31-CDL01:VBx12-CV7502:CDLogic.PROC",
"SCL31-CDL01:VBx12-XV7501:CDLogic.PROC", "SCL31-CDL01:VBx10-CV7501:CDLogic.PROC", "SCL31-CDL01:VBx10-CV7502:CDLogic.PROC",
"SCL31-CDL01:VBx10-XV7501:CDLogic.PROC", "SCL31-CDL01:VBx08-CV7501:CDLogic.PROC", "SCL31-CDL01:VBx08-CV7502:CDLogic.PROC",
"SCL31-CDL01:VBx08-XV7501:CDLogic.PROC", "SCL31-CDL01:VBx06-CV7501:CDLogic.PROC", "SCL31-CDL01:VBx06-CV7502:CDLogic.PROC",
"SCL31-CDL01:VBx06-XV7501:CDLogic.PROC", "SCL31-CDL01:VBx04-CV7501:CDLogic.PROC", "SCL31-CDL01:VBx04-CV7502:CDLogic.PROC",
"SCL31-CDL01:VBx04-XV7501:CDLogic.PROC", "SCL31-CDL01:VBx02-CV7501:CDLogic.PROC", "SCL31-CDL01:VBx02-CV7502:CDLogic.PROC",
"SCL31-CDL01:VBx02-XV7501:CDLogic.PROC", "SCL31-CDL01:EBx01-CV7502:CDLogic.PROC"
};
monitor om03logicProc;

float valveVal[107];
assign valveVal to {
"Cryo-CDL00:TBx01-XV7502:Valve", "Cryo-CDL00:TBx01-XV7501:Valve", "Cryo-CDL00:TBx01-CV7505:Valve", 
"Cryo-CDL00:TBx01-CV7502:Valve", "Cryo-CDL00:TBx01-CV7503:Valve", "Cryo-CDL00:TBx01-CV7501:Valve", 
"SCL31-CDL01:EBx01-CV7501:Valve", "P2DT-CDL04:VBx01-CV7501:Valve", "P2DT-CDL04:VBx01-XV7501:Valve",
"SCL32-CDL03:VBx19-CV7501:Valve", "SCL32-CDL03:VBx19-XV7501:Valve", "SCL32-CDL03:VBx18-CV7501:Valve",
"SCL32-CDL03:VBx18-XV7501:Valve", "SCL32-CDL03:VBx17-CV7501:Valve", "SCL32-CDL03:VBx17-XV7501:Valve",
"SCL32-CDL03:VBx16-CV7501:Valve", "SCL32-CDL03:VBx16-XV7501:Valve", "SCL32-CDL03:VBx15-CV7501:Valve",
"SCL32-CDL03:VBx15-XV7501:Valve", "SCL32-CDL03:VBx14-CV7501:Valve", "SCL32-CDL03:VBx14-XV7501:Valve",
"SCL32-CDL03:VBx13-CV7501:Valve", "SCL32-CDL03:VBx13-XV7501:Valve", "SCL32-CDL03:VBx12-CV7501:Valve",
"SCL32-CDL03:VBx12-XV7501:Valve", "SCL32-CDL03:VBx11-CV7501:Valve", "SCL32-CDL03:VBx11-XV7501:Valve",
"SCL32-CDL03:VBx10-CV7501:Valve", "SCL32-CDL03:VBx10-XV7501:Valve", "SCL32-CDL03:VBx09-CV7501:Valve",
"SCL32-CDL03:VBx09-XV7501:Valve", "SCL32-CDL03:VBx08-CV7501:Valve", "SCL32-CDL03:VBx08-XV7501:Valve",
"SCL32-CDL03:VBx07-CV7501:Valve", "SCL32-CDL03:VBx07-XV7501:Valve", "SCL32-CDL03:VBx06-CV7501:Valve",
"SCL32-CDL03:VBx06-XV7501:Valve", "SCL32-CDL03:VBx05-CV7501:Valve", "SCL32-CDL03:VBx05-XV7501:Valve",
"SCL32-CDL03:VBx04-CV7501:Valve", "SCL32-CDL03:VBx04-XV7501:Valve", "SCL32-CDL03:VBx03-CV7501:Valve",
"SCL32-CDL03:VBx03-XV7501:Valve", "SCL32-CDL03:VBx02-CV7501:Valve", "SCL32-CDL03:VBx02-XV7501:Valve",
"SCL32-CDL03:VBx01-CV7501:Valve", "SCL32-CDL03:VBx01-XV7501:Valve", "SCL32-CDL02:VBx13-CV7501:Valve",
"SCL32-CDL02:VBx13-XV7501:Valve", "SCL32-CDL02:VBx12-CV7501:Valve", "SCL32-CDL02:VBx12-XV7501:Valve",
"SCL32-CDL02:VBx11-CV7501:Valve", "SCL32-CDL02:VBx11-XV7501:Valve", "SCL32-CDL02:VBx10-CV7501:Valve",
"SCL32-CDL02:VBx10-XV7501:Valve", "SCL32-CDL02:VBx09-CV7501:Valve", "SCL32-CDL02:VBx09-XV7501:Valve",
"SCL32-CDL02:VBx08-CV7501:Valve", "SCL32-CDL02:VBx08-XV7501:Valve", "SCL32-CDL02:VBx07-CV7501:Valve",
"SCL32-CDL02:VBx07-XV7501:Valve", "SCL32-CDL02:VBx06-CV7501:Valve", "SCL32-CDL02:VBx06-XV7501:Valve",
"SCL32-CDL02:VBx05-CV7501:Valve", "SCL32-CDL02:VBx05-XV7501:Valve", "SCL32-CDL02:VBx04-CV7501:Valve",
"SCL32-CDL02:VBx04-XV7501:Valve", "SCL32-CDL02:VBx03-CV7501:Valve", "SCL32-CDL02:VBx03-XV7501:Valve",
"SCL32-CDL02:VBx02-CV7501:Valve", "SCL32-CDL02:VBx02-XV7501:Valve", "SCL32-CDL02:VBx01-CV7501:Valve",
"SCL32-CDL02:VBx01-XV7501:Valve", "SCL31-CDL01:VBx22-CV7501:Valve", "SCL31-CDL01:VBx22-CV7502:Valve",
"SCL31-CDL01:VBx22-XV7501:Valve", "SCL31-CDL01:VBx20-CV7501:Valve", "SCL31-CDL01:VBx20-CV7502:Valve",
"SCL31-CDL01:VBx20-XV7501:Valve", "SCL31-CDL01:VBx18-CV7501:Valve", "SCL31-CDL01:VBx18-CV7502:Valve",
"SCL31-CDL01:VBx18-XV7501:Valve", "SCL31-CDL01:VBx16-CV7501:Valve", "SCL31-CDL01:VBx16-CV7502:Valve",
"SCL31-CDL01:VBx16-XV7501:Valve", "SCL31-CDL01:VBx14-CV7501:Valve", "SCL31-CDL01:VBx14-CV7502:Valve",
"SCL31-CDL01:VBx14-XV7501:Valve", "SCL31-CDL01:VBx12-CV7501:Valve", "SCL31-CDL01:VBx12-CV7502:Valve",
"SCL31-CDL01:VBx12-XV7501:Valve", "SCL31-CDL01:VBx10-CV7501:Valve", "SCL31-CDL01:VBx10-CV7502:Valve",
"SCL31-CDL01:VBx10-XV7501:Valve", "SCL31-CDL01:VBx08-CV7501:Valve", "SCL31-CDL01:VBx08-CV7502:Valve",
"SCL31-CDL01:VBx08-XV7501:Valve", "SCL31-CDL01:VBx06-CV7501:Valve", "SCL31-CDL01:VBx06-CV7502:Valve",
"SCL31-CDL01:VBx06-XV7501:Valve", "SCL31-CDL01:VBx04-CV7501:Valve", "SCL31-CDL01:VBx04-CV7502:Valve",
"SCL31-CDL01:VBx04-XV7501:Valve", "SCL31-CDL01:VBx02-CV7501:Valve", "SCL31-CDL01:VBx02-CV7502:Valve",
"SCL31-CDL01:VBx02-XV7501:Valve", "SCL31-CDL01:EBx01-CV7502:Valve"
};
monitor valveVal;

evflag  evFanout;
sync	valveVal	evFanout;

int index = 0;
assign index to "SCL3:CD-OM031:IndexPV";
monitor index;

int proc = 1;

float om031Val;
assign om031Val to "SCL3:CD-OM031:Value";
monitor om031Val;

float cdDelay;
assign cdDelay to "SCL3:CD-OM031:ScanTime";
monitor cdDelay;

float	valvewave[107];
assign	valvewave to "SCL3:CD-OM031:ValveWave";
monitor valvewave;

%{
float OM031SetValue(int *index, float *value)
{
	float retVal = 0.0;
	int idx = *index;
	float val = *value;
	printf("Index:%d, Value:%f\n", idx, val);
	switch (idx)
	{
		case 0:
		case 1:
			if (val == 1)
				idx++;
			break;

		default:
			break;

	}

	*index = idx;
	*value = val;

	return retVal;
}
}%

ss ssCDOM031
{
	state init
	{
		when(TRUE)
		{
			OM031SetValue(&index, &valveVal[index]);
		}state CDOM031
	}
	state CDOM031
	{
		when(delay(cdDelay)) 
		{
			if(index == 0  || index == 1  || index == 8  || index == 10 ||
			   index == 12 || index == 14 || index == 16 || index == 18 || index == 20 || 
			   index == 22 || index == 24 || index == 26 || index == 28 || index == 30 || 
			   index == 32 || index == 34 || index == 36 || index == 38 || index == 40 || 
			   index == 42 || index == 44 || index == 46 || index == 48 || index == 50 || 
			   index == 52 || index == 54 || index == 56 || index == 58 || index == 60 || 
			   index == 62 || index == 64 || index == 66 || index == 68 || index == 70 || 
			   index == 72 || index == 75 || index == 78 || index == 81 || index == 84 || 
			   index == 87 || index == 90 || index == 93 || index == 96 || index == 99 || 
			   index == 102|| index == 105)
			{
				if(om031Val == 1) {
					om031Val = 0;
					index++;
					pvPut(index, SYNC);
				} else {
					om031Val = valveVal[index];
				};
			}
			else
			{
				if(om031Val == 100) {
					om031Val = 0;
					index++;
					pvPut(index, SYNC);
				} else {
					om031Val = valveVal[index];
				};
			};


			pvPut(om031Val, SYNC);
			if(index < 107)
			{
				om03logicProc[index] = proc;
				pvPut(om03logicProc[index], SYNC);
			};
		}state CDOM031
	}
	
}

ss ssOM031ValveWave
{
	state init
	{
		when(TRUE)
		{
			efClear(evFanout);
		}state MakeOM031ValveWave
	}

	state MakeOM031ValveWave
	{
		when(efTestAndClear(evFanout)) 
		{
			int idx = 0;
			%%for(idx = 0; idx < 107;idx++)
				valvewave[idx] = valveVal[idx];

			pvPut(valvewave, SYNC);
		}state MakeOM031ValveWave
	}
}

