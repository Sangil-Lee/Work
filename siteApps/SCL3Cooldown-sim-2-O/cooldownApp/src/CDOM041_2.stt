program CDOM041_2Logic
option +r;

%% #include <math.h>

int om041_2LogicProc[2];
assign om041_2LogicProc to {
"SCL31-CDL01:EBx01-CV7501:CDLogic.PROC", "SCL31-CDL01:EBx01-CV7402:CDLogic.PROC"
};
monitor om041_2LogicProc;

float valveVal[2];
assign valveVal to {
"SCL31-CDL01:EBx01-CV7501:Valve", "SCL31-CDL01:EBx01-CV7402:Valve"
};

monitor valveVal;

evflag  evFanout;
sync	valveVal	evFanout;

int index = 0;
assign index to "SCL3:CD-OM041_2:IndexPV";
monitor index;

int proc = 1;

float om041_2Val;
assign om041_2Val to "SCL3:CD-OM041_2:Value";
monitor om041_2Val;

float cdDelay;
assign cdDelay to "SCL3:CD-OM041_2:ScanTime";
monitor cdDelay;

float	valvewave[2];
assign	valvewave to "SCL3:CD-OM041_2:ValveWave";
monitor valvewave;


ss ssCDOM041_2
{
	state CDOM041_2
	{
		when(delay(cdDelay)) 
		{
			if(index == 0)
			{
				if(om041_2Val == 20) {
					om041_2Val = 0;
					index++;
					pvPut(index, SYNC);
				} else {
					om041_2Val = valveVal[index];
				};
			}
			else
			{
				if(om041_2Val == 100) {
					om041_2Val = 0;
					index++;
					pvPut(index, SYNC);
				} else {
					om041_2Val = valveVal[index];
				};
			};

			pvPut(om041_2Val, SYNC);
			if(index < 2)
			{
				om041_2LogicProc[index] = proc;
				pvPut(om041_2LogicProc[index], SYNC);
			};
		}state CDOM041_2
	}
	
}

ss ssOM041_2ValveWave
{
	state init
	{
		when(TRUE)
		{
			efClear(evFanout);
		}state MakeOM041_2ValveWave
	}

	state MakeOM041_2ValveWave
	{
		when(efTestAndClear(evFanout)) 
		{
			int idx = 0;
			%%for(idx = 0; idx < 2;idx++)
				valvewave[idx] = valveVal[idx];

			pvPut(valvewave, SYNC);
		}state MakeOM041_2ValveWave
	}
}

