program seqHeater
option +r;

//Global Variable 
//Cool-down Heater
float cd_volt_read, cd_curr_read, cd_watt_set, cd_volt_out, cd_steptime;
short cd_scan, cd_scanstatus, cd_output;
//4K Heater
//2K Heater


//assing PV
//Cool-down Heater
assign cd_scanstatus to "{SYS}-{SUBSYS}:{DEV}-{SUBDEV}:CDScanStatus";
assign cd_scan to "{SYS}-{SUBSYS}:{DEV}-{SUBDEV}:CDScan";
assign cd_volt_read to "{SYS}-{SUBSYS}:{DEV}-{SUBDEV}:CDVoltR";
assign cd_curr_read to "{SYS}-{SUBSYS}:{DEV}-{SUBDEV}:CDCurrentR";
assign cd_watt_set to "{SYS}-{SUBSYS}:{DEV}-{SUBDEV}:CDWattSet";
assign cd_volt_out to "{SYS}-{SUBSYS}:{DEV}-{SUBDEV}:CDVoltSet";
assign cd_output to "{SYS}-{SUBSYS}:{DEV}-{SUBDEV}:CDOutputOnOff";
assign cd_steptime to "{SYS}-{SUBSYS}:{DEV}-{SUBDEV}:CDStepTime";
//4K Heater
//2K Heater


//monitor
//Cool-down Heater
monitor cd_scanstatus;
monitor cd_scan;
monitor cd_volt_read;
monitor cd_curr_read;
monitor cd_watt_set;
monitor cd_volt_out;
monitor cd_output;
monitor cd_steptime;
//4K Heater
//2K Heater

//Local Variable
//Cool-down Heater
float cd_volt_gap, cd_watt_before;
short cd_inc_flag, cd_dec_flag;
//4K Heater
//2K Heater


ss scan
{
  state init{
		when(){
			cd_watt_before=0.0;
			cd_inc_flag=0;
			cd_dec_flag=0;
			printf("Sequence program started\n");	
		} state Scan_Start
	}
    
	state Scan_Start{
		when (cd_scan==1 && cd_scanstatus == 0){
			printf("Watt Scan Start!\n");
			pvGet(cd_watt_set);
			pvGet(cd_volt_read);
			pvGet(cd_curr_read);
			cd_volt_out=cd_volt_read;
			cd_watt_before=cd_volt_read*cd_curr_read;
			pvGet(cd_steptime);
			printf("cd_steptime =%f\n", cd_steptime);
			if(cd_watt_before < cd_watt_set){
				cd_volt_gap=0.5;
				cd_scanstatus=1;
				pvPut(cd_scanstatus);
				cd_inc_flag=1;
				printf("scan condition 111 gap=%f, cd_scanstatus=%d, cd_volt_out=%f\n", cd_volt_gap, cd_scanstatus, cd_volt_out);
			}else if(cd_watt_before > cd_watt_set){
				cd_volt_gap=-0.5;
				cd_scanstatus=1;
				pvPut(cd_scanstatus);
				cd_dec_flag=1;
				printf("scan condition 222 gap=%f, cd_scanstatus=%d, cd_volt_out=%f\n", cd_volt_gap, cd_scanstatus, cd_volt_out);
			}else {
				cd_scan=0;
				printf("Watt Scan eles!\n");
			}
		} state Scan_Output
	}

	state Scan_Output{
		when(cd_scan==1 && cd_scanstatus==1 && cd_output==1){
				pvPut(cd_volt_out);
		} state Scan_Check

    when(cd_scan==0 || cd_scanstatus==0 || cd_output==0) {
			cd_scan = 0;
			cd_scanstatus = 0;
			pvPut(cd_scan);
			pvPut(cd_scanstatus);
			printf("scan stop\n");
		} state Scan_Start
	}

	state Scan_Check{
		when(delay(cd_steptime)) {
			pvGet(cd_volt_read);
			cd_volt_out=cd_volt_read+cd_volt_gap;
			pvGet(cd_curr_read);
			cd_watt_before=cd_volt_read*cd_curr_read;
			printf("cd_volt_out =%f, cd_volt_read=%f, cd_curr_read=%f, cd_watt_before=%f \n", cd_volt_out,cd_volt_read,cd_curr_read,cd_watt_before);
			if(cd_inc_flag==1 && cd_watt_set<=cd_watt_before){
				cd_scanstatus=0;
				pvPut(cd_scanstatus);
				cd_scan=0;
				pvPut(cd_scan);
				cd_inc_flag=0;
				printf("scan end 111 cd_watt_before =%f, cd_volt_out=%f, cd_volt_read=%f \n", cd_watt_before, cd_volt_out, cd_volt_read);
			}else if(cd_dec_flag==1 && cd_watt_set>=cd_watt_before){
				cd_scanstatus=0;
				pvPut(cd_scanstatus);
				cd_scan=0;
				pvPut(cd_scan);
				cd_dec_flag=0;
        printf("scan end 222 cd_watt_before =%f, cd_volt_out=%f, cd_volt_read=%f \n", cd_watt_before, cd_volt_out, cd_volt_read);
			}
		}state Scan_Output
	}

}
