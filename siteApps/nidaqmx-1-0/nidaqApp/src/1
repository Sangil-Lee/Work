//Wrapping class for system calls of nidaq device driver.

#include <stdlib.h>
#include <termios.h>

#include "nidaqDriver.h"


namespace nidaq
{
	//==============================================================================
	//----===@ nidaqDriver
	// Parameters  :
	// Description :
	//==============================================================================
	nidaqDriver::nidaqDriver(const string device, const int32 termConfig, const float64 minVal, const float64 maxVal, const float64 sampRate):software(0.1),g_taskHandle(0)
	{
		/*********************************************/
		// DAQmx Configure Code
		/*********************************************/
		DAQmxCreateTask("",&g_taskHandle);

		//DAQmxCreateAIVoltageChan(g_taskHandle, "PXI1Slot5/ai0", "", DAQmx_Val_RSE, 0.0, 10.0, DAQmx_Val_Volts, NULL);
		//DAQmxCfgSampClkTiming(g_taskHandle, "", sampRate, DAQmx_Val_Rising, DAQmx_Val_ContSamps, 1000);
		//
		//DAQmxCreateAIVoltageChan(g_taskHandle, device.c_str(), "", termConfig, minVal, maxVal, DAQmx_Val_Volts, NULL);

		//Default Create AI Channel
		//CreateAIVoltChannel(device, termConfig, minVal, maxVal);
		//CreateAIVoltChannel(device, termConfig, minVal, maxVal,DAQmx_Val_FromCustomScale, "UserLineScale");
		CreateAIVoltChannel(device, termConfig, 0.0, 100.0, DAQmx_Val_FromCustomScale, "UserLineScale");

		//Default Sampling Clock Timing.
		ConfigSampleClock();

		setScale(nidaqDriver::LinearScale, "UserLineScale");

		/*********************************************/
		// DAQmx Start Code
		/*********************************************/
		DAQmxStartTask(g_taskHandle);
	};

	//==============================================================================
	//----===@ ~nidaqDriver
	// Parameters  :
	// Description :
	//==============================================================================
	nidaqDriver::~nidaqDriver()
	{
		char        errBuff[2048]={'\0'};
		int32       error = 0;

		if( DAQmxFailed(error) )
			DAQmxGetExtendedErrorInfo(errBuff,2048);

		if( g_taskHandle!=0 )  {
			/*********************************************/
			// DAQmx Stop Code
			/*********************************************/
			DAQmxStopTask(g_taskHandle);
			DAQmxClearTask(g_taskHandle);
		};

		if( DAQmxFailed(error) )
			printf("DAQmx Error: %s\n",errBuff);
	}

	//==============================================================================
	//----===@ ~nidaqDriver
	// Parameters  :
	// Description :
	//==============================================================================
	nidaqDriver* nidaqDriver::GetInstance()
	{
		return this;
	};


	int nidaqDriver::CreateAIVoltChannel( const string device, const int32 termConfig, const float64 minVal, const float64 maxVal, const int32 units, const string scaleUnits )
	{
		//int32 DAQmxCreateAIVoltageChan (TaskHandle taskHandle, const char physicalChannel[], const char nameToAssignToChannel[], int32 terminalConfig, float64 minVal, float64 maxVal, int32 units, const char customScaleName[]);
		//return(DAQmxCreateAIVoltageChan(g_taskHandle, device.c_str(), "", termConfig, minVal, maxVal, DAQmx_Val_Volts, NULL));
		return(DAQmxCreateAIVoltageChan(g_taskHandle, device.c_str(), "", termConfig, minVal, maxVal, units, scaleUnits.c_str()));
	};

	int nidaqDriver::ConfigSampleClock(const float64 sampRate, const int32 activeEdge, const uInt64 buffsize)
	{
		//int32 DAQmxCfgSampClkTiming (TaskHandle taskHandle, const char source[], float64 rate, int32 activeEdge, int32 sampleMode, uInt64 sampsPerChanToAcquire);
		return (DAQmxCfgSampClkTiming(g_taskHandle, "", sampRate, activeEdge, DAQmx_Val_ContSamps, buffsize));
	};

	int nidaqDriver::ReadAnalog(float64 readArray[], int32 *chanRead, const int32 numSampsPerChan, const float64 timeout)
	{
		/*********************************************/
		// DAQmx Read Code
		/*********************************************/

		/*********************************************/
		//DAQmxReadAnalogF64 (TaskHandle taskHandle, int32 numSampsPerChan, float64 timeout, bool32 fillMode, float64 readArray[], uInt32 arraySizeInSamps, int32 *sampsPerChanRead, bool32 *reserved);
		//DAQmxReadAnalogF64(taskHandle,1000,10.0,DAQmx_Val_GroupByChannel,data,1000,&read,NULL);
		/*********************************************/

		int status = DAQmxReadAnalogF64(g_taskHandle, numSampsPerChan, timeout, DAQmx_Val_GroupByChannel, readArray, (uInt32)numSampsPerChan, chanRead, NULL);

#if 0
		for ( int index = 0; index < read; index++)
			printf("Data[%d] :%f\n",index, data[index]);
		printf("Acquired %d points\n",(int)read);
#endif
		return (status);

	};

	int nidaqDriver::setScale(e_scaleType scaletype, const string userScaleName, const float64 slope, const float64 yIntercept, const int32 prescaleunit, const string scaledunit)
	{
		//y = mx + b, (y=scaled value, x=raw value(0 ~ 10 volts), m = slope, b = y intercept (offset))
		//min ~ max (if m = 10, b = 5 -> max( y = 10 x 10 = 100), min (y = 0 x 10 = 0), b = not realated for min/max value)
		//CreateAIVoltChannel(device, termConfig, min_val, max_val, DAQmx_Val_FromCustomScale, "UserLineScale");
#if 1
		switch (scaletype)
		{
				//DAQmxCreateLinScale(const char name[], float64 slope, float64 yIntercept, int32 preScaledUnits, const char scaledUnit[]);
				//
			case LinearScale:
			default:
				DAQmxCreateLinScale(userScaleName.c_str(), slope, yIntercept, prescaleunit, scaledunit.c_str());
				break;
			case RangeMap:
				DAQmxCreateMapScale(userScaleName.c_str(), 0.0, 10.0, 0.0, 100.0, prescaleunit, scaledunit.c_str());
				break;
			case Polynomial:
				break;
			case MapTable:
				break;
		};
#else

		DAQmxCreateLinScale("UserLineScale", 10/*slope*/, 5/*y intercepts*/, DAQmx_Val_Volts, "bar");

#endif
		return 0;

	}

}; //name space end




