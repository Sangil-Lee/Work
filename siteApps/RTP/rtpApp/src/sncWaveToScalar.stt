program sncWaveToScalar

option +r;

float scalarPVFloat[100];
assign scalarPVFloat to {
"AI_0",  "AI_1",  "AI_2",  "AI_3",  "AI_4",
"AI_5",  "AI_6",  "AI_7",  "AI_8",  "AI_9",
"AI_10", "AI_11", "AI_12", "AI_13", "AI_14",
"AI_15", "AI_16", "AI_17", "AI_18", "AI_19",
"AI_20", "AI_21", "AI_22", "AI_23", "AI_24",
"AI_25", "AI_26", "AI_27", "AI_28", "AI_29",
"AI_30", "AI_31", "AI_32", "AI_33", "AI_34",
"AI_35", "AI_36", "AI_37", "AI_38", "AI_39",
"AI_40", "AI_41", "AI_42", "AI_43", "AI_44",
"AI_45", "AI_46", "AI_47", "AI_48", "AI_49",
"AI_50", "AI_51", "AI_52", "AI_53", "AI_54",
"AI_55", "AI_56", "AI_57", "AI_58", "AI_59",
"AI_60", "AI_61", "AI_62", "AI_63", "AI_64",
"AI_65", "AI_66", "AI_67", "AI_68", "AI_69",
"AI_70", "AI_71", "AI_72", "AI_73", "AI_74",
"AI_75", "AI_76", "AI_77", "AI_78", "AI_79",
"AI_80", "AI_81", "AI_82", "AI_83", "AI_84",
"AI_85", "AI_86", "AI_87", "AI_88", "AI_89",
"AI_90", "AI_91", "AI_92", "AI_93", "AI_94",
"AI_95", "AI_96", "AI_97", "AI_98", "AI_99"
};

float scalarPVShort[100];
assign scalarPVShort to {
"LI_0",  "LI_1",  "LI_2",  "LI_3",  "LI_4",
"LI_5",  "LI_6",  "LI_7",  "LI_8",  "LI_9",
"LI_10", "LI_11", "LI_12", "LI_13", "LI_14",
"LI_15", "LI_16", "LI_17", "LI_18", "LI_19",
"LI_20", "LI_21", "LI_22", "LI_23", "LI_24",
"LI_25", "LI_26", "LI_27", "LI_28", "LI_29",
"LI_30", "LI_31", "LI_32", "LI_33", "LI_34",
"LI_35", "LI_36", "LI_37", "LI_38", "LI_39",
"LI_40", "LI_41", "LI_42", "LI_43", "LI_44",
"LI_45", "LI_46", "LI_47", "LI_48", "LI_49",
"LI_50", "LI_51", "LI_52", "LI_53", "LI_54",
"LI_55", "LI_56", "LI_57", "LI_58", "LI_59",
"LI_60", "LI_61", "LI_62", "LI_63", "LI_64",
"LI_65", "LI_66", "LI_67", "LI_68", "LI_69",
"LI_70", "LI_71", "LI_72", "LI_73", "LI_74",
"LI_75", "LI_76", "LI_77", "LI_78", "LI_79",
"LI_80", "LI_81", "LI_82", "LI_83", "LI_84",
"LI_85", "LI_86", "LI_87", "LI_88", "LI_89",
"LI_90", "LI_91", "LI_92", "LI_93", "LI_94",
"LI_95", "LI_96", "LI_97", "LI_98", "LI_99"
};


float	waveFloatPV[100];
assign	waveFloatPV to "RTPWaveformFLOAT";
monitor waveFloatPV;
evflag  evWave;
sync 	waveFloatPV evWave;

float	waveShortPV1[100];
assign	waveShortPV1 to "RTPWaveformSHORT";
monitor waveShortPV1;

int index = 0;
int pvcnt = 0;

ss makewave
{
	state init
	{
		when(TRUE)
		{
			efClear(evWave);
		}state MakeWaveToScalar
	}

	state MakeWaveToScalar
	{
		when(efTestAndClear(evWave))
		{
			index = 0;
			pvcnt = sizeof(scalarPVFloat)/sizeof(scalarPVFloat[0]);
			for(index = 0; index < pvcnt;index++) {
				scalarPVFloat[index] = waveFloatPV[index];
				scalarPVShort[index] = waveShortPV1[index];
				pvPut(scalarPVFloat[index], ASYNC);
			}
		}state SyncValue
	}
	state SyncValue
	{
		when(pvArrayPutComplete(scalarPVFloat,TRUE) && pvArrayPutComplete(scalarPVShort, TRUE) )
		{
		}state MakeWaveToScalar
	}
}

