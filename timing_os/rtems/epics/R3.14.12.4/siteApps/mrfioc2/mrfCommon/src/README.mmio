
Safe operations on I/O memory.

This files defines a set of macros for access to Memory Mapped I/O

They are named Tioread# and Tiowrite# where # can be 8, 16, or 32.
'T' can either be 'le_', 'be_', or 'nat_' (except ioread8 and
iowrite8).

The macros defined use OS specific extensions to ensure the following.

1) Width.  A 16 bit operation will not be broken into two 8 bit operations,
           or one half of a 32 bit operation.

2) Order.  Writes to two different registers will not be reordered.
           This only applies to MMIO operations, not between MMIO and
           normal memory operations.

PCI access should use either 'le_' or 'be_' as determined by the
device byte order.

VME access should always use 'nat_'.  If the device byte order is
little endian then an explicit swap is required.

Examples:

Big endian device:

= PCI

be_write16(base+off, 14);
var = be_read16(base+off);

= VME

nat_write16(base+off, 14);
var = nat_read16(base+off);

Little endian device

= PCI

le_write16(base+off, 14);
var = le_read16(base+off);

= VME

nat_write16(base+off, bswap16(14));
var = bswap16(nat_write16(base+off));

This difference arises because VME bridges implement hardware byte
swapping on little endian systems, while PCI bridges do not.
Software accessing PCI devices must know if byte swapping is required.
This conditional swap is implemented by the 'be_' and 'le_' macros.

This is a fundamental difference between PCI and VME.

Software accessing PCI _must_ do conditional swapping.

Software accessing MVE must _not_ do conditional swapping.
