
# Template to provide the records required for an input. 
# This makes use of the macros required by lakeshore336.template
# but also requires macros to specify the input channel and index.
# The index is to provide a way for the developer to use a different
# channel naming scheme.
#
# For some commands, I hard coded the last part of the record names into 
# the protocol file. This seems the easiest way to deal with commands
# will lots of params returned back, and avoid problematic long INP fields. 
# For the ZONE commands I used waveforms and subarrays, but that is not as simple.
#
# Macros:
# INPUT - A to D, or D1 to D5
# INDEX - Index to use for the input channel PV name and DESC (eg. 0 to 3)
# DISABLE - PV name to use for SDIS

##
## Alarm summary record for input
## This summarizes the software limits on the temperature readings,
## the alarm status reading from the controller and the input reading status.
##
record(calc, "$(P):ALARM$(INDEX)_SUMMARY_CALC") {
  field(INPA, "$(P):KRDG$(INDEX) CP MS")
  field(INPB, "$(P):ALARM$(INDEX)_HIGH CP MS")
  field(INPC, "$(P):ALARM$(INDEX)_LOW CP MS")
  field(INPD, "$(P):RDGST$(INDEX) CP MS")
  field(CALC, "A")
  field(FLNK, "$(P):ALARM$(INDEX)_SUMMARY_CALC2")
  field(SDIS, "$(DISABLE)")  
}

record(calcout, "$(P):ALARM$(INDEX)_SUMMARY_CALC2") {
  field(INPA, "$(P):ALARM$(INDEX)_SUMMARY_CALC.STAT")
  field(CALC, "A!=0?1:0")
  field(DOPT, "Use CALC")
  field(OOPT, "Every Time")
  field(OUT, "$(P):ALARM$(INDEX)_SUMMARY PP")
}

record(bi, "$(P):ALARM$(INDEX)_SUMMARY") {
  field(ZNAM, "No Alarm")
  field(ONAM, "Alarm")
  field(OSV, "MAJOR")
  field(PINI, "YES")
  field(VAL, "0")  
  info(archive, "Monitor, 00:00:01, VAL")   
}

##
## If we disable polling this input, disable the alarm
##
record(calcout, "$(P):ALARM$(INDEX)_SUMMARY_DISABLE") {
  field(INPA, "$(DISABLE) CP")
  field(CALC, "A==1?0:1")
  field(DOPT, "Use CALC")
  field(OOPT, "When Zero")
  field(OUT, "$(P):ALARM$(INDEX)_SUMMARY.VAL PP")
}
	

## 
## Read the temperature on channel $(INDEX) in Kelvin.
##  
record(ai, "$(P):KRDG$(INDEX)") {
  field(DTYP, "stream")
  field(SDIS, "$(DISABLE)")
  field(DESC, "Channel $(INDEX) Temperature")
  field(INP, "@ls336.proto getKRDG($(INPUT)) $(PORT) $(ADDR)")
  field(SCAN, "$(TEMPSCAN) second")
  field(PREC, "3")
  field(EGU, "K")
  field(HHSV,"MAJOR")
  field(HSV, "MINOR")
  field(LSV, "MINOR")
  field(LLSV,"MAJOR")
  field(HYST,"1.0")
  field(HIHI,"1000")
  field(HIGH,"1000")
  field(LOW,"-1")
  field(LOLO,"-1")
  field(ADEL, "$(ADEL=1)")
  field(MDEL, "$(MDEL=0)")
  info(autosaveFields, "HIHI HIGH LOW LOLO ADEL MDEL")
  info(archive, "Monitor, 00:00:01, VAL")   
}

## 
## Read the raw voltage on channel $(INDEX).
##
record(ai, "$(P):SRDG$(INDEX)") {
  field(DTYP, "stream")
  field(SDIS, "$(DISABLE)")
  field(INP, "@ls336.proto getSRDG($(INPUT)) $(PORT) $(ADDR)")
  field(SCAN, "$(TEMPSCAN) second")
  field(PREC, "3")
  field(EGU, "V")
  field(ADEL, "$(ADEL=1)")
  field(MDEL, "$(MDEL=0)")
}

##
## Set sensor $(INDEX) name 
##
record(stringout, "$(P):INNAME_S$(INDEX)") {
  field(DESC, "Input $(INDEX) Name")
  field(DTYP, "stream")
  field(SDIS, "$(P):DISABLE")
  field(OUT, "@ls336.proto setINNAME($(INPUT)) $(PORT) $(ADDR)")
  field(FLNK, "$(P):INNAME$(INDEX).PROC CA")
}

## 
## Read input sensor $(INDEX) name
##
record(stringin, "$(P):INNAME$(INDEX)") {
  field(DTYP, "stream")
  field(SDIS, "$(P):DISABLE")
  field(INP, "@ls336.proto getINNAME($(INPUT)) $(PORT) $(ADDR)")
  field(PINI, "YES")
  field(SCAN, "Passive")
}

##
## Read the high alarm status for input $(INDEX).
## This also populates ALARM$(INDEX)_LOW
##
record(bi, "$(P):ALARM$(INDEX)_HIGH") {
  field(DTYP, "stream")
  field(SDIS, "$(DISABLE)")
  field(INP, "@ls336.proto getALARMST($(INPUT),$(P):ALARM$(INDEX)_LOW) $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
  field(ZNAM, "Off")
  field(ONAM, "On")
  field(OSV, "MAJOR")
  info(archive, "Monitor, 00:00:01, VAL")   
}

##
## Read the low alarm status for input $(INDEX)
##
record(bi, "$(P):ALARM$(INDEX)_LOW") {
  field(DTYP, "Soft Channel")	   
  field(ZNAM, "Off")
  field(ONAM, "On")
  field(OSV, "MAJOR")
  info(archive, "Monitor, 00:00:01, VAL")   
}

##
## Read the alarm parameters.
## NOTE: the last part of the record name is hard coded into protocol file. 
##
record(bi, "$(P):ALARM$(INDEX)") {
  field(DESC, "Read Alarm Params")
  field(DTYP, "stream")
  field(SDIS, "$(DISABLE)")
  field(INP, "@ls336.proto getALARM($(INPUT),$(P):ALARM$(INDEX)) $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
}

##
## Read the rest of the alarm params.
## NOTE: the last part of the record names are hard coded into protocol file. 
##
record(bi, "$(P):ALARM$(INDEX)_ONOFF") {
  field(DESC, "Alarm Enabled")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
}
record(ai, "$(P):ALARM$(INDEX)_HIGHVAL") {
  field(DESC, "Alarm High Value")
  field(EGU, "K")
}
record(ai, "$(P):ALARM$(INDEX)_LOWVAL") {
  field(DESC, "Alarm Low Value")
  field(EGU, "K")
}
record(ai, "$(P):ALARM$(INDEX)_DB") {
  field(DESC, "Alarm Deadband")
  field(EGU, "K")
}
record(bi, "$(P):ALARM$(INDEX)_LE") {
  field(DESC, "Alarm Latch Enable")
  field(ZNAM, "Non Latching")
  field(ONAM, "Latching")
}
record(bi, "$(P):ALARM$(INDEX)_AU") {
  field(DESC, "Alarm Audible")
  field(ZNAM, "Quiet")
  field(ONAM, "Audible")
}
record(bi, "$(P):ALARM$(INDEX)_VIS") {
  field(DESC, "Alarm Visible")
  field(ZNAM, "Non Visible")
  field(ONAM, "Visible")
}


##
## Read the input reading status
##
record(mbbi, "$(P):RDGST$(INDEX)") {
  field(DTYP, "stream")
  field(SDIS, "$(DISABLE)")
  field(ZRST, "Valid")
  field(ZRVL, "0")
  field(ONST, "Invalid")
  field(ONVL, "1")
  field(TWST, "Temp Under")
  field(TWVL, "16")
  field(THST, "Temp Over")
  field(THVL, "32")
  field(FRST, "Sensor Zero")
  field(FRVL, "64")
  field(FVST, "Sensor Over")
  field(FVVL, "128")
  field(ONSV, "MAJOR")
  field(TWSV, "MAJOR")
  field(THSV, "MAJOR")
  field(FRSV, "MAJOR")
  field(FVSV, "MAJOR")
  field(SCAN, "$(SCAN) second")  
  field(INP, "@ls336.proto getRDGST($(INPUT)) $(PORT) $(ADDR)")
  info(archive, "Monitor, 00:00:01, VAL")   
}

##
## Read the input curve number
##
record(longin, "$(P):INCRV$(INDEX)") {
  field(DTYP, "stream")
  field(SDIS, "$(DISABLE)")
  field(SCAN, "$(SCAN) second")  
  field(INP, "@ls336.proto getINCRV($(INPUT)) $(PORT) $(ADDR)")
}


##
## Read the input type information.
## NOTE: the last part of the record name is hard coded into protocol file. 
##
record(bi, "$(P):INTYPE$(INDEX)") {
  field(DESC, "Read Input Type Params")
  field(DTYP, "stream")
  field(SDIS, "$(DISABLE)")
  field(INP, "@ls336.proto getINTYPE($(INPUT),$(P):INTYPE$(INDEX)) $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
}

##
## Read the rest of the input type params.
## NOTE: the last part of the record names are hard coded into protocol file. 
##
record(mbbi, "$(P):INTYPE$(INDEX)_S") {
  field(DESC, "Sensor Type")
  field(ZRST, "Disabled")
  field(ZRVL, "0")
  field(ONST, "Diode")
  field(ONVL, "1")
  field(TWST, "Platinum RTD")
  field(TWVL, "2")
  field(THST, "NTC RTD")
  field(THVL, "3")
  field(FRST, "Thermocouple")
  field(FRVL, "4")
  field(FVST, "Capacitance")
  field(FVVL, "5")
}
record(bi, "$(P):INTYPE$(INDEX)_AR") {
  field(DESC, "Auto Range")
  field(ZNAM, "Off")
  field(ONAM, "On")
}
record(mbbi, "$(P):INTYPE$(INDEX)_R") {
  field(DESC, "Range")
  field(ZRST, "10 Ohm / 2.5V / 50mV")
  field(ZRVL, "0")
  field(ONST, "30 Ohm / 10V")
  field(ONVL, "1")
  field(TWST, "100 Ohm")
  field(TWVL, "2")
  field(THST, "300 Ohm")
  field(THVL, "3")
  field(FRST, "1 KOhm")
  field(FRVL, "4")
  field(FVST, "3 KOhm")
  field(FVVL, "5")
  field(SXST, "10 KOhm")
  field(SXVL, "6")
  field(SVST, "30 KOhm")
  field(SVVL, "7")
  field(EIST, "100 KOhm")
  field(EIVL, "8")
}
record(bi, "$(P):INTYPE$(INDEX)_C") {
  field(DESC, "Compensation")
  field(ZNAM, "Off")
  field(ONAM, "On")
}
record(mbbi, "$(P):INTYPE$(INDEX)_U") {
  field(DESC, "Units")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Kelvin")
  field(ONVL, "1")
  field(TWST, "Celcius")
  field(TWVL, "2")
  field(THST, "Sensor")
  field(THVL, "3")
}


