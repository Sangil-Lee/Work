1. Nodave 라이브러리 설치:

Nodave는 Siemens S7 PLC와 통신하기 위한 오픈 소스 라이브러리입니다. 먼저 EPICS IOC가 실행되는 시스템에 Nodave 라이브러리를 설치해야 합니다.
Nodave는 다양한 플랫폼을 지원하므로, 사용 중인 운영체제에 맞는 설치 방법을 따르세요. 일반적으로 소스 코드를 다운로드하여 컴파일하거나, 패키지 관리자를 통해 설치할 수 있습니다.
2. EPICS IOC 설정:

EPICS IOC(Input Output Controller)는 PLC 데이터를 EPICS 환경으로 가져오는 역할을 합니다. IOC를 설정하려면 다음 단계를 따르세요.
IOC 애플리케이션 생성: EPICS 기반 개발 환경에서 IOC 애플리케이션을 생성합니다.
Nodave 드라이버 통합: 생성된 IOC 애플리케이션에 Nodave 드라이버를 통합합니다. 이는 Nodave 라이브러리를 IOC 애플리케이션에 링크하고, 필요한 EPICS 레코드를 생성하는 것을 의미합니다.
통신 설정: PLC의 IP 주소, 포트 번호, Rack 및 Slot 번호와 같은 통신 설정을 IOC 애플리케이션에 입력합니다.
3. EPICS DB 작성:

EPICS DB(데이터베이스)는 PLC 데이터를 EPICS 레코드로 매핑하는 역할을 합니다. 다음은 Nodave를 사용하여 Siemens S7 데이터를 EPICS 레코드로 매핑하는 DB 예시입니다.
record(ai, "PLC:AI:01") {
    field(DESC, "Analog Input 01")
    field(DTYP, "nodave")
    field(INP, "@MB100")
    field(EGU, "V")
}

record(bo, "PLC:BO:01") {
    field(DESC, "Digital Output 01")
    field(DTYP, "nodave")
    field(OUT, "@QB200")
}
record(ai, "PLC:AI:01"): 아날로그 입력 레코드를 생성합니다.
field(DTYP, "nodave"): Nodave 드라이버를 사용하도록 지정합니다.
field(INP, "@MB100"): PLC의 MB100 메모리 영역에서 데이터를 읽어옵니다.
record(bo, "PLC:BO:01"): 디지털 출력 레코드를 생성합니다.
field(OUT, "@QB200"): PLC의 QB200 메모리 영역에 데이터를 씁니다.
위 예시에서 @MB100 및 @QB200은 PLC 메모리 영역의 주소를 나타냅니다. Nodave 드라이버는 다양한 PLC 메모리 영역(예: M, I, Q, DB)을 지원합니다.
EPICS DB는 필요에 따라 다양한 레코드 유형(예: ai, ao, bi, bo, mbbo)을 사용하여 작성할 수 있습니다.
4. IOC 실행 및 테스트:

작성된 EPICS DB를 IOC 애플리케이션에 로드하고 실행합니다.
EPICS 클라이언트 도구(예: caQtDM, Channel Access Client)를 사용하여 PLC 데이터를 읽고 쓸 수 있는지 테스트합니다.
추가 정보:

Nodave 드라이버의 자세한 사용법은 Nodave 공식 문서 또는 관련 자료를 참고하세요.
EPICS DB 작성에 대한 자세한 내용은 EPICS 공식 문서 또는 관련 자료를 참고하세요.
PLC 메모리 영역의 주소 체계는 PLC 모델에 따라 다를 수 있으므로, PLC 문서를 참고하세요.
주의 사항:

PLC와의 통신 설정은 매우 중요하며, 잘못된 설정은 PLC 오작동을 유발할 수 있습니다.
PLC 데이터의 정확성을 보장하기 위해, 데이터 유형 및 단위 변환을 올바르게 설정해야 합니다.


Siemens S7 PLC의 데이터 블록(DB)을 사용하는 EPICS DB를 작성하는 방법에 대한 안내입니다.

1. Nodave 라이브러리 설정:

Nodave 라이브러리가 EPICS IOC 시스템에 올바르게 설치 및 구성되었는지 확인합니다.
PLC와의 통신 설정(IP 주소, 포트 번호, Rack, Slot)이 정확한지 확인합니다.
2. EPICS DB 작성 (DB 사용 예시):

다음은 Siemens S7 PLC의 DB10에 있는 데이터를 EPICS 레코드로 매핑하는 DB 예시입니다.
record(ai, "PLC:DB10:REAL0") {
    field(DESC, "DB10 Real Value 0")
    field(DTYP, "nodave")
    field(INP, "@DB10.DBD0")
    field(EGU, "Unit")
}

record(bi, "PLC:DB10:BOOL10") {
    field(DESC, "DB10 Bool Value 10")
    field(DTYP, "nodave")
    field(INP, "@DB10.DBX10.0")
}

record(mbbo, "PLC:DB10:INT20") {
    field(DESC, "DB10 Int Value 20")
    field(DTYP, "nodave")
    field(OUT, "@DB10.DBW20")
    field(ZRST, "0")
    field(ONST, "1")
    field(TWST, "2")
    field(THST, "3")
    field(FRST, "4")
    field(FVST, "5")
    field(SXST, "6")
    field(SVST, "7")
    field(EIST, "8")
    field(NIST, "9")
    field(TEST, "10")
    field(ELST, "11")
    field(TVST, "12")
    field(TTST, "13")
    field(FTST, "14")
    field(FFST, "15")
}
record(ai, "PLC:DB10:REAL0"): DB10의 DBD0(Real 데이터)을 읽어오는 아날로그 입력 레코드입니다.
field(INP, "@DB10.DBD0"): DB10의 DBD0 주소를 지정합니다.
record(bi, "PLC:DB10:BOOL10"): DB10의 DBX10.0(Bool 데이터)을 읽어오는 디지털 입력 레코드입니다.
field(INP, "@DB10.DBX10.0"): DB10의 DBX10.0 주소를 지정합니다.
record(mbbo, "PLC:DB10:INT20"): DB10의 DBW20(Integer 데이터)에 값을 쓰는 멀티 비트 바이너리 출력 레코드입니다.
field(OUT, "@DB10.DBW20"): DB10의 DBW20 주소를 지정합니다.
@DB10.DBD0, @DB10.DBX10.0, @DB10.DBW20과 같이 DB의 주소를 Nodave 문법에 맞게 사용합니다.
데이터 유형(Real, Bool, Integer 등)에 따라 적절한 EPICS 레코드 유형(ai, bi, mbbo 등)을 선택합니다.
3. IOC 실행 및 테스트:

작성된 EPICS DB를 IOC 애플리케이션에 로드하고 실행합니다.
EPICS 클라이언트 도구를 사용하여 PLC DB 데이터를 읽고 쓸 수 있는지 확인합니다.
추가 정보:

Nodave 드라이버는 다양한 DB 데이터 유형(Byte, Word, DWord, String 등)을 지원합니다.
PLC DB의 주소 체계 및 데이터 유형은 PLC 모델과 DB 설정에 따라 다를 수 있으므로, PLC 문서를 참고하세요.
EPICS DB 작성 시, 데이터 유형 및 단위 변환을 올바르게 설정하여 데이터의 정확성을 확보해야 합니다.
