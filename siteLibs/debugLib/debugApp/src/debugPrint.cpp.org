#include "debugPrint.h"

int epicsDebugLevel = 0;
epicsExportAddress(int, epicsDebugLevel);

char debugFile[64]="";
epicsExportAddress(char, debugFile);

void debugPrint (const epicsUInt8 debugLevel, const char *fmt, ...)
{
	char buf[1024];
	char bufTime[64];
	va_list argp;
	epicsTimeStamp epics_time;

	static FILE *fp = NULL;
	static char debugFileName[64] = "";

	va_start(argp, fmt);
	vsprintf(buf, fmt, argp);
	va_end(argp);

	epicsTimeGetCurrent (&epics_time);
	epicsTimeToStrftime (bufTime, sizeof(bufTime), "%m/%d %H:%M:%S.%03f", &epics_time);

	if (epicsDebugLevel >= debugLevel) {
		//epicsPrintf ("%s %s", bufTime, buf);
		fprintf (stdout, "[%s] %s", bufTime, buf);
	};

	if (epicsDebugLevel >= debugLevel) {
		if ( (strlen(debugFile) > 0)
				&& ((NULL == fp) || (0 != strcmp (debugFileName, debugFile)) ) ) {
			if (NULL != fp) {
				fclose (fp);
			}

			strcpy (debugFileName, debugFile);

			if (NULL == (fp = fopen (debugFileName, "a+"))) {
				fprintf (stderr, "[%s] open failed \n", debugFileName);
			}
			else {
				fprintf (stdout, "[%s] logfile %s is opened ...\n", bufTime, debugFileName);
			}
		}

		if (NULL != fp) {
			fprintf (fp, "[%s] %s", bufTime, buf);
			fflush (fp);
		}
	}
}

int DebugPrint::Print(const char* fmt, ...)
{
    va_list args;
    char timestamp[64];
	epicsTimeStamp epicstime;

	epicsTimeGetCurrent (&epicstime);
	epicsTimeToStrftime (timestamp, sizeof(timestamp), "%Y/%m/%d %H:%M:%S.%03f", &epicstime);

    va_start(args, fmt);
    const char* f = strrchr(file, '/');
    if (f) f++; else f = file;
    FILE* fp = outfile ? outfile : stdout;
    fprintf(fp, "%s ", timestamp);
    fprintf(fp, "%s:%d: ", f, line);
    vfprintf(fp, fmt, args);
    fflush(fp);
    va_end(args);
    return 1;
}

